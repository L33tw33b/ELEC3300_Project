
ELEC3300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e4  080052e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000248  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad4a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da9  00000000  00000000  0002ad86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020918  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1c0  00000000  00000000  0004e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c416b  00000000  00000000  0005b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f9b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f8  00000000  00000000  0011fa04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ed4 	.word	0x08004ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ed4 	.word	0x08004ed4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <write_register+0x34>)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <write_register+0x34>)
 80004e4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <write_register+0x34>)
 80004ee:	2194      	movs	r1, #148	; 0x94
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <write_register+0x38>)
 80004f2:	f001 fd9d 	bl	8002030 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028
 8000504:	2000002c 	.word	0x2000002c

08000508 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <read_register+0x3c>)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <read_register+0x3c>)
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <read_register+0x40>)
 8000526:	f001 fd83 	bl	8002030 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	2194      	movs	r1, #148	; 0x94
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <read_register+0x40>)
 8000536:	f001 fe79 	bl	800222c <HAL_I2C_Master_Receive>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000028 	.word	0x20000028
 8000548:	2000002c 	.word	0x2000002c

0800054c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800054c:	b084      	sub	sp, #16
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
 8000552:	f107 0c08 	add.w	ip, r7, #8
 8000556:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800055a:	4b81      	ldr	r3, [pc, #516]	; (8000760 <CS43_Init+0x214>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000562:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <CS43_Init+0x214>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	69da      	ldr	r2, [r3, #28]
 8000568:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <CS43_Init+0x214>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000570:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2110      	movs	r1, #16
 8000576:	487b      	ldr	r0, [pc, #492]	; (8000764 <CS43_Init+0x218>)
 8000578:	f001 fbfc 	bl	8001d74 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800057c:	4b7a      	ldr	r3, [pc, #488]	; (8000768 <CS43_Init+0x21c>)
 800057e:	4618      	mov	r0, r3
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2254      	movs	r2, #84	; 0x54
 8000586:	4619      	mov	r1, r3
 8000588:	f003 ff32 	bl	80043f0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <CS43_Init+0x220>)
 800058e:	2201      	movs	r2, #1
 8000590:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000592:	4976      	ldr	r1, [pc, #472]	; (800076c <CS43_Init+0x220>)
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff ff99 	bl	80004cc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800059a:	4b74      	ldr	r3, [pc, #464]	; (800076c <CS43_Init+0x220>)
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <CS43_Init+0x220>)
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b70      	ldr	r3, [pc, #448]	; (800076c <CS43_Init+0x220>)
 80005ac:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005ae:	4b6f      	ldr	r3, [pc, #444]	; (800076c <CS43_Init+0x220>)
 80005b0:	785b      	ldrb	r3, [r3, #1]
 80005b2:	f043 030c 	orr.w	r3, r3, #12
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b6c      	ldr	r3, [pc, #432]	; (800076c <CS43_Init+0x220>)
 80005ba:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005bc:	4b6b      	ldr	r3, [pc, #428]	; (800076c <CS43_Init+0x220>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	f043 0303 	orr.w	r3, r3, #3
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b69      	ldr	r3, [pc, #420]	; (800076c <CS43_Init+0x220>)
 80005c8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ca:	4969      	ldr	r1, [pc, #420]	; (8000770 <CS43_Init+0x224>)
 80005cc:	2004      	movs	r0, #4
 80005ce:	f7ff ff7d 	bl	80004cc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005d2:	4b66      	ldr	r3, [pc, #408]	; (800076c <CS43_Init+0x220>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005d8:	4965      	ldr	r1, [pc, #404]	; (8000770 <CS43_Init+0x224>)
 80005da:	2005      	movs	r0, #5
 80005dc:	f7ff ff76 	bl	80004cc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005e0:	4962      	ldr	r1, [pc, #392]	; (800076c <CS43_Init+0x220>)
 80005e2:	2006      	movs	r0, #6
 80005e4:	f7ff ff90 	bl	8000508 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e8:	4b60      	ldr	r3, [pc, #384]	; (800076c <CS43_Init+0x220>)
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <CS43_Init+0x220>)
 80005f4:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005f6:	4b5d      	ldr	r3, [pc, #372]	; (800076c <CS43_Init+0x220>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b5a      	ldr	r3, [pc, #360]	; (800076c <CS43_Init+0x220>)
 8000602:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000604:	4b59      	ldr	r3, [pc, #356]	; (800076c <CS43_Init+0x220>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b57      	ldr	r3, [pc, #348]	; (800076c <CS43_Init+0x220>)
 8000610:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <CS43_Init+0x220>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	f023 0310 	bic.w	r3, r3, #16
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <CS43_Init+0x220>)
 800061e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000620:	4b52      	ldr	r3, [pc, #328]	; (800076c <CS43_Init+0x220>)
 8000622:	785b      	ldrb	r3, [r3, #1]
 8000624:	f023 0304 	bic.w	r3, r3, #4
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <CS43_Init+0x220>)
 800062c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <CS43_Init+0x220>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b4c      	ldr	r3, [pc, #304]	; (800076c <CS43_Init+0x220>)
 800063a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <CS43_Init+0x220>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	f043 0303 	orr.w	r3, r3, #3
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <CS43_Init+0x220>)
 8000648:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800064a:	4949      	ldr	r1, [pc, #292]	; (8000770 <CS43_Init+0x224>)
 800064c:	2006      	movs	r0, #6
 800064e:	f7ff ff3d 	bl	80004cc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000652:	4947      	ldr	r1, [pc, #284]	; (8000770 <CS43_Init+0x224>)
 8000654:	2008      	movs	r0, #8
 8000656:	f7ff ff57 	bl	8000508 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <CS43_Init+0x220>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	f023 030f 	bic.w	r3, r3, #15
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b41      	ldr	r3, [pc, #260]	; (800076c <CS43_Init+0x220>)
 8000666:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000668:	4b40      	ldr	r3, [pc, #256]	; (800076c <CS43_Init+0x220>)
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b3e      	ldr	r3, [pc, #248]	; (800076c <CS43_Init+0x220>)
 8000674:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000676:	493e      	ldr	r1, [pc, #248]	; (8000770 <CS43_Init+0x224>)
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff27 	bl	80004cc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800067e:	493c      	ldr	r1, [pc, #240]	; (8000770 <CS43_Init+0x224>)
 8000680:	2009      	movs	r0, #9
 8000682:	f7ff ff41 	bl	8000508 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000686:	4b39      	ldr	r3, [pc, #228]	; (800076c <CS43_Init+0x220>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	f023 030f 	bic.w	r3, r3, #15
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <CS43_Init+0x220>)
 8000692:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000694:	4b35      	ldr	r3, [pc, #212]	; (800076c <CS43_Init+0x220>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <CS43_Init+0x220>)
 80006a0:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80006a2:	4933      	ldr	r1, [pc, #204]	; (8000770 <CS43_Init+0x224>)
 80006a4:	2009      	movs	r0, #9
 80006a6:	f7ff ff11 	bl	80004cc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006aa:	4931      	ldr	r1, [pc, #196]	; (8000770 <CS43_Init+0x224>)
 80006ac:	200e      	movs	r0, #14
 80006ae:	f7ff ff2b 	bl	8000508 <read_register>
	if(outputMode == MODE_ANALOG)
 80006b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d123      	bne.n	8000702 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <CS43_Init+0x220>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <CS43_Init+0x220>)
 80006c6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <CS43_Init+0x220>)
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <CS43_Init+0x220>)
 80006d4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <CS43_Init+0x220>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	f023 0320 	bic.w	r3, r3, #32
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <CS43_Init+0x220>)
 80006e2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <CS43_Init+0x220>)
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	f023 0310 	bic.w	r3, r3, #16
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <CS43_Init+0x220>)
 80006f0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <CS43_Init+0x220>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	f023 0308 	bic.w	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <CS43_Init+0x220>)
 80006fe:	705a      	strb	r2, [r3, #1]
 8000700:	e006      	b.n	8000710 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000702:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <CS43_Init+0x220>)
 800070c:	2202      	movs	r2, #2
 800070e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <CS43_Init+0x224>)
 8000712:	200e      	movs	r0, #14
 8000714:	f7ff feda 	bl	80004cc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <CS43_Init+0x224>)
 800071a:	200f      	movs	r0, #15
 800071c:	f7ff fef4 	bl	8000508 <read_register>
	iData[1] = 0x00;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <CS43_Init+0x220>)
 8000722:	2200      	movs	r2, #0
 8000724:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000726:	4912      	ldr	r1, [pc, #72]	; (8000770 <CS43_Init+0x224>)
 8000728:	200f      	movs	r0, #15
 800072a:	f7ff fecf 	bl	80004cc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <CS43_Init+0x220>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000734:	490e      	ldr	r1, [pc, #56]	; (8000770 <CS43_Init+0x224>)
 8000736:	2014      	movs	r0, #20
 8000738:	f7ff fec8 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <CS43_Init+0x224>)
 800073e:	2015      	movs	r0, #21
 8000740:	f7ff fec4 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <CS43_Init+0x224>)
 8000746:	201a      	movs	r0, #26
 8000748:	f7ff fec0 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <CS43_Init+0x224>)
 800074e:	201b      	movs	r0, #27
 8000750:	f7ff febc 	bl	80004cc <write_register>
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	200000d4 	.word	0x200000d4
 8000764:	40020c00 	.word	0x40020c00
 8000768:	2000002c 	.word	0x2000002c
 800076c:	20000028 	.word	0x20000028
 8000770:	20000029 	.word	0x20000029

08000774 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d837      	bhi.n	80007f4 <CS43_Enable_RightLeft+0x80>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <CS43_Enable_RightLeft+0x18>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	0800079d 	.word	0x0800079d
 8000790:	080007b3 	.word	0x080007b3
 8000794:	080007c9 	.word	0x080007c9
 8000798:	080007df 	.word	0x080007df
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 800079e:	22c0      	movs	r2, #192	; 0xc0
 80007a0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	705a      	strb	r2, [r3, #1]
			break;
 80007b0:	e021      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	705a      	strb	r2, [r3, #1]
			break;
 80007c6:	e016      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007ca:	22c0      	movs	r2, #192	; 0xc0
 80007cc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007da:	705a      	strb	r2, [r3, #1]
			break;
 80007dc:	e00b      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007f0:	705a      	strb	r2, [r3, #1]
			break;
 80007f2:	e000      	b.n	80007f6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007f4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	f043 030c 	orr.w	r3, r3, #12
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000802:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	f043 0303 	orr.w	r3, r3, #3
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <CS43_Enable_RightLeft+0xb0>)
 8000810:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <CS43_Enable_RightLeft+0xb4>)
 8000814:	2004      	movs	r0, #4
 8000816:	f7ff fe59 	bl	80004cc <write_register>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000028 	.word	0x20000028
 8000828:	20000029 	.word	0x20000029

0800082c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3b32      	subs	r3, #50	; 0x32
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <CS43_SetVolume+0x78>)
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000850:	4915      	ldr	r1, [pc, #84]	; (80008a8 <CS43_SetVolume+0x7c>)
 8000852:	2014      	movs	r0, #20
 8000854:	f7ff fe3a 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000858:	4913      	ldr	r1, [pc, #76]	; (80008a8 <CS43_SetVolume+0x7c>)
 800085a:	2015      	movs	r0, #21
 800085c:	f7ff fe36 	bl	80004cc <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b64      	cmp	r3, #100	; 0x64
 8000864:	d80e      	bhi.n	8000884 <CS43_SetVolume+0x58>
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <CS43_SetVolume+0x80>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1152      	asrs	r2, r2, #5
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3b18      	subs	r3, #24
 8000880:	b2db      	uxtb	r3, r3
 8000882:	e000      	b.n	8000886 <CS43_SetVolume+0x5a>
 8000884:	2318      	movs	r3, #24
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <CS43_SetVolume+0x78>)
 8000888:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800088a:	4907      	ldr	r1, [pc, #28]	; (80008a8 <CS43_SetVolume+0x7c>)
 800088c:	2020      	movs	r0, #32
 800088e:	f7ff fe1d 	bl	80004cc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000892:	4905      	ldr	r1, [pc, #20]	; (80008a8 <CS43_SetVolume+0x7c>)
 8000894:	2021      	movs	r0, #33	; 0x21
 8000896:	f7ff fe19 	bl	80004cc <write_register>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	20000029 	.word	0x20000029
 80008ac:	51eb851f 	.word	0x51eb851f

080008b0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <CS43_Start+0x7c>)
 80008b6:	2299      	movs	r2, #153	; 0x99
 80008b8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ba:	491d      	ldr	r1, [pc, #116]	; (8000930 <CS43_Start+0x80>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe05 	bl	80004cc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <CS43_Start+0x7c>)
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008c8:	4919      	ldr	r1, [pc, #100]	; (8000930 <CS43_Start+0x80>)
 80008ca:	2047      	movs	r0, #71	; 0x47
 80008cc:	f7ff fdfe 	bl	80004cc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d0:	4917      	ldr	r1, [pc, #92]	; (8000930 <CS43_Start+0x80>)
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f7ff fe18 	bl	8000508 <read_register>
	iData[1] |= 0x80;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <CS43_Start+0x7c>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <CS43_Start+0x7c>)
 80008e4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008e6:	4912      	ldr	r1, [pc, #72]	; (8000930 <CS43_Start+0x80>)
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f7ff fdef 	bl	80004cc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ee:	4910      	ldr	r1, [pc, #64]	; (8000930 <CS43_Start+0x80>)
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fe09 	bl	8000508 <read_register>
	iData[1] &= ~(0x80);
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <CS43_Start+0x7c>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <CS43_Start+0x7c>)
 8000902:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000904:	490a      	ldr	r1, [pc, #40]	; (8000930 <CS43_Start+0x80>)
 8000906:	2032      	movs	r0, #50	; 0x32
 8000908:	f7ff fde0 	bl	80004cc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <CS43_Start+0x7c>)
 800090e:	2200      	movs	r2, #0
 8000910:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000912:	4907      	ldr	r1, [pc, #28]	; (8000930 <CS43_Start+0x80>)
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fdd9 	bl	80004cc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <CS43_Start+0x7c>)
 800091c:	229e      	movs	r2, #158	; 0x9e
 800091e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000920:	4903      	ldr	r1, [pc, #12]	; (8000930 <CS43_Start+0x80>)
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fdd2 	bl	80004cc <write_register>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000028 	.word	0x20000028
 8000930:	20000029 	.word	0x20000029

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b095      	sub	sp, #84	; 0x54
 8000938:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <main+0xf8>)
 800093c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8000940:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8000942:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <main+0xfc>)
 8000944:	2210      	movs	r2, #16
 8000946:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 fb84 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f87e 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f000 f962 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000954:	f000 f940 	bl	8000bd8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000958:	f000 f8e2 	bl	8000b20 <MX_I2C1_Init>
  MX_I2S3_Init();
 800095c:	f000 f90e 	bl	8000b7c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000960:	4c34      	ldr	r4, [pc, #208]	; (8000a34 <main+0x100>)
 8000962:	2300      	movs	r3, #0
 8000964:	9311      	str	r3, [sp, #68]	; 0x44
 8000966:	4668      	mov	r0, sp
 8000968:	f104 0310 	add.w	r3, r4, #16
 800096c:	2244      	movs	r2, #68	; 0x44
 800096e:	4619      	mov	r1, r3
 8000970:	f003 fd3e 	bl	80043f0 <memcpy>
 8000974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000978:	f7ff fde8 	bl	800054c <CS43_Init>
	CS43_SetVolume(40); //0 - 100,, 40
 800097c:	2028      	movs	r0, #40	; 0x28
 800097e:	f7ff ff55 	bl	800082c <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000982:	2003      	movs	r0, #3
 8000984:	f7ff fef6 	bl	8000774 <CS43_Enable_RightLeft>
	CS43_Start();
 8000988:	f7ff ff92 	bl	80008b0 <CS43_Start>

	//Build Sine wave
	for(uint16_t i=0; i<sample_N; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	80fb      	strh	r3, [r7, #6]
 8000990:	e03d      	b.n	8000a0e <main+0xda>
	{
		mySinVal = sinf(i*2*PI*sample_dt);
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a38 <main+0x104>
 80009a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <main+0xf8>)
 80009a8:	edd3 7a00 	vldr	s15, [r3]
 80009ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b0:	eeb0 0a67 	vmov.f32	s0, s15
 80009b4:	f003 fd32 	bl	800441c <sinf>
 80009b8:	eef0 7a40 	vmov.f32	s15, s0
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x108>)
 80009be:	edc3 7a00 	vstr	s15, [r3]
		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <main+0x108>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a40 <main+0x10c>
 80009cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d8:	ee17 2a90 	vmov	r2, s15
 80009dc:	b211      	sxth	r1, r2
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <main+0x110>)
 80009e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <main+0x108>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a40 <main+0x10c>
 80009ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009fc:	ee17 2a90 	vmov	r2, s15
 8000a00:	b211      	sxth	r1, r2
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <main+0x110>)
 8000a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i=0; i<sample_N; i++)
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <main+0xfc>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3bc      	bcc.n	8000992 <main+0x5e>
	}

	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <main+0xfc>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <main+0x110>)
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <main+0x114>)
 8000a26:	f002 fa95 	bl	8002f54 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0xf6>
 8000a2c:	20000180 	.word	0x20000180
 8000a30:	20000184 	.word	0x20000184
 8000a34:	20000080 	.word	0x20000080
 8000a38:	40490fd0 	.word	0x40490fd0
 8000a3c:	2000017c 	.word	0x2000017c
 8000a40:	45fa0000 	.word	0x45fa0000
 8000a44:	20000188 	.word	0x20000188
 8000a48:	200000d4 	.word	0x200000d4

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fcd6 	bl	800440c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <SystemClock_Config+0xcc>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <SystemClock_Config+0xd0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <SystemClock_Config+0xd0>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <SystemClock_Config+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000abc:	2308      	movs	r3, #8
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ac0:	2332      	movs	r3, #50	; 0x32
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fea5 	bl	8003820 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000adc:	f000 f918 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 f906 	bl	8003d10 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b0a:	f000 f901 	bl	8000d10 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	; 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <MX_I2C1_Init+0x54>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x58>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_I2C1_Init+0x50>)
 8000b5e:	f001 f923 	bl	8001da8 <HAL_I2C_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b68:	f000 f8d2 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000080 	.word	0x20000080
 8000b74:	40005400 	.word	0x40005400
 8000b78:	000186a0 	.word	0x000186a0

08000b7c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <MX_I2S3_Init+0x58>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000ba4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_I2S3_Init+0x54>)
 8000bbe:	f002 f889 	bl	8002cd4 <HAL_I2S_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bc8:	f000 f8a2 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000d4 	.word	0x200000d4
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_DMA_Init+0x3c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <MX_DMA_Init+0x3c>)
 8000be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_DMA_Init+0x3c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2010      	movs	r0, #16
 8000c00:	f000 fb75 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c04:	2010      	movs	r0, #16
 8000c06:	f000 fb8e 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_GPIO_Init+0xf0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f24d 0110 	movw	r1, #53264	; 0xd010
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cc2:	f001 f857 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 PD15 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 8000cc6:	f24d 0310 	movw	r3, #53264	; 0xd010
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480b      	ldr	r0, [pc, #44]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000ce0:	f000 feac 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0xf4>)
 8000cfc:	f000 fe9e 	bl	8001a3c <HAL_GPIO_Init>

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x4>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d56:	2007      	movs	r0, #7
 8000d58:	f000 fabe 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_I2C_MspInit+0x84>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12c      	bne.n	8000de4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000da6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dac:	2312      	movs	r3, #18
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db8:	2304      	movs	r3, #4
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <HAL_I2C_MspInit+0x8c>)
 8000dc4:	f000 fe3a 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_I2C_MspInit+0x88>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400

08000df8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_I2S_MspInit+0x164>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	f040 8094 	bne.w	8000f52 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f974 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000e46:	f7ff ff63 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a43      	ldr	r2, [pc, #268]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a3c      	ldr	r2, [pc, #240]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a35      	ldr	r2, [pc, #212]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <HAL_I2S_MspInit+0x168>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482a      	ldr	r0, [pc, #168]	; (8000f64 <HAL_I2S_MspInit+0x16c>)
 8000eba:	f000 fdbf 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000ebe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <HAL_I2S_MspInit+0x170>)
 8000edc:	f000 fdae 	bl	8001a3c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_I2S_MspInit+0x178>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f16:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f38:	f000 fa10 	bl	800135c <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000f42:	f7ff fee5 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_I2S_MspInit+0x174>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40003c00 	.word	0x40003c00
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	2000011c 	.word	0x2000011c
 8000f70:	40026088 	.word	0x40026088

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f89a 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fce:	f000 facb 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000011c 	.word	0x2000011c

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 f9bb 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fc7f 	bl	8000934 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	080052ec 	.word	0x080052ec
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	20000254 	.word	0x20000254

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f92b 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe46 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f943 	bl	8001342 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f90b 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000250 	.word	0x20000250

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000250 	.word	0x20000250

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff feda 	bl	8001120 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e099      	b.n	80014ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001398:	e00f      	b.n	80013ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139a:	f7ff fec1 	bl	8001120 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d908      	bls.n	80013ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e078      	b.n	80014ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e8      	bne.n	800139a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_DMA_Init+0x158>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4313      	orrs	r3, r2
 800140a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	2b04      	cmp	r3, #4
 8001412:	d107      	bne.n	8001424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4313      	orrs	r3, r2
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f023 0307 	bic.w	r3, r3, #7
 800143a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2b04      	cmp	r3, #4
 800144c:	d117      	bne.n	800147e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00e      	beq.n	800147e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fa6f 	bl	8001944 <DMA_CheckFifoParam>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800147a:	2301      	movs	r3, #1
 800147c:	e016      	b.n	80014ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa26 	bl	80018d8 <DMA_CalcBaseAndBitshift>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	f010803f 	.word	0xf010803f

080014b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_DMA_Start_IT+0x26>
 80014da:	2302      	movs	r3, #2
 80014dc:	e040      	b.n	8001560 <HAL_DMA_Start_IT+0xa8>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d12f      	bne.n	8001552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f9b8 	bl	800187c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	223f      	movs	r2, #63	; 0x3f
 8001512:	409a      	lsls	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0216 	orr.w	r2, r2, #22
 8001526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0208 	orr.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e005      	b.n	800155e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800155a:	2302      	movs	r3, #2
 800155c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001574:	4b8e      	ldr	r3, [pc, #568]	; (80017b0 <HAL_DMA_IRQHandler+0x248>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a8e      	ldr	r2, [pc, #568]	; (80017b4 <HAL_DMA_IRQHandler+0x24c>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0a9b      	lsrs	r3, r3, #10
 8001580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2208      	movs	r2, #8
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2208      	movs	r2, #8
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2201      	movs	r2, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2204      	movs	r2, #4
 800162e:	409a      	lsls	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	2210      	movs	r2, #16
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d043      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03c      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2210      	movs	r2, #16
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d018      	beq.n	80016aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d024      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
 8001696:	e01f      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e016      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0208 	bic.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	2220      	movs	r2, #32
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 808f 	beq.w	8001808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8087 	beq.w	8001808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2220      	movs	r2, #32
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b05      	cmp	r3, #5
 8001710:	d136      	bne.n	8001780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0216 	bic.w	r2, r2, #22
 8001720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_DMA_IRQHandler+0x1da>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	223f      	movs	r2, #63	; 0x3f
 8001758:	409a      	lsls	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d07e      	beq.n	8001874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
        }
        return;
 800177e:	e079      	b.n	8001874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01d      	beq.n	80017ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d031      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
 80017ac:	e02c      	b.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d023      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e01e      	b.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10f      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0210 	bic.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	2b00      	cmp	r3, #0
 800180e:	d032      	beq.n	8001876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d022      	beq.n	8001862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2205      	movs	r2, #5
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3301      	adds	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d307      	bcc.n	8001850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f2      	bne.n	8001834 <HAL_DMA_IRQHandler+0x2cc>
 800184e:	e000      	b.n	8001852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
 8001872:	e000      	b.n	8001876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001874:	bf00      	nop
    }
  }
}
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d108      	bne.n	80018bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ba:	e007      	b.n	80018cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b10      	subs	r3, #16
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <DMA_CalcBaseAndBitshift+0x64>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <DMA_CalcBaseAndBitshift+0x68>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d909      	bls.n	800191a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	1d1a      	adds	r2, r3, #4
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58
 8001918:	e007      	b.n	800192a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	aaaaaaab 	.word	0xaaaaaaab
 8001940:	08004f04 	.word	0x08004f04

08001944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d11f      	bne.n	800199e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d856      	bhi.n	8001a12 <DMA_CheckFifoParam+0xce>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <DMA_CheckFifoParam+0x28>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	0800197d 	.word	0x0800197d
 8001970:	0800198f 	.word	0x0800198f
 8001974:	0800197d 	.word	0x0800197d
 8001978:	08001a13 	.word	0x08001a13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d046      	beq.n	8001a16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800198c:	e043      	b.n	8001a16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001996:	d140      	bne.n	8001a1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199c:	e03d      	b.n	8001a1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a6:	d121      	bne.n	80019ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d837      	bhi.n	8001a1e <DMA_CheckFifoParam+0xda>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <DMA_CheckFifoParam+0x70>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cb 	.word	0x080019cb
 80019bc:	080019c5 	.word	0x080019c5
 80019c0:	080019dd 	.word	0x080019dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      break;
 80019c8:	e030      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d025      	beq.n	8001a22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019da:	e022      	b.n	8001a22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e4:	d11f      	bne.n	8001a26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ea:	e01c      	b.n	8001a26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d903      	bls.n	80019fa <DMA_CheckFifoParam+0xb6>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d003      	beq.n	8001a00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f8:	e018      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      break;
 80019fe:	e015      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a10:	e00b      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a12:	bf00      	nop
 8001a14:	e00a      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e008      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e006      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e004      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e16b      	b.n	8001d30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 815a 	bne.w	8001d2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80b4 	beq.w	8001d2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b60      	ldr	r3, [pc, #384]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_GPIO_Init+0x30c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x314>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02b      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x318>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d025      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_GPIO_Init+0x31c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01f      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	; (8001d5c <HAL_GPIO_Init+0x320>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x20a>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c46:	2308      	movs	r3, #8
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x228>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x310>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae90 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e12b      	b.n	8002012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ffca 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	; 0x24
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e0c:	f002 f978 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8001e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a81      	ldr	r2, [pc, #516]	; (800201c <HAL_I2C_Init+0x274>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d807      	bhi.n	8001e2c <HAL_I2C_Init+0x84>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a80      	ldr	r2, [pc, #512]	; (8002020 <HAL_I2C_Init+0x278>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e006      	b.n	8001e3a <HAL_I2C_Init+0x92>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a7d      	ldr	r2, [pc, #500]	; (8002024 <HAL_I2C_Init+0x27c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0e7      	b.n	8002012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a78      	ldr	r2, [pc, #480]	; (8002028 <HAL_I2C_Init+0x280>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9b      	lsrs	r3, r3, #18
 8001e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_I2C_Init+0x274>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d802      	bhi.n	8001e7c <HAL_I2C_Init+0xd4>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	e009      	b.n	8001e90 <HAL_I2C_Init+0xe8>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a69      	ldr	r2, [pc, #420]	; (800202c <HAL_I2C_Init+0x284>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	3301      	adds	r3, #1
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	495c      	ldr	r1, [pc, #368]	; (800201c <HAL_I2C_Init+0x274>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d819      	bhi.n	8001ee4 <HAL_I2C_Init+0x13c>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_I2C_Init+0x138>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e59      	subs	r1, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	e051      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e04f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <HAL_I2C_Init+0x168>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e012      	b.n	8001f36 <HAL_I2C_Init+0x18e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e58      	subs	r0, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	0099      	lsls	r1, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Init+0x196>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e022      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10e      	bne.n	8001f64 <HAL_I2C_Init+0x1bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e58      	subs	r0, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	440b      	add	r3, r1
 8001f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	e00f      	b.n	8001f84 <HAL_I2C_Init+0x1dc>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	6809      	ldr	r1, [r1, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6911      	ldr	r1, [r2, #16]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	000186a0 	.word	0x000186a0
 8002020:	001e847f 	.word	0x001e847f
 8002024:	003d08ff 	.word	0x003d08ff
 8002028:	431bde83 	.word	0x431bde83
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	461a      	mov	r2, r3
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
 8002040:	4613      	mov	r3, r2
 8002042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff f86c 	bl	8001120 <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b20      	cmp	r3, #32
 8002054:	f040 80e0 	bne.w	8002218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2319      	movs	r3, #25
 800205e:	2201      	movs	r2, #1
 8002060:	4970      	ldr	r1, [pc, #448]	; (8002224 <HAL_I2C_Master_Transmit+0x1f4>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fc58 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	e0d3      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2C_Master_Transmit+0x50>
 800207c:	2302      	movs	r3, #2
 800207e:	e0cc      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d007      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	; 0x21
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2210      	movs	r2, #16
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	893a      	ldrh	r2, [r7, #8]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	6a3a      	ldr	r2, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fac2 	bl	8002678 <I2C_MasterRequestWrite>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08d      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002114:	e066      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	6a39      	ldr	r1, [r7, #32]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fcd2 	bl	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b04      	cmp	r3, #4
 800212c:	d107      	bne.n	800213e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06b      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d11b      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6a39      	ldr	r1, [r7, #32]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fcc2 	bl	8002b46 <I2C_WaitOnBTFFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d107      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e01a      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d194      	bne.n	8002116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002218:	2302      	movs	r3, #2
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	00100002 	.word	0x00100002
 8002228:	ffff0000 	.word	0xffff0000

0800222c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
 800223c:	4613      	mov	r3, r2
 800223e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7fe ff6e 	bl	8001120 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	f040 820b 	bne.w	800266a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	497c      	ldr	r1, [pc, #496]	; (8002450 <HAL_I2C_Master_Receive+0x224>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fb5a 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e1fe      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2C_Master_Receive+0x50>
 8002278:	2302      	movs	r3, #2
 800227a:	e1f7      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d007      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2222      	movs	r2, #34	; 0x22
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a5c      	ldr	r2, [pc, #368]	; (8002454 <HAL_I2C_Master_Receive+0x228>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fa46 	bl	800277c <I2C_MasterRequestRead>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1b8      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d113      	bne.n	800232a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e18c      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	2b01      	cmp	r3, #1
 8002330:	d11b      	bne.n	800236a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e16c      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	2b02      	cmp	r3, #2
 8002370:	d11b      	bne.n	80023aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002380:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	e14c      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023d0:	e138      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	f200 80f1 	bhi.w	80025be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d123      	bne.n	800242c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fbed 	bl	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e139      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242a:	e10b      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b02      	cmp	r3, #2
 8002432:	d14e      	bne.n	80024d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	2200      	movs	r2, #0
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_I2C_Master_Receive+0x22c>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa6a 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e10e      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d0:	e0b8      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	2200      	movs	r2, #0
 80024da:	4966      	ldr	r1, [pc, #408]	; (8002674 <HAL_I2C_Master_Receive+0x448>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fa1b 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0bf      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	2200      	movs	r2, #0
 8002536:	494f      	ldr	r1, [pc, #316]	; (8002674 <HAL_I2C_Master_Receive+0x448>)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f9ed 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e091      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e042      	b.n	8002644 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fb00 	bl	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d118      	bne.n	8002644 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aec2 	bne.w	80023d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010004 	.word	0x00010004

08002678 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d006      	beq.n	80026a2 <I2C_MasterRequestWrite+0x2a>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <I2C_MasterRequestWrite+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00b      	b.n	80026cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d107      	bne.n	80026cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f91d 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	d103      	bne.n	80026fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e035      	b.n	800276c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002708:	d108      	bne.n	800271c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800270a:	897b      	ldrh	r3, [r7, #10]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	e01b      	b.n	8002754 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800271c:	897b      	ldrh	r3, [r7, #10]
 800271e:	11db      	asrs	r3, r3, #7
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0306 	and.w	r3, r3, #6
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f063 030f 	orn	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <I2C_MasterRequestWrite+0xfc>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f943 	bl	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e010      	b.n	800276c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <I2C_MasterRequestWrite+0x100>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f933 	bl	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00010008 	.word	0x00010008
 8002778:	00010002 	.word	0x00010002

0800277c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	460b      	mov	r3, r1
 800278a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d006      	beq.n	80027b6 <I2C_MasterRequestRead+0x3a>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d003      	beq.n	80027b6 <I2C_MasterRequestRead+0x3a>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b4:	d108      	bne.n	80027c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e00b      	b.n	80027e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b11      	cmp	r3, #17
 80027ce:	d107      	bne.n	80027e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f893 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002806:	d103      	bne.n	8002810 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e079      	b.n	8002908 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800281c:	d108      	bne.n	8002830 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	e05f      	b.n	80028f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	11db      	asrs	r3, r3, #7
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 0306 	and.w	r3, r3, #6
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f063 030f 	orn	r3, r3, #15
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4930      	ldr	r1, [pc, #192]	; (8002910 <I2C_MasterRequestRead+0x194>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f8b9 	bl	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e054      	b.n	8002908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4929      	ldr	r1, [pc, #164]	; (8002914 <I2C_MasterRequestRead+0x198>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f8a9 	bl	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e044      	b.n	8002908 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f831 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ca:	d103      	bne.n	80028d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e017      	b.n	8002908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028d8:	897b      	ldrh	r3, [r7, #10]
 80028da:	11db      	asrs	r3, r3, #7
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f003 0306 	and.w	r3, r3, #6
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f063 030e 	orn	r3, r3, #14
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <I2C_MasterRequestRead+0x198>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f865 	bl	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	00010008 	.word	0x00010008
 8002914:	00010002 	.word	0x00010002

08002918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002928:	e025      	b.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d021      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fe fbf5 	bl	8001120 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e023      	b.n	80029be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10d      	bne.n	800299c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	e00c      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0b6      	beq.n	800292a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d4:	e051      	b.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e4:	d123      	bne.n	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e046      	b.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d021      	beq.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe fb73 	bl	8001120 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e020      	b.n	8002abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10c      	bne.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e00b      	b.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d18d      	bne.n	80029d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad0:	e02d      	b.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8ce 	bl	8002c74 <I2C_IsAcknowledgeFailed>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e02d      	b.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d021      	beq.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7fe fb19 	bl	8001120 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e007      	b.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d1ca      	bne.n	8002ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b52:	e02d      	b.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f88d 	bl	8002c74 <I2C_IsAcknowledgeFailed>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e02d      	b.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d021      	beq.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6c:	f7fe fad8 	bl	8001120 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d302      	bcc.n	8002b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e007      	b.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d1ca      	bne.n	8002b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd4:	e042      	b.n	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d119      	bne.n	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0210 	mvn.w	r2, #16
 8002bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e029      	b.n	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c18:	f7fe fa82 	bl	8001120 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e007      	b.n	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d1b5      	bne.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d11b      	bne.n	8002cc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e128      	b.n	8002f38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a90      	ldr	r2, [pc, #576]	; (8002f40 <HAL_I2S_Init+0x26c>)
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe f879 	bl	8000df8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d1c:	f023 030f 	bic.w	r3, r3, #15
 8002d20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2202      	movs	r2, #2
 8002d28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d060      	beq.n	8002df4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e001      	b.n	8002d44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d802      	bhi.n	8002d52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f001 faca 	bl	80042ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002d58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d62:	d125      	bne.n	8002db0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	3305      	adds	r3, #5
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e01f      	b.n	8002dce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	3305      	adds	r3, #5
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e00e      	b.n	8002dce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	3305      	adds	r3, #5
 8002dcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4a5c      	ldr	r2, [pc, #368]	; (8002f44 <HAL_I2S_Init+0x270>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d902      	bls.n	8002e08 <HAL_I2S_Init+0x134>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d907      	bls.n	8002e18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e08f      	b.n	8002f38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	ea42 0103 	orr.w	r1, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e36:	f023 030f 	bic.w	r3, r3, #15
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6851      	ldr	r1, [r2, #4]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68d2      	ldr	r2, [r2, #12]
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6992      	ldr	r2, [r2, #24]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d161      	bne.n	8002f28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_I2S_Init+0x274>)
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a37      	ldr	r2, [pc, #220]	; (8002f4c <HAL_I2S_Init+0x278>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_I2S_Init+0x1a4>
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_I2S_Init+0x27c>)
 8002e76:	e001      	b.n	8002e7c <HAL_I2S_Init+0x1a8>
 8002e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4932      	ldr	r1, [pc, #200]	; (8002f4c <HAL_I2S_Init+0x278>)
 8002e84:	428a      	cmp	r2, r1
 8002e86:	d101      	bne.n	8002e8c <HAL_I2S_Init+0x1b8>
 8002e88:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <HAL_I2S_Init+0x27c>)
 8002e8a:	e001      	b.n	8002e90 <HAL_I2S_Init+0x1bc>
 8002e8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e94:	f023 030f 	bic.w	r3, r3, #15
 8002e98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_I2S_Init+0x278>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2S_Init+0x1d4>
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_I2S_Init+0x27c>)
 8002ea6:	e001      	b.n	8002eac <HAL_I2S_Init+0x1d8>
 8002ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eac:	2202      	movs	r2, #2
 8002eae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <HAL_I2S_Init+0x278>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2S_Init+0x1ea>
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_I2S_Init+0x27c>)
 8002ebc:	e001      	b.n	8002ec2 <HAL_I2S_Init+0x1ee>
 8002ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d003      	beq.n	8002ed8 <HAL_I2S_Init+0x204>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e001      	b.n	8002ee4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <HAL_I2S_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2S_Init+0x24c>
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_I2S_Init+0x27c>)
 8002f1e:	e001      	b.n	8002f24 <HAL_I2S_Init+0x250>
 8002f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f24:	897a      	ldrh	r2, [r7, #10]
 8002f26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	08003259 	.word	0x08003259
 8002f44:	cccccccd 	.word	0xcccccccd
 8002f48:	0800336d 	.word	0x0800336d
 8002f4c:	40003800 	.word	0x40003800
 8002f50:	40003400 	.word	0x40003400

08002f54 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_I2S_Transmit_DMA+0x1a>
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e08e      	b.n	8003090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_I2S_Transmit_DMA+0x2e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e086      	b.n	8003090 <HAL_I2S_Transmit_DMA+0x13c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e076      	b.n	8003090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d002      	beq.n	8002fce <HAL_I2S_Transmit_DMA+0x7a>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe2:	e005      	b.n	8002ff0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	88fa      	ldrh	r2, [r7, #6]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	4a28      	ldr	r2, [pc, #160]	; (8003098 <HAL_I2S_Transmit_DMA+0x144>)
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_I2S_Transmit_DMA+0x148>)
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003010:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003018:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003020:	f7fe fa4a 	bl	80014b8 <HAL_DMA_Start_IT>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00f      	beq.n	800304a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0208 	orr.w	r2, r3, #8
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003066:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0202 	orr.w	r2, r2, #2
 8003084:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	08003137 	.word	0x08003137
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003153 	.word	0x08003153

080030a4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff ffc5 	bl	80030b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff ffad 	bl	80030a4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0203 	bic.w	r2, r2, #3
 800316e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0208 	orr.w	r2, r3, #8
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff ffa5 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10e      	bne.n	80031f2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff63 	bl	80030b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10e      	bne.n	8003250 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003240:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ff3e 	bl	80030cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b04      	cmp	r3, #4
 8003272:	d13a      	bne.n	80032ea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d109      	bne.n	8003292 <I2S_IRQHandler+0x3a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d102      	bne.n	8003292 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ffb4 	bl	80031fa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d126      	bne.n	80032ea <I2S_IRQHandler+0x92>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d11f      	bne.n	80032ea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0202 	orr.w	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fefb 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d136      	bne.n	8003364 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d109      	bne.n	8003314 <I2S_IRQHandler+0xbc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d102      	bne.n	8003314 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff45 	bl	800319e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d122      	bne.n	8003364 <I2S_IRQHandler+0x10c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d11b      	bne.n	8003364 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800333a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff febe 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a92      	ldr	r2, [pc, #584]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003386:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003388:	e001      	b.n	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800338a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a8b      	ldr	r2, [pc, #556]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033a4:	4b8a      	ldr	r3, [pc, #552]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033a6:	e001      	b.n	80033ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b8:	d004      	beq.n	80033c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8099 	bne.w	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d107      	bne.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f925 	bl	8003628 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f9c8 	bl	8003788 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d13a      	bne.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b00      	cmp	r3, #0
 800340a:	d035      	beq.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003416:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003418:	e001      	b.n	800341e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800341a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4969      	ldr	r1, [pc, #420]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003426:	428b      	cmp	r3, r1
 8003428:	d101      	bne.n	800342e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800342a:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800342c:	e001      	b.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800342e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003432:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003436:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003446:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fe34 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	f040 80c3 	bne.w	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80bd 	beq.w	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800349e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a49      	ldr	r2, [pc, #292]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4944      	ldr	r1, [pc, #272]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ba:	428b      	cmp	r3, r1
 80034bc:	d101      	bne.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034be:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c0:	e001      	b.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fdf6 	bl	80030e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034f4:	e089      	b.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d107      	bne.n	8003510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8be 	bl	800368c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f8fd 	bl	8003724 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d12f      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02a      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800355a:	e001      	b.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4919      	ldr	r1, [pc, #100]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003568:	428b      	cmp	r3, r1
 800356a:	d101      	bne.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356e:	e001      	b.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003578:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0202 	orr.w	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fda6 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d136      	bne.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d031      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b4:	e001      	b.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4902      	ldr	r1, [pc, #8]	; (80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c2:	428b      	cmp	r3, r1
 80035c4:	d106      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035c6:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c8:	e006      	b.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035ca:	bf00      	nop
 80035cc:	40003800 	.word	0x40003800
 80035d0:	40003400 	.word	0x40003400
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fd6c 	bl	80030e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	e000      	b.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800360a:	bf00      	nop
}
 800360c:	bf00      	nop
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c99      	adds	r1, r3, #2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6251      	str	r1, [r2, #36]	; 0x24
 800363a:	881a      	ldrh	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003668:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffc9 	bl	8003614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c99      	adds	r1, r3, #2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6251      	str	r1, [r2, #36]	; 0x24
 800369e:	8819      	ldrh	r1, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <I2SEx_TxISR_I2SExt+0x90>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <I2SEx_TxISR_I2SExt+0x22>
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <I2SEx_TxISR_I2SExt+0x94>)
 80036ac:	e001      	b.n	80036b2 <I2SEx_TxISR_I2SExt+0x26>
 80036ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b2:	460a      	mov	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d121      	bne.n	8003712 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a12      	ldr	r2, [pc, #72]	; (800371c <I2SEx_TxISR_I2SExt+0x90>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <I2SEx_TxISR_I2SExt+0x50>
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <I2SEx_TxISR_I2SExt+0x94>)
 80036da:	e001      	b.n	80036e0 <I2SEx_TxISR_I2SExt+0x54>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	490d      	ldr	r1, [pc, #52]	; (800371c <I2SEx_TxISR_I2SExt+0x90>)
 80036e8:	428b      	cmp	r3, r1
 80036ea:	d101      	bne.n	80036f0 <I2SEx_TxISR_I2SExt+0x64>
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <I2SEx_TxISR_I2SExt+0x94>)
 80036ee:	e001      	b.n	80036f4 <I2SEx_TxISR_I2SExt+0x68>
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff81 	bl	8003614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40003800 	.word	0x40003800
 8003720:	40003400 	.word	0x40003400

08003724 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68d8      	ldr	r0, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	1c99      	adds	r1, r3, #2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800373c:	b282      	uxth	r2, r0
 800373e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003766:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff4a 	bl	8003614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <I2SEx_RxISR_I2SExt+0x90>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <I2SEx_RxISR_I2SExt+0x16>
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <I2SEx_RxISR_I2SExt+0x94>)
 800379c:	e001      	b.n	80037a2 <I2SEx_RxISR_I2SExt+0x1a>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	68d8      	ldr	r0, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	1c99      	adds	r1, r3, #2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037ae:	b282      	uxth	r2, r0
 80037b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d121      	bne.n	800380e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <I2SEx_RxISR_I2SExt+0x90>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <I2SEx_RxISR_I2SExt+0x50>
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <I2SEx_RxISR_I2SExt+0x94>)
 80037d6:	e001      	b.n	80037dc <I2SEx_RxISR_I2SExt+0x54>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	490d      	ldr	r1, [pc, #52]	; (8003818 <I2SEx_RxISR_I2SExt+0x90>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d101      	bne.n	80037ec <I2SEx_RxISR_I2SExt+0x64>
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <I2SEx_RxISR_I2SExt+0x94>)
 80037ea:	e001      	b.n	80037f0 <I2SEx_RxISR_I2SExt+0x68>
 80037ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff03 	bl	8003614 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40003800 	.word	0x40003800
 800381c:	40003400 	.word	0x40003400

08003820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e267      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383e:	4b88      	ldr	r3, [pc, #544]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b04      	cmp	r3, #4
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b85      	ldr	r3, [pc, #532]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d112      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003862:	d10b      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05b      	beq.n	8003928 <HAL_RCC_OscConfig+0x108>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d157      	bne.n	8003928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e242      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x74>
 8003886:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6f      	ldr	r2, [pc, #444]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6c      	ldr	r2, [pc, #432]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 80038b8:	4b69      	ldr	r3, [pc, #420]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a68      	ldr	r2, [pc, #416]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fd fc22 	bl	8001120 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fd fc1e 	bl	8001120 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e207      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xc0>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fc0e 	bl	8001120 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fc0a 	bl	8001120 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1f3      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0xe8>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1c7      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e03a      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd fbc3 	bl	8001120 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399e:	f7fd fbbf 	bl	8001120 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1a8      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4925      	ldr	r1, [pc, #148]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fba2 	bl	8001120 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fd fb9e 	bl	8001120 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e187      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd fb82 	bl	8001120 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fd fb7e 	bl	8001120 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e167      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x200>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fb6b 	bl	8001120 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fb67 	bl	8001120 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d907      	bls.n	8003a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e150      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	42470000 	.word	0x42470000
 8003a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8097 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac2:	4b74      	ldr	r3, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fd fb27 	bl	8001120 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fd fb23 	bl	8001120 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e10c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2ea>
 8003afc:	4b64      	ldr	r3, [pc, #400]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a63      	ldr	r2, [pc, #396]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x30c>
 8003b12:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a5b      	ldr	r2, [pc, #364]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b2c:	4b58      	ldr	r3, [pc, #352]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
 8003b38:	4b55      	ldr	r3, [pc, #340]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	4a54      	ldr	r2, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fae8 	bl	8001120 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fae4 	bl	8001120 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0cb      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fd fad2 	bl	8001120 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd face 	bl	8001120 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0b5      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a1 	beq.w	8003d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d05c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d141      	bne.n	8003c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd faa2 	bl	8001120 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd fa9e 	bl	8001120 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e087      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	491b      	ldr	r1, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fa77 	bl	8001120 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd fa73 	bl	8001120 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e05c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x416>
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fa60 	bl	8001120 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fd fa5c 	bl	8001120 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e045      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e038      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x4ec>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d121      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0cc      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b68      	ldr	r3, [pc, #416]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90c      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494d      	ldr	r1, [pc, #308]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d044      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e067      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4934      	ldr	r1, [pc, #208]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fd f98e 	bl	8001120 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd f98a 	bl	8001120 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20c      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4916      	ldr	r1, [pc, #88]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490e      	ldr	r1, [pc, #56]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f821 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	490a      	ldr	r1, [pc, #40]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd f8ee 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023c00 	.word	0x40023c00
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08004eec 	.word	0x08004eec
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee0:	b094      	sub	sp, #80	; 0x50
 8003ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	2300      	movs	r3, #0
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef4:	4b79      	ldr	r3, [pc, #484]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d00d      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x40>
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	f200 80e1 	bhi.w	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0e:	e0db      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f14:	e0db      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f16:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1a:	e0d8      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	2300      	movs	r3, #0
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f60:	0150      	lsls	r0, r2, #5
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4621      	mov	r1, r4
 8003f68:	1a51      	subs	r1, r2, r1
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f80:	4659      	mov	r1, fp
 8003f82:	018b      	lsls	r3, r1, #6
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	018a      	lsls	r2, r1, #6
 8003f8e:	4651      	mov	r1, sl
 8003f90:	ebb2 0801 	subs.w	r8, r2, r1
 8003f94:	4659      	mov	r1, fp
 8003f96:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fae:	4690      	mov	r8, r2
 8003fb0:	4699      	mov	r9, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	eb18 0303 	adds.w	r3, r8, r3
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	462b      	mov	r3, r5
 8003fbc:	eb49 0303 	adc.w	r3, r9, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	024b      	lsls	r3, r1, #9
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd8:	4621      	mov	r1, r4
 8003fda:	024a      	lsls	r2, r1, #9
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fec:	f7fc f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	e058      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	4618      	mov	r0, r3
 8004004:	4611      	mov	r1, r2
 8004006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	0159      	lsls	r1, r3, #5
 8004022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004026:	0150      	lsls	r0, r2, #5
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4641      	mov	r1, r8
 800402e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb63 0b01 	sbc.w	fp, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800404c:	ebb2 040a 	subs.w	r4, r2, sl
 8004050:	eb63 050b 	sbc.w	r5, r3, fp
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	00eb      	lsls	r3, r5, #3
 800405e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004062:	00e2      	lsls	r2, r4, #3
 8004064:	4614      	mov	r4, r2
 8004066:	461d      	mov	r5, r3
 8004068:	4643      	mov	r3, r8
 800406a:	18e3      	adds	r3, r4, r3
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	464b      	mov	r3, r9
 8004070:	eb45 0303 	adc.w	r3, r5, r3
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004082:	4629      	mov	r1, r5
 8004084:	028b      	lsls	r3, r1, #10
 8004086:	4621      	mov	r1, r4
 8004088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800408c:	4621      	mov	r1, r4
 800408e:	028a      	lsls	r2, r1, #10
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004096:	2200      	movs	r2, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	61fa      	str	r2, [r7, #28]
 800409c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a0:	f7fc f892 	bl	80001c8 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4613      	mov	r3, r2
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3750      	adds	r7, #80	; 0x50
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000000 	.word	0x20000000

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0a9b      	lsrs	r3, r3, #10
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	08004efc 	.word	0x08004efc

08004128 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800414c:	2b00      	cmp	r3, #0
 800414e:	d035      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004150:	4b62      	ldr	r3, [pc, #392]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004156:	f7fc ffe3 	bl	8001120 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800415e:	f7fc ffdf 	bl	8001120 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0b0      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	019a      	lsls	r2, r3, #6
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	071b      	lsls	r3, r3, #28
 8004188:	4955      	ldr	r1, [pc, #340]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004190:	4b52      	ldr	r3, [pc, #328]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004196:	f7fc ffc3 	bl	8001120 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419e:	f7fc ffbf 	bl	8001120 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e090      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8083 	beq.w	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a43      	ldr	r2, [pc, #268]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3e      	ldr	r2, [pc, #248]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041f2:	f7fc ff95 	bl	8001120 <HAL_GetTick>
 80041f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fc ff91 	bl	8001120 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e062      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800420c:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004218:	4b31      	ldr	r3, [pc, #196]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004220:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d028      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800424c:	4a24      	ldr	r2, [pc, #144]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d114      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800425e:	f7fc ff5f 	bl	8001120 <HAL_GetTick>
 8004262:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fc ff5b 	bl	8001120 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e02a      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004294:	d10d      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	490d      	ldr	r1, [pc, #52]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
 80042b0:	e005      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042bc:	6093      	str	r3, [r2, #8]
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	4905      	ldr	r1, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	42470068 	.word	0x42470068
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42470e40 	.word	0x42470e40

080042ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d13e      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d12f      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004322:	617b      	str	r3, [r7, #20]
          break;
 8004324:	e02f      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004332:	d108      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004334:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e007      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800434e:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	0f1b      	lsrs	r3, r3, #28
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
          break;
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
          break;
 8004384:	bf00      	nop
        }
      }
      break;
 8004386:	bf00      	nop
    }
  }
  return frequency;
 8004388:	697b      	ldr	r3, [r7, #20]
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	00bb8000 	.word	0x00bb8000
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	00f42400 	.word	0x00f42400

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	; (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	; (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	; (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 fd8a 	bl	8004ed4 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	080052e4 	.word	0x080052e4
 80043e4:	080052e4 	.word	0x080052e4
 80043e8:	080052e4 	.word	0x080052e4
 80043ec:	080052e8 	.word	0x080052e8

080043f0 <memcpy>:
 80043f0:	440a      	add	r2, r1
 80043f2:	4291      	cmp	r1, r2
 80043f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f8:	d100      	bne.n	80043fc <memcpy+0xc>
 80043fa:	4770      	bx	lr
 80043fc:	b510      	push	{r4, lr}
 80043fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004406:	4291      	cmp	r1, r2
 8004408:	d1f9      	bne.n	80043fe <memcpy+0xe>
 800440a:	bd10      	pop	{r4, pc}

0800440c <memset>:
 800440c:	4402      	add	r2, r0
 800440e:	4603      	mov	r3, r0
 8004410:	4293      	cmp	r3, r2
 8004412:	d100      	bne.n	8004416 <memset+0xa>
 8004414:	4770      	bx	lr
 8004416:	f803 1b01 	strb.w	r1, [r3], #1
 800441a:	e7f9      	b.n	8004410 <memset+0x4>

0800441c <sinf>:
 800441c:	ee10 3a10 	vmov	r3, s0
 8004420:	b507      	push	{r0, r1, r2, lr}
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <sinf+0x84>)
 8004424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004428:	4293      	cmp	r3, r2
 800442a:	dc07      	bgt.n	800443c <sinf+0x20>
 800442c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80044a4 <sinf+0x88>
 8004430:	2000      	movs	r0, #0
 8004432:	b003      	add	sp, #12
 8004434:	f85d eb04 	ldr.w	lr, [sp], #4
 8004438:	f000 bc48 	b.w	8004ccc <__kernel_sinf>
 800443c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004440:	db04      	blt.n	800444c <sinf+0x30>
 8004442:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004446:	b003      	add	sp, #12
 8004448:	f85d fb04 	ldr.w	pc, [sp], #4
 800444c:	4668      	mov	r0, sp
 800444e:	f000 f82b 	bl	80044a8 <__ieee754_rem_pio2f>
 8004452:	f000 0003 	and.w	r0, r0, #3
 8004456:	2801      	cmp	r0, #1
 8004458:	d00a      	beq.n	8004470 <sinf+0x54>
 800445a:	2802      	cmp	r0, #2
 800445c:	d00f      	beq.n	800447e <sinf+0x62>
 800445e:	b9c0      	cbnz	r0, 8004492 <sinf+0x76>
 8004460:	eddd 0a01 	vldr	s1, [sp, #4]
 8004464:	ed9d 0a00 	vldr	s0, [sp]
 8004468:	2001      	movs	r0, #1
 800446a:	f000 fc2f 	bl	8004ccc <__kernel_sinf>
 800446e:	e7ea      	b.n	8004446 <sinf+0x2a>
 8004470:	eddd 0a01 	vldr	s1, [sp, #4]
 8004474:	ed9d 0a00 	vldr	s0, [sp]
 8004478:	f000 f952 	bl	8004720 <__kernel_cosf>
 800447c:	e7e3      	b.n	8004446 <sinf+0x2a>
 800447e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004482:	ed9d 0a00 	vldr	s0, [sp]
 8004486:	2001      	movs	r0, #1
 8004488:	f000 fc20 	bl	8004ccc <__kernel_sinf>
 800448c:	eeb1 0a40 	vneg.f32	s0, s0
 8004490:	e7d9      	b.n	8004446 <sinf+0x2a>
 8004492:	eddd 0a01 	vldr	s1, [sp, #4]
 8004496:	ed9d 0a00 	vldr	s0, [sp]
 800449a:	f000 f941 	bl	8004720 <__kernel_cosf>
 800449e:	e7f5      	b.n	800448c <sinf+0x70>
 80044a0:	3f490fd8 	.word	0x3f490fd8
 80044a4:	00000000 	.word	0x00000000

080044a8 <__ieee754_rem_pio2f>:
 80044a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044aa:	ee10 6a10 	vmov	r6, s0
 80044ae:	4b8e      	ldr	r3, [pc, #568]	; (80046e8 <__ieee754_rem_pio2f+0x240>)
 80044b0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80044b4:	429d      	cmp	r5, r3
 80044b6:	b087      	sub	sp, #28
 80044b8:	eef0 7a40 	vmov.f32	s15, s0
 80044bc:	4604      	mov	r4, r0
 80044be:	dc05      	bgt.n	80044cc <__ieee754_rem_pio2f+0x24>
 80044c0:	2300      	movs	r3, #0
 80044c2:	ed80 0a00 	vstr	s0, [r0]
 80044c6:	6043      	str	r3, [r0, #4]
 80044c8:	2000      	movs	r0, #0
 80044ca:	e01a      	b.n	8004502 <__ieee754_rem_pio2f+0x5a>
 80044cc:	4b87      	ldr	r3, [pc, #540]	; (80046ec <__ieee754_rem_pio2f+0x244>)
 80044ce:	429d      	cmp	r5, r3
 80044d0:	dc46      	bgt.n	8004560 <__ieee754_rem_pio2f+0xb8>
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80046f0 <__ieee754_rem_pio2f+0x248>
 80044d8:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <__ieee754_rem_pio2f+0x24c>)
 80044da:	f025 050f 	bic.w	r5, r5, #15
 80044de:	dd1f      	ble.n	8004520 <__ieee754_rem_pio2f+0x78>
 80044e0:	429d      	cmp	r5, r3
 80044e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044e6:	d00e      	beq.n	8004506 <__ieee754_rem_pio2f+0x5e>
 80044e8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80046f8 <__ieee754_rem_pio2f+0x250>
 80044ec:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80044f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044f4:	ed80 0a00 	vstr	s0, [r0]
 80044f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fc:	2001      	movs	r0, #1
 80044fe:	edc4 7a01 	vstr	s15, [r4, #4]
 8004502:	b007      	add	sp, #28
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004506:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80046fc <__ieee754_rem_pio2f+0x254>
 800450a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004700 <__ieee754_rem_pio2f+0x258>
 800450e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004512:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004516:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800451a:	edc0 6a00 	vstr	s13, [r0]
 800451e:	e7eb      	b.n	80044f8 <__ieee754_rem_pio2f+0x50>
 8004520:	429d      	cmp	r5, r3
 8004522:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004526:	d00e      	beq.n	8004546 <__ieee754_rem_pio2f+0x9e>
 8004528:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80046f8 <__ieee754_rem_pio2f+0x250>
 800452c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004530:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004534:	ed80 0a00 	vstr	s0, [r0]
 8004538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	edc4 7a01 	vstr	s15, [r4, #4]
 8004544:	e7dd      	b.n	8004502 <__ieee754_rem_pio2f+0x5a>
 8004546:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80046fc <__ieee754_rem_pio2f+0x254>
 800454a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004700 <__ieee754_rem_pio2f+0x258>
 800454e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004552:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004556:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800455a:	edc0 6a00 	vstr	s13, [r0]
 800455e:	e7eb      	b.n	8004538 <__ieee754_rem_pio2f+0x90>
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <__ieee754_rem_pio2f+0x25c>)
 8004562:	429d      	cmp	r5, r3
 8004564:	dc72      	bgt.n	800464c <__ieee754_rem_pio2f+0x1a4>
 8004566:	f000 fbf9 	bl	8004d5c <fabsf>
 800456a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004708 <__ieee754_rem_pio2f+0x260>
 800456e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004572:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800457a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800457e:	ee17 0a90 	vmov	r0, s15
 8004582:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80046f0 <__ieee754_rem_pio2f+0x248>
 8004586:	eea7 0a67 	vfms.f32	s0, s14, s15
 800458a:	281f      	cmp	r0, #31
 800458c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80046f8 <__ieee754_rem_pio2f+0x250>
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	eeb1 6a47 	vneg.f32	s12, s14
 8004598:	ee70 6a67 	vsub.f32	s13, s0, s15
 800459c:	ee16 2a90 	vmov	r2, s13
 80045a0:	dc1c      	bgt.n	80045dc <__ieee754_rem_pio2f+0x134>
 80045a2:	495a      	ldr	r1, [pc, #360]	; (800470c <__ieee754_rem_pio2f+0x264>)
 80045a4:	1e47      	subs	r7, r0, #1
 80045a6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80045aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80045ae:	428b      	cmp	r3, r1
 80045b0:	d014      	beq.n	80045dc <__ieee754_rem_pio2f+0x134>
 80045b2:	6022      	str	r2, [r4, #0]
 80045b4:	ed94 7a00 	vldr	s14, [r4]
 80045b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80045bc:	2e00      	cmp	r6, #0
 80045be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80045c2:	ed84 0a01 	vstr	s0, [r4, #4]
 80045c6:	da9c      	bge.n	8004502 <__ieee754_rem_pio2f+0x5a>
 80045c8:	eeb1 7a47 	vneg.f32	s14, s14
 80045cc:	eeb1 0a40 	vneg.f32	s0, s0
 80045d0:	ed84 7a00 	vstr	s14, [r4]
 80045d4:	ed84 0a01 	vstr	s0, [r4, #4]
 80045d8:	4240      	negs	r0, r0
 80045da:	e792      	b.n	8004502 <__ieee754_rem_pio2f+0x5a>
 80045dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80045e0:	15eb      	asrs	r3, r5, #23
 80045e2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80045e6:	2d08      	cmp	r5, #8
 80045e8:	dde3      	ble.n	80045b2 <__ieee754_rem_pio2f+0x10a>
 80045ea:	eddf 7a44 	vldr	s15, [pc, #272]	; 80046fc <__ieee754_rem_pio2f+0x254>
 80045ee:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004700 <__ieee754_rem_pio2f+0x258>
 80045f2:	eef0 6a40 	vmov.f32	s13, s0
 80045f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80045fa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80045fe:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004602:	eef0 7a40 	vmov.f32	s15, s0
 8004606:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800460a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800460e:	ee15 2a90 	vmov	r2, s11
 8004612:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	2b19      	cmp	r3, #25
 800461a:	dc04      	bgt.n	8004626 <__ieee754_rem_pio2f+0x17e>
 800461c:	edc4 5a00 	vstr	s11, [r4]
 8004620:	eeb0 0a66 	vmov.f32	s0, s13
 8004624:	e7c6      	b.n	80045b4 <__ieee754_rem_pio2f+0x10c>
 8004626:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004710 <__ieee754_rem_pio2f+0x268>
 800462a:	eeb0 0a66 	vmov.f32	s0, s13
 800462e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004632:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004636:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004714 <__ieee754_rem_pio2f+0x26c>
 800463a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800463e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004642:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004646:	ed84 7a00 	vstr	s14, [r4]
 800464a:	e7b3      	b.n	80045b4 <__ieee754_rem_pio2f+0x10c>
 800464c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004650:	db06      	blt.n	8004660 <__ieee754_rem_pio2f+0x1b8>
 8004652:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004656:	edc0 7a01 	vstr	s15, [r0, #4]
 800465a:	edc0 7a00 	vstr	s15, [r0]
 800465e:	e733      	b.n	80044c8 <__ieee754_rem_pio2f+0x20>
 8004660:	15ea      	asrs	r2, r5, #23
 8004662:	3a86      	subs	r2, #134	; 0x86
 8004664:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004670:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004718 <__ieee754_rem_pio2f+0x270>
 8004674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800467c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004680:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004684:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004688:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800468c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004690:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a0:	edcd 7a05 	vstr	s15, [sp, #20]
 80046a4:	d11e      	bne.n	80046e4 <__ieee754_rem_pio2f+0x23c>
 80046a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	bf14      	ite	ne
 80046b0:	2302      	movne	r3, #2
 80046b2:	2301      	moveq	r3, #1
 80046b4:	4919      	ldr	r1, [pc, #100]	; (800471c <__ieee754_rem_pio2f+0x274>)
 80046b6:	9101      	str	r1, [sp, #4]
 80046b8:	2102      	movs	r1, #2
 80046ba:	9100      	str	r1, [sp, #0]
 80046bc:	a803      	add	r0, sp, #12
 80046be:	4621      	mov	r1, r4
 80046c0:	f000 f88e 	bl	80047e0 <__kernel_rem_pio2f>
 80046c4:	2e00      	cmp	r6, #0
 80046c6:	f6bf af1c 	bge.w	8004502 <__ieee754_rem_pio2f+0x5a>
 80046ca:	edd4 7a00 	vldr	s15, [r4]
 80046ce:	eef1 7a67 	vneg.f32	s15, s15
 80046d2:	edc4 7a00 	vstr	s15, [r4]
 80046d6:	edd4 7a01 	vldr	s15, [r4, #4]
 80046da:	eef1 7a67 	vneg.f32	s15, s15
 80046de:	edc4 7a01 	vstr	s15, [r4, #4]
 80046e2:	e779      	b.n	80045d8 <__ieee754_rem_pio2f+0x130>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e7e5      	b.n	80046b4 <__ieee754_rem_pio2f+0x20c>
 80046e8:	3f490fd8 	.word	0x3f490fd8
 80046ec:	4016cbe3 	.word	0x4016cbe3
 80046f0:	3fc90f80 	.word	0x3fc90f80
 80046f4:	3fc90fd0 	.word	0x3fc90fd0
 80046f8:	37354443 	.word	0x37354443
 80046fc:	37354400 	.word	0x37354400
 8004700:	2e85a308 	.word	0x2e85a308
 8004704:	43490f80 	.word	0x43490f80
 8004708:	3f22f984 	.word	0x3f22f984
 800470c:	08004f0c 	.word	0x08004f0c
 8004710:	2e85a300 	.word	0x2e85a300
 8004714:	248d3132 	.word	0x248d3132
 8004718:	43800000 	.word	0x43800000
 800471c:	08004f8c 	.word	0x08004f8c

08004720 <__kernel_cosf>:
 8004720:	ee10 3a10 	vmov	r3, s0
 8004724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004728:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800472c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004730:	da05      	bge.n	800473e <__kernel_cosf+0x1e>
 8004732:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004736:	ee17 2a90 	vmov	r2, s15
 800473a:	2a00      	cmp	r2, #0
 800473c:	d03d      	beq.n	80047ba <__kernel_cosf+0x9a>
 800473e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004742:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80047c0 <__kernel_cosf+0xa0>
 8004746:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80047c4 <__kernel_cosf+0xa4>
 800474a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80047c8 <__kernel_cosf+0xa8>
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <__kernel_cosf+0xac>)
 8004750:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004754:	4293      	cmp	r3, r2
 8004756:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80047d0 <__kernel_cosf+0xb0>
 800475a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800475e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047d4 <__kernel_cosf+0xb4>
 8004762:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004766:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80047d8 <__kernel_cosf+0xb8>
 800476a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800476e:	eeb0 7a66 	vmov.f32	s14, s13
 8004772:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004776:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800477a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800477e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004782:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004786:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800478a:	dc04      	bgt.n	8004796 <__kernel_cosf+0x76>
 800478c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004790:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004794:	4770      	bx	lr
 8004796:	4a11      	ldr	r2, [pc, #68]	; (80047dc <__kernel_cosf+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	bfda      	itte	le
 800479c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	ee06 3a90 	vmovle	s13, r3
 80047a4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80047a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047ac:	ee36 0a66 	vsub.f32	s0, s12, s13
 80047b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80047b8:	4770      	bx	lr
 80047ba:	eeb0 0a46 	vmov.f32	s0, s12
 80047be:	4770      	bx	lr
 80047c0:	ad47d74e 	.word	0xad47d74e
 80047c4:	310f74f6 	.word	0x310f74f6
 80047c8:	3d2aaaab 	.word	0x3d2aaaab
 80047cc:	3e999999 	.word	0x3e999999
 80047d0:	b493f27c 	.word	0xb493f27c
 80047d4:	37d00d01 	.word	0x37d00d01
 80047d8:	bab60b61 	.word	0xbab60b61
 80047dc:	3f480000 	.word	0x3f480000

080047e0 <__kernel_rem_pio2f>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	ed2d 8b04 	vpush	{d8-d9}
 80047e8:	b0d9      	sub	sp, #356	; 0x164
 80047ea:	4688      	mov	r8, r1
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	49bb      	ldr	r1, [pc, #748]	; (8004adc <__kernel_rem_pio2f+0x2fc>)
 80047f0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80047f8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80047fc:	1e59      	subs	r1, r3, #1
 80047fe:	1d13      	adds	r3, r2, #4
 8004800:	db27      	blt.n	8004852 <__kernel_rem_pio2f+0x72>
 8004802:	f1b2 0b03 	subs.w	fp, r2, #3
 8004806:	bf48      	it	mi
 8004808:	f102 0b04 	addmi.w	fp, r2, #4
 800480c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004810:	1c45      	adds	r5, r0, #1
 8004812:	00ec      	lsls	r4, r5, #3
 8004814:	1a47      	subs	r7, r0, r1
 8004816:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004aec <__kernel_rem_pio2f+0x30c>
 800481a:	9403      	str	r4, [sp, #12]
 800481c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004820:	eb0a 0c01 	add.w	ip, sl, r1
 8004824:	ae1c      	add	r6, sp, #112	; 0x70
 8004826:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800482a:	2400      	movs	r4, #0
 800482c:	4564      	cmp	r4, ip
 800482e:	dd12      	ble.n	8004856 <__kernel_rem_pio2f+0x76>
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	ac1c      	add	r4, sp, #112	; 0x70
 8004834:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004838:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800483c:	f04f 0c00 	mov.w	ip, #0
 8004840:	45d4      	cmp	ip, sl
 8004842:	dc27      	bgt.n	8004894 <__kernel_rem_pio2f+0xb4>
 8004844:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004848:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004aec <__kernel_rem_pio2f+0x30c>
 800484c:	4627      	mov	r7, r4
 800484e:	2600      	movs	r6, #0
 8004850:	e016      	b.n	8004880 <__kernel_rem_pio2f+0xa0>
 8004852:	2000      	movs	r0, #0
 8004854:	e7dc      	b.n	8004810 <__kernel_rem_pio2f+0x30>
 8004856:	42e7      	cmn	r7, r4
 8004858:	bf5d      	ittte	pl
 800485a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800485e:	ee07 3a90 	vmovpl	s15, r3
 8004862:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004866:	eef0 7a47 	vmovmi.f32	s15, s14
 800486a:	ece6 7a01 	vstmia	r6!, {s15}
 800486e:	3401      	adds	r4, #1
 8004870:	e7dc      	b.n	800482c <__kernel_rem_pio2f+0x4c>
 8004872:	ecf9 6a01 	vldmia	r9!, {s13}
 8004876:	ed97 7a00 	vldr	s14, [r7]
 800487a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800487e:	3601      	adds	r6, #1
 8004880:	428e      	cmp	r6, r1
 8004882:	f1a7 0704 	sub.w	r7, r7, #4
 8004886:	ddf4      	ble.n	8004872 <__kernel_rem_pio2f+0x92>
 8004888:	eceb 7a01 	vstmia	fp!, {s15}
 800488c:	f10c 0c01 	add.w	ip, ip, #1
 8004890:	3404      	adds	r4, #4
 8004892:	e7d5      	b.n	8004840 <__kernel_rem_pio2f+0x60>
 8004894:	ab08      	add	r3, sp, #32
 8004896:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800489a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004ae8 <__kernel_rem_pio2f+0x308>
 800489e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004ae4 <__kernel_rem_pio2f+0x304>
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80048a8:	4656      	mov	r6, sl
 80048aa:	00b3      	lsls	r3, r6, #2
 80048ac:	9305      	str	r3, [sp, #20]
 80048ae:	ab58      	add	r3, sp, #352	; 0x160
 80048b0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048b4:	ac08      	add	r4, sp, #32
 80048b6:	ab44      	add	r3, sp, #272	; 0x110
 80048b8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80048bc:	46a4      	mov	ip, r4
 80048be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048c2:	4637      	mov	r7, r6
 80048c4:	2f00      	cmp	r7, #0
 80048c6:	f1a0 0004 	sub.w	r0, r0, #4
 80048ca:	dc4f      	bgt.n	800496c <__kernel_rem_pio2f+0x18c>
 80048cc:	4628      	mov	r0, r5
 80048ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80048d2:	f000 fa8d 	bl	8004df0 <scalbnf>
 80048d6:	eeb0 8a40 	vmov.f32	s16, s0
 80048da:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80048de:	ee28 0a00 	vmul.f32	s0, s16, s0
 80048e2:	f000 fa43 	bl	8004d6c <floorf>
 80048e6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80048ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80048f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80048f8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80048fc:	ee17 9a90 	vmov	r9, s15
 8004900:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004904:	dd44      	ble.n	8004990 <__kernel_rem_pio2f+0x1b0>
 8004906:	f106 3cff 	add.w	ip, r6, #4294967295
 800490a:	ab08      	add	r3, sp, #32
 800490c:	f1c5 0e08 	rsb	lr, r5, #8
 8004910:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004914:	fa47 f00e 	asr.w	r0, r7, lr
 8004918:	4481      	add	r9, r0
 800491a:	fa00 f00e 	lsl.w	r0, r0, lr
 800491e:	1a3f      	subs	r7, r7, r0
 8004920:	f1c5 0007 	rsb	r0, r5, #7
 8004924:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004928:	4107      	asrs	r7, r0
 800492a:	2f00      	cmp	r7, #0
 800492c:	dd3f      	ble.n	80049ae <__kernel_rem_pio2f+0x1ce>
 800492e:	f04f 0e00 	mov.w	lr, #0
 8004932:	f109 0901 	add.w	r9, r9, #1
 8004936:	4673      	mov	r3, lr
 8004938:	4576      	cmp	r6, lr
 800493a:	dc6b      	bgt.n	8004a14 <__kernel_rem_pio2f+0x234>
 800493c:	2d00      	cmp	r5, #0
 800493e:	dd04      	ble.n	800494a <__kernel_rem_pio2f+0x16a>
 8004940:	2d01      	cmp	r5, #1
 8004942:	d078      	beq.n	8004a36 <__kernel_rem_pio2f+0x256>
 8004944:	2d02      	cmp	r5, #2
 8004946:	f000 8081 	beq.w	8004a4c <__kernel_rem_pio2f+0x26c>
 800494a:	2f02      	cmp	r7, #2
 800494c:	d12f      	bne.n	80049ae <__kernel_rem_pio2f+0x1ce>
 800494e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004952:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004956:	b353      	cbz	r3, 80049ae <__kernel_rem_pio2f+0x1ce>
 8004958:	4628      	mov	r0, r5
 800495a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800495e:	f000 fa47 	bl	8004df0 <scalbnf>
 8004962:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004966:	ee38 8a40 	vsub.f32	s16, s16, s0
 800496a:	e020      	b.n	80049ae <__kernel_rem_pio2f+0x1ce>
 800496c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004970:	3f01      	subs	r7, #1
 8004972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800497e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004982:	ecac 0a01 	vstmia	ip!, {s0}
 8004986:	ed90 0a00 	vldr	s0, [r0]
 800498a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800498e:	e799      	b.n	80048c4 <__kernel_rem_pio2f+0xe4>
 8004990:	d105      	bne.n	800499e <__kernel_rem_pio2f+0x1be>
 8004992:	1e70      	subs	r0, r6, #1
 8004994:	ab08      	add	r3, sp, #32
 8004996:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800499a:	11ff      	asrs	r7, r7, #7
 800499c:	e7c5      	b.n	800492a <__kernel_rem_pio2f+0x14a>
 800499e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80049a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	da31      	bge.n	8004a10 <__kernel_rem_pio2f+0x230>
 80049ac:	2700      	movs	r7, #0
 80049ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	f040 809b 	bne.w	8004af0 <__kernel_rem_pio2f+0x310>
 80049ba:	1e74      	subs	r4, r6, #1
 80049bc:	46a4      	mov	ip, r4
 80049be:	2000      	movs	r0, #0
 80049c0:	45d4      	cmp	ip, sl
 80049c2:	da4a      	bge.n	8004a5a <__kernel_rem_pio2f+0x27a>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d07a      	beq.n	8004abe <__kernel_rem_pio2f+0x2de>
 80049c8:	ab08      	add	r3, sp, #32
 80049ca:	3d08      	subs	r5, #8
 80049cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8081 	beq.w	8004ad8 <__kernel_rem_pio2f+0x2f8>
 80049d6:	4628      	mov	r0, r5
 80049d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049dc:	00a5      	lsls	r5, r4, #2
 80049de:	f000 fa07 	bl	8004df0 <scalbnf>
 80049e2:	aa44      	add	r2, sp, #272	; 0x110
 80049e4:	1d2b      	adds	r3, r5, #4
 80049e6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004ae8 <__kernel_rem_pio2f+0x308>
 80049ea:	18d1      	adds	r1, r2, r3
 80049ec:	4622      	mov	r2, r4
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	f280 80ae 	bge.w	8004b50 <__kernel_rem_pio2f+0x370>
 80049f4:	4622      	mov	r2, r4
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	f2c0 80cc 	blt.w	8004b94 <__kernel_rem_pio2f+0x3b4>
 80049fc:	a944      	add	r1, sp, #272	; 0x110
 80049fe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004a02:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004ae0 <__kernel_rem_pio2f+0x300>
 8004a06:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004aec <__kernel_rem_pio2f+0x30c>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	1aa1      	subs	r1, r4, r2
 8004a0e:	e0b6      	b.n	8004b7e <__kernel_rem_pio2f+0x39e>
 8004a10:	2702      	movs	r7, #2
 8004a12:	e78c      	b.n	800492e <__kernel_rem_pio2f+0x14e>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	b94b      	cbnz	r3, 8004a2c <__kernel_rem_pio2f+0x24c>
 8004a18:	b118      	cbz	r0, 8004a22 <__kernel_rem_pio2f+0x242>
 8004a1a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004a1e:	6020      	str	r0, [r4, #0]
 8004a20:	2001      	movs	r0, #1
 8004a22:	f10e 0e01 	add.w	lr, lr, #1
 8004a26:	3404      	adds	r4, #4
 8004a28:	4603      	mov	r3, r0
 8004a2a:	e785      	b.n	8004938 <__kernel_rem_pio2f+0x158>
 8004a2c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	e7f5      	b.n	8004a22 <__kernel_rem_pio2f+0x242>
 8004a36:	1e74      	subs	r4, r6, #1
 8004a38:	a808      	add	r0, sp, #32
 8004a3a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004a3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004a42:	f10d 0c20 	add.w	ip, sp, #32
 8004a46:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004a4a:	e77e      	b.n	800494a <__kernel_rem_pio2f+0x16a>
 8004a4c:	1e74      	subs	r4, r6, #1
 8004a4e:	a808      	add	r0, sp, #32
 8004a50:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004a54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004a58:	e7f3      	b.n	8004a42 <__kernel_rem_pio2f+0x262>
 8004a5a:	ab08      	add	r3, sp, #32
 8004a5c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a64:	4318      	orrs	r0, r3
 8004a66:	e7ab      	b.n	80049c0 <__kernel_rem_pio2f+0x1e0>
 8004a68:	f10c 0c01 	add.w	ip, ip, #1
 8004a6c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004a70:	2c00      	cmp	r4, #0
 8004a72:	d0f9      	beq.n	8004a68 <__kernel_rem_pio2f+0x288>
 8004a74:	9b05      	ldr	r3, [sp, #20]
 8004a76:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a7a:	eb0d 0003 	add.w	r0, sp, r3
 8004a7e:	9b01      	ldr	r3, [sp, #4]
 8004a80:	18f4      	adds	r4, r6, r3
 8004a82:	ab1c      	add	r3, sp, #112	; 0x70
 8004a84:	1c77      	adds	r7, r6, #1
 8004a86:	384c      	subs	r0, #76	; 0x4c
 8004a88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004a8c:	4466      	add	r6, ip
 8004a8e:	42be      	cmp	r6, r7
 8004a90:	f6ff af0b 	blt.w	80048aa <__kernel_rem_pio2f+0xca>
 8004a94:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004a98:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa4:	f04f 0c00 	mov.w	ip, #0
 8004aa8:	ece4 7a01 	vstmia	r4!, {s15}
 8004aac:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004aec <__kernel_rem_pio2f+0x30c>
 8004ab0:	46a1      	mov	r9, r4
 8004ab2:	458c      	cmp	ip, r1
 8004ab4:	dd07      	ble.n	8004ac6 <__kernel_rem_pio2f+0x2e6>
 8004ab6:	ece0 7a01 	vstmia	r0!, {s15}
 8004aba:	3701      	adds	r7, #1
 8004abc:	e7e7      	b.n	8004a8e <__kernel_rem_pio2f+0x2ae>
 8004abe:	9804      	ldr	r0, [sp, #16]
 8004ac0:	f04f 0c01 	mov.w	ip, #1
 8004ac4:	e7d2      	b.n	8004a6c <__kernel_rem_pio2f+0x28c>
 8004ac6:	ecfe 6a01 	vldmia	lr!, {s13}
 8004aca:	ed39 7a01 	vldmdb	r9!, {s14}
 8004ace:	f10c 0c01 	add.w	ip, ip, #1
 8004ad2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ad6:	e7ec      	b.n	8004ab2 <__kernel_rem_pio2f+0x2d2>
 8004ad8:	3c01      	subs	r4, #1
 8004ada:	e775      	b.n	80049c8 <__kernel_rem_pio2f+0x1e8>
 8004adc:	080052d0 	.word	0x080052d0
 8004ae0:	080052a4 	.word	0x080052a4
 8004ae4:	43800000 	.word	0x43800000
 8004ae8:	3b800000 	.word	0x3b800000
 8004aec:	00000000 	.word	0x00000000
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	eeb0 0a48 	vmov.f32	s0, s16
 8004af6:	1a98      	subs	r0, r3, r2
 8004af8:	f000 f97a 	bl	8004df0 <scalbnf>
 8004afc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004ae4 <__kernel_rem_pio2f+0x304>
 8004b00:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	db19      	blt.n	8004b3e <__kernel_rem_pio2f+0x35e>
 8004b0a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004ae8 <__kernel_rem_pio2f+0x308>
 8004b0e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b12:	aa08      	add	r2, sp, #32
 8004b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b18:	1c74      	adds	r4, r6, #1
 8004b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1e:	3508      	adds	r5, #8
 8004b20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b2c:	ee10 3a10 	vmov	r3, s0
 8004b30:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b34:	ee17 3a90 	vmov	r3, s15
 8004b38:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004b3c:	e74b      	b.n	80049d6 <__kernel_rem_pio2f+0x1f6>
 8004b3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b42:	aa08      	add	r2, sp, #32
 8004b44:	ee10 3a10 	vmov	r3, s0
 8004b48:	4634      	mov	r4, r6
 8004b4a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b4e:	e742      	b.n	80049d6 <__kernel_rem_pio2f+0x1f6>
 8004b50:	a808      	add	r0, sp, #32
 8004b52:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	ee07 0a90 	vmov	s15, r0
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	3a01      	subs	r2, #1
 8004b62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b66:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b6a:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b6e:	e73e      	b.n	80049ee <__kernel_rem_pio2f+0x20e>
 8004b70:	ecfc 6a01 	vldmia	ip!, {s13}
 8004b74:	ecb6 7a01 	vldmia	r6!, {s14}
 8004b78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	4550      	cmp	r0, sl
 8004b80:	dc01      	bgt.n	8004b86 <__kernel_rem_pio2f+0x3a6>
 8004b82:	4288      	cmp	r0, r1
 8004b84:	ddf4      	ble.n	8004b70 <__kernel_rem_pio2f+0x390>
 8004b86:	a858      	add	r0, sp, #352	; 0x160
 8004b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004b8c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004b90:	3a01      	subs	r2, #1
 8004b92:	e730      	b.n	80049f6 <__kernel_rem_pio2f+0x216>
 8004b94:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004b96:	2a02      	cmp	r2, #2
 8004b98:	dc09      	bgt.n	8004bae <__kernel_rem_pio2f+0x3ce>
 8004b9a:	2a00      	cmp	r2, #0
 8004b9c:	dc2a      	bgt.n	8004bf4 <__kernel_rem_pio2f+0x414>
 8004b9e:	d043      	beq.n	8004c28 <__kernel_rem_pio2f+0x448>
 8004ba0:	f009 0007 	and.w	r0, r9, #7
 8004ba4:	b059      	add	sp, #356	; 0x164
 8004ba6:	ecbd 8b04 	vpop	{d8-d9}
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d1f5      	bne.n	8004ba0 <__kernel_rem_pio2f+0x3c0>
 8004bb4:	ab30      	add	r3, sp, #192	; 0xc0
 8004bb6:	442b      	add	r3, r5
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f1a1 0104 	sub.w	r1, r1, #4
 8004bc4:	dc51      	bgt.n	8004c6a <__kernel_rem_pio2f+0x48a>
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	2901      	cmp	r1, #1
 8004bca:	f1a2 0204 	sub.w	r2, r2, #4
 8004bce:	dc5c      	bgt.n	8004c8a <__kernel_rem_pio2f+0x4aa>
 8004bd0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004aec <__kernel_rem_pio2f+0x30c>
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2c01      	cmp	r4, #1
 8004bd8:	dc67      	bgt.n	8004caa <__kernel_rem_pio2f+0x4ca>
 8004bda:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004bde:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004be2:	2f00      	cmp	r7, #0
 8004be4:	d167      	bne.n	8004cb6 <__kernel_rem_pio2f+0x4d6>
 8004be6:	edc8 6a00 	vstr	s13, [r8]
 8004bea:	ed88 7a01 	vstr	s14, [r8, #4]
 8004bee:	edc8 7a02 	vstr	s15, [r8, #8]
 8004bf2:	e7d5      	b.n	8004ba0 <__kernel_rem_pio2f+0x3c0>
 8004bf4:	aa30      	add	r2, sp, #192	; 0xc0
 8004bf6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004aec <__kernel_rem_pio2f+0x30c>
 8004bfa:	4413      	add	r3, r2
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	da24      	bge.n	8004c4c <__kernel_rem_pio2f+0x46c>
 8004c02:	b34f      	cbz	r7, 8004c58 <__kernel_rem_pio2f+0x478>
 8004c04:	eef1 7a47 	vneg.f32	s15, s14
 8004c08:	edc8 7a00 	vstr	s15, [r8]
 8004c0c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c14:	aa31      	add	r2, sp, #196	; 0xc4
 8004c16:	2301      	movs	r3, #1
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	da20      	bge.n	8004c5e <__kernel_rem_pio2f+0x47e>
 8004c1c:	b10f      	cbz	r7, 8004c22 <__kernel_rem_pio2f+0x442>
 8004c1e:	eef1 7a67 	vneg.f32	s15, s15
 8004c22:	edc8 7a01 	vstr	s15, [r8, #4]
 8004c26:	e7bb      	b.n	8004ba0 <__kernel_rem_pio2f+0x3c0>
 8004c28:	aa30      	add	r2, sp, #192	; 0xc0
 8004c2a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004aec <__kernel_rem_pio2f+0x30c>
 8004c2e:	4413      	add	r3, r2
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	da05      	bge.n	8004c40 <__kernel_rem_pio2f+0x460>
 8004c34:	b10f      	cbz	r7, 8004c3a <__kernel_rem_pio2f+0x45a>
 8004c36:	eef1 7a67 	vneg.f32	s15, s15
 8004c3a:	edc8 7a00 	vstr	s15, [r8]
 8004c3e:	e7af      	b.n	8004ba0 <__kernel_rem_pio2f+0x3c0>
 8004c40:	ed33 7a01 	vldmdb	r3!, {s14}
 8004c44:	3c01      	subs	r4, #1
 8004c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c4a:	e7f1      	b.n	8004c30 <__kernel_rem_pio2f+0x450>
 8004c4c:	ed73 7a01 	vldmdb	r3!, {s15}
 8004c50:	3a01      	subs	r2, #1
 8004c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c56:	e7d2      	b.n	8004bfe <__kernel_rem_pio2f+0x41e>
 8004c58:	eef0 7a47 	vmov.f32	s15, s14
 8004c5c:	e7d4      	b.n	8004c08 <__kernel_rem_pio2f+0x428>
 8004c5e:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c62:	3301      	adds	r3, #1
 8004c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c68:	e7d6      	b.n	8004c18 <__kernel_rem_pio2f+0x438>
 8004c6a:	edd1 7a00 	vldr	s15, [r1]
 8004c6e:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c76:	3801      	subs	r0, #1
 8004c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c7c:	ed81 7a00 	vstr	s14, [r1]
 8004c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c84:	edc1 7a01 	vstr	s15, [r1, #4]
 8004c88:	e799      	b.n	8004bbe <__kernel_rem_pio2f+0x3de>
 8004c8a:	edd2 7a00 	vldr	s15, [r2]
 8004c8e:	edd2 6a01 	vldr	s13, [r2, #4]
 8004c92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c96:	3901      	subs	r1, #1
 8004c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c9c:	ed82 7a00 	vstr	s14, [r2]
 8004ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca4:	edc2 7a01 	vstr	s15, [r2, #4]
 8004ca8:	e78e      	b.n	8004bc8 <__kernel_rem_pio2f+0x3e8>
 8004caa:	ed33 7a01 	vldmdb	r3!, {s14}
 8004cae:	3c01      	subs	r4, #1
 8004cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb4:	e78f      	b.n	8004bd6 <__kernel_rem_pio2f+0x3f6>
 8004cb6:	eef1 6a66 	vneg.f32	s13, s13
 8004cba:	eeb1 7a47 	vneg.f32	s14, s14
 8004cbe:	edc8 6a00 	vstr	s13, [r8]
 8004cc2:	ed88 7a01 	vstr	s14, [r8, #4]
 8004cc6:	eef1 7a67 	vneg.f32	s15, s15
 8004cca:	e790      	b.n	8004bee <__kernel_rem_pio2f+0x40e>

08004ccc <__kernel_sinf>:
 8004ccc:	ee10 3a10 	vmov	r3, s0
 8004cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cd4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004cd8:	da04      	bge.n	8004ce4 <__kernel_sinf+0x18>
 8004cda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cde:	ee17 3a90 	vmov	r3, s15
 8004ce2:	b35b      	cbz	r3, 8004d3c <__kernel_sinf+0x70>
 8004ce4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ce8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004d40 <__kernel_sinf+0x74>
 8004cec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004d44 <__kernel_sinf+0x78>
 8004cf0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cf4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004d48 <__kernel_sinf+0x7c>
 8004cf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004cfc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004d4c <__kernel_sinf+0x80>
 8004d00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d04:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004d50 <__kernel_sinf+0x84>
 8004d08:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004d0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d10:	b930      	cbnz	r0, 8004d20 <__kernel_sinf+0x54>
 8004d12:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004d54 <__kernel_sinf+0x88>
 8004d16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004d1e:	4770      	bx	lr
 8004d20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004d28:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d30:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004d58 <__kernel_sinf+0x8c>
 8004d34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d38:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d44:	b2d72f34 	.word	0xb2d72f34
 8004d48:	3638ef1b 	.word	0x3638ef1b
 8004d4c:	b9500d01 	.word	0xb9500d01
 8004d50:	3c088889 	.word	0x3c088889
 8004d54:	be2aaaab 	.word	0xbe2aaaab
 8004d58:	3e2aaaab 	.word	0x3e2aaaab

08004d5c <fabsf>:
 8004d5c:	ee10 3a10 	vmov	r3, s0
 8004d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d64:	ee00 3a10 	vmov	s0, r3
 8004d68:	4770      	bx	lr
	...

08004d6c <floorf>:
 8004d6c:	ee10 3a10 	vmov	r3, s0
 8004d70:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d74:	3a7f      	subs	r2, #127	; 0x7f
 8004d76:	2a16      	cmp	r2, #22
 8004d78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d7c:	dc2a      	bgt.n	8004dd4 <floorf+0x68>
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	da11      	bge.n	8004da6 <floorf+0x3a>
 8004d82:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004de4 <floorf+0x78>
 8004d86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	dd05      	ble.n	8004da0 <floorf+0x34>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	da23      	bge.n	8004de0 <floorf+0x74>
 8004d98:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <floorf+0x7c>)
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	bf18      	it	ne
 8004d9e:	4613      	movne	r3, r2
 8004da0:	ee00 3a10 	vmov	s0, r3
 8004da4:	4770      	bx	lr
 8004da6:	4911      	ldr	r1, [pc, #68]	; (8004dec <floorf+0x80>)
 8004da8:	4111      	asrs	r1, r2
 8004daa:	420b      	tst	r3, r1
 8004dac:	d0fa      	beq.n	8004da4 <floorf+0x38>
 8004dae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004de4 <floorf+0x78>
 8004db2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004db6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	ddef      	ble.n	8004da0 <floorf+0x34>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfbe      	ittt	lt
 8004dc4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004dc8:	fa40 f202 	asrlt.w	r2, r0, r2
 8004dcc:	189b      	addlt	r3, r3, r2
 8004dce:	ea23 0301 	bic.w	r3, r3, r1
 8004dd2:	e7e5      	b.n	8004da0 <floorf+0x34>
 8004dd4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004dd8:	d3e4      	bcc.n	8004da4 <floorf+0x38>
 8004dda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004dde:	4770      	bx	lr
 8004de0:	2300      	movs	r3, #0
 8004de2:	e7dd      	b.n	8004da0 <floorf+0x34>
 8004de4:	7149f2ca 	.word	0x7149f2ca
 8004de8:	bf800000 	.word	0xbf800000
 8004dec:	007fffff 	.word	0x007fffff

08004df0 <scalbnf>:
 8004df0:	ee10 3a10 	vmov	r3, s0
 8004df4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004df8:	d025      	beq.n	8004e46 <scalbnf+0x56>
 8004dfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004dfe:	d302      	bcc.n	8004e06 <scalbnf+0x16>
 8004e00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e04:	4770      	bx	lr
 8004e06:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004e0a:	d122      	bne.n	8004e52 <scalbnf+0x62>
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <scalbnf+0xc8>)
 8004e0e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004ebc <scalbnf+0xcc>
 8004e12:	4298      	cmp	r0, r3
 8004e14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e18:	db16      	blt.n	8004e48 <scalbnf+0x58>
 8004e1a:	ee10 3a10 	vmov	r3, s0
 8004e1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e22:	3a19      	subs	r2, #25
 8004e24:	4402      	add	r2, r0
 8004e26:	2afe      	cmp	r2, #254	; 0xfe
 8004e28:	dd15      	ble.n	8004e56 <scalbnf+0x66>
 8004e2a:	ee10 3a10 	vmov	r3, s0
 8004e2e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004ec0 <scalbnf+0xd0>
 8004e32:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ec4 <scalbnf+0xd4>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	eeb0 7a67 	vmov.f32	s14, s15
 8004e3c:	bfb8      	it	lt
 8004e3e:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e42:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004e46:	4770      	bx	lr
 8004e48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004ec8 <scalbnf+0xd8>
 8004e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e50:	4770      	bx	lr
 8004e52:	0dd2      	lsrs	r2, r2, #23
 8004e54:	e7e6      	b.n	8004e24 <scalbnf+0x34>
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	dd06      	ble.n	8004e68 <scalbnf+0x78>
 8004e5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e62:	ee00 3a10 	vmov	s0, r3
 8004e66:	4770      	bx	lr
 8004e68:	f112 0f16 	cmn.w	r2, #22
 8004e6c:	da1a      	bge.n	8004ea4 <scalbnf+0xb4>
 8004e6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e72:	4298      	cmp	r0, r3
 8004e74:	ee10 3a10 	vmov	r3, s0
 8004e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7c:	dd0a      	ble.n	8004e94 <scalbnf+0xa4>
 8004e7e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004ec0 <scalbnf+0xd0>
 8004e82:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004ec4 <scalbnf+0xd4>
 8004e86:	eef0 7a40 	vmov.f32	s15, s0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bf18      	it	ne
 8004e8e:	eeb0 0a47 	vmovne.f32	s0, s14
 8004e92:	e7db      	b.n	8004e4c <scalbnf+0x5c>
 8004e94:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004ec8 <scalbnf+0xd8>
 8004e98:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ecc <scalbnf+0xdc>
 8004e9c:	eef0 7a40 	vmov.f32	s15, s0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	e7f3      	b.n	8004e8c <scalbnf+0x9c>
 8004ea4:	3219      	adds	r2, #25
 8004ea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004eaa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004eae:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ed0 <scalbnf+0xe0>
 8004eb2:	ee07 3a10 	vmov	s14, r3
 8004eb6:	e7c4      	b.n	8004e42 <scalbnf+0x52>
 8004eb8:	ffff3cb0 	.word	0xffff3cb0
 8004ebc:	4c000000 	.word	0x4c000000
 8004ec0:	7149f2ca 	.word	0x7149f2ca
 8004ec4:	f149f2ca 	.word	0xf149f2ca
 8004ec8:	0da24260 	.word	0x0da24260
 8004ecc:	8da24260 	.word	0x8da24260
 8004ed0:	33000000 	.word	0x33000000

08004ed4 <_init>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr

08004ee0 <_fini>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr
