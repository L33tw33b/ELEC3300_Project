
ELEC3300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b0  080086b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b8  080086b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080086c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a40  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad0  20000ad0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1a5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ff7  00000000  00000000  0003a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b8  00000000  00000000  0003f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f74  00000000  00000000  00040740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab87  00000000  00000000  000656b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce950  00000000  00000000  0008023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eb8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000512c  00000000  00000000  0014ebdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008670 	.word	0x08008670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008670 	.word	0x08008670

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ApplicationTypeDef last_Appli_state = Appli_state;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <main+0x50>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fcc4 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f820 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f92e 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 f90c 	bl	8000700 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e8:	f000 f884 	bl	80005f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ec:	f000 f8b0 	bl	8000650 <MX_I2S3_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8dc 	bl	80006ac <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004f4:	f007 fc74 	bl	8007de0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f007 fc98 	bl	8007e2c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if(last_Appli_state != Appli_state) {
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <main+0x50>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	79fa      	ldrb	r2, [r7, #7]
 8000502:	429a      	cmp	r2, r3
 8000504:	d0f8      	beq.n	80004f8 <main+0x2c>
      last_Appli_state = Appli_state;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <main+0x50>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	71fb      	strb	r3, [r7, #7]

      if(Appli_state == APPLICATION_READY) {
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <main+0x50>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d1f1      	bne.n	80004f8 <main+0x2c>
        start_midi();
 8000514:	f000 f9e6 	bl	80008e4 <start_midi>
    MX_USB_HOST_Process();
 8000518:	e7ee      	b.n	80004f8 <main+0x2c>
 800051a:	bf00      	nop
 800051c:	200000b0 	.word	0x200000b0

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 ff98 	bl	8008464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fc75 	bl	8003e94 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f994 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fed6 	bl	8004384 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f97d 	bl	80008dc <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_I2C1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_I2C1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x50>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_I2C1_Init+0x58>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_I2C1_Init+0x50>)
 8000612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_I2C1_Init+0x50>)
 8000632:	f002 fe69 	bl	8003308 <HAL_I2C_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f94e 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000d0 	.word	0x200000d0
 8000648:	40005400 	.word	0x40005400
 800064c:	000186a0 	.word	0x000186a0

08000650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <MX_I2S3_Init+0x58>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000678:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800067c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2S3_Init+0x54>)
 8000692:	f002 ff7d 	bl	8003590 <HAL_I2S_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800069c:	f000 f91e 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200001cc 	.word	0x200001cc
 80006a8:	40003c00 	.word	0x40003c00

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f004 f9ae 	bl	8004a44 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f8f5 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000184 	.word	0x20000184
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_DMA_Init+0x3c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <MX_DMA_Init+0x3c>)
 8000710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_DMA_Init+0x3c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2010      	movs	r0, #16
 8000728:	f000 fd0d 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800072c:	2010      	movs	r0, #16
 800072e:	f000 fd26 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b5b      	ldr	r3, [pc, #364]	; (80008c8 <MX_GPIO_Init+0x188>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a5a      	ldr	r2, [pc, #360]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b58      	ldr	r3, [pc, #352]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <MX_GPIO_Init+0x188>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a4c      	ldr	r2, [pc, #304]	; (80008c8 <MX_GPIO_Init+0x188>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a45      	ldr	r2, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a3e      	ldr	r2, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a37      	ldr	r2, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2108      	movs	r1, #8
 8000802:	4832      	ldr	r0, [pc, #200]	; (80008cc <MX_GPIO_Init+0x18c>)
 8000804:	f001 f95c 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_Power_GPIO_Port, OTG_FS_Power_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	4830      	ldr	r0, [pc, #192]	; (80008d0 <MX_GPIO_Init+0x190>)
 800080e:	f001 f957 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000812:	2200      	movs	r2, #0
 8000814:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000818:	482e      	ldr	r0, [pc, #184]	; (80008d4 <MX_GPIO_Init+0x194>)
 800081a:	f001 f951 	bl	8001ac0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <MX_GPIO_Init+0x18c>)
 8000836:	f000 ffa7 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_Power_Pin */
  GPIO_InitStruct.Pin = OTG_FS_Power_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_Power_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <MX_GPIO_Init+0x190>)
 8000852:	f000 ff99 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000856:	2304      	movs	r3, #4
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	481b      	ldr	r0, [pc, #108]	; (80008d8 <MX_GPIO_Init+0x198>)
 800086a:	f000 ff8d 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800086e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000872:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x194>)
 8000888:	f000 ff7e 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_GPIO_Init+0x194>)
 80008a0:	f000 ff72 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0x18c>)
 80008ba:	f000 ff65 	bl	8001788 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40020400 	.word	0x40020400

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x4>
	...

080008e4 <start_midi>:

extern USBH_HandleTypeDef hUsbHostFS;
uint8_t MIDI_RX_Buffer[RX_BUFF_SIZE]; // MIDI reception buffer

void start_midi(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	4903      	ldr	r1, [pc, #12]	; (80008f8 <start_midi+0x14>)
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <start_midi+0x18>)
 80008ee:	f005 fd1c 	bl	800632a <USBH_MIDI_Receive>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002e0 	.word	0x200002e0
 80008fc:	20000324 	.word	0x20000324

08000900 <USBH_MIDI_ReceiveCallback>:

void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  // each USB midi package is 4 bytes long
  uint16_t numberOfPackets = USBH_MIDI_GetLastReceivedDataSize(&hUsbHostFS) / 4;
 8000908:	4818      	ldr	r0, [pc, #96]	; (800096c <USBH_MIDI_ReceiveCallback+0x6c>)
 800090a:	f005 fcf2 	bl	80062f2 <USBH_MIDI_GetLastReceivedDataSize>
 800090e:	4603      	mov	r3, r0
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	81bb      	strh	r3, [r7, #12]
  //printf("midi received %d packets.\r\n", numberOfPackets);
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8000914:	2300      	movs	r3, #0
 8000916:	81fb      	strh	r3, [r7, #14]
 8000918:	e01b      	b.n	8000952 <USBH_MIDI_ReceiveCallback+0x52>
    uint8_t cin_cable   = MIDI_RX_Buffer[4*i+0];
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <USBH_MIDI_ReceiveCallback+0x70>)
 8000920:	5cd3      	ldrb	r3, [r2, r3]
 8000922:	72fb      	strb	r3, [r7, #11]
    uint8_t midi_cmd    = MIDI_RX_Buffer[4*i+1];
 8000924:	89fb      	ldrh	r3, [r7, #14]
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	3301      	adds	r3, #1
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <USBH_MIDI_ReceiveCallback+0x70>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	72bb      	strb	r3, [r7, #10]
    uint8_t midi_param0 = MIDI_RX_Buffer[4*i+2];
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	3302      	adds	r3, #2
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <USBH_MIDI_ReceiveCallback+0x70>)
 8000938:	5cd3      	ldrb	r3, [r2, r3]
 800093a:	727b      	strb	r3, [r7, #9]
    uint8_t midi_param1 = MIDI_RX_Buffer[4*i+3];
 800093c:	89fb      	ldrh	r3, [r7, #14]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	3303      	adds	r3, #3
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <USBH_MIDI_ReceiveCallback+0x70>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	723b      	strb	r3, [r7, #8]
    if(cin_cable == 0) {
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	2b00      	cmp	r3, #0
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	3301      	adds	r3, #1
 8000950:	81fb      	strh	r3, [r7, #14]
 8000952:	89fa      	ldrh	r2, [r7, #14]
 8000954:	89bb      	ldrh	r3, [r7, #12]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3df      	bcc.n	800091a <USBH_MIDI_ReceiveCallback+0x1a>
      continue;
    }
    //decode_midi(i, midi_cmd, midi_param0, midi_param1);
  }
  // start a new reception
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	4904      	ldr	r1, [pc, #16]	; (8000970 <USBH_MIDI_ReceiveCallback+0x70>)
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <USBH_MIDI_ReceiveCallback+0x6c>)
 8000960:	f005 fce3 	bl	800632a <USBH_MIDI_Receive>
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000324 	.word	0x20000324
 8000970:	200002e0 	.word	0x200002e0

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fbbc 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12c      	bne.n	8000a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SDL_Pin|Audio_SDA_Pin;
 8000a02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <HAL_I2C_MspInit+0x8c>)
 8000a20:	f000 feb2 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_I2S_MspInit+0x164>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	f040 8094 	bne.w	8000bae <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000a8a:	2332      	movs	r3, #50	; 0x32
 8000a8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fe94 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000aa2:	f7ff ff1b 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b44      	ldr	r3, [pc, #272]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a3c      	ldr	r2, [pc, #240]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a35      	ldr	r2, [pc, #212]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_I2S_MspInit+0x168>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000afa:	2310      	movs	r3, #16
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <HAL_I2S_MspInit+0x16c>)
 8000b16:	f000 fe37 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000b1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <HAL_I2S_MspInit+0x170>)
 8000b38:	f000 fe26 	bl	8001788 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_I2S_MspInit+0x178>)
 8000b40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b4a:	2240      	movs	r2, #64	; 0x40
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b72:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000b94:	f000 fb0e 	bl	80011b4 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000b9e:	f7ff fe9d 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2S_MspInit+0x174>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40003c00 	.word	0x40003c00
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	40026088 	.word	0x40026088

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fd9f 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f92c 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8000cba:	f000 fb29 	bl	8001310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000124 	.word	0x20000124

08000cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <OTG_FS_IRQHandler+0x10>)
 8000cce:	f001 f97b 	bl	8001fc8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200007cc 	.word	0x200007cc

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f007 fb70 	bl	80083f0 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	20000ad0 	.word	0x20000ad0

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f007 fb2f 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fb95 	bl	80004cc <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000db0:	080086c0 	.word	0x080086c0
  ldr r2, =_sbss
 8000db4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000db8:	20000ad0 	.word	0x20000ad0

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_I2S_TxCpltCallback+0x20>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8000dd2:	f000 f807 	bl	8000de4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40003c00 	.word	0x40003c00

08000de4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8000e08:	f000 f804 	bl	8000e14 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2S_ErrorCallback+0x2c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8000e42:	f7ff ffd6 	bl	8000df2 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <HAL_I2S_ErrorCallback+0x30>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8000e50:	f7ff ffe7 	bl	8000e22 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40003c00 	.word	0x40003c00
 8000e60:	40003800 	.word	0x40003800

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f94f 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f808 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fd6c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f967 	bl	800119a <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f92f 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000320 	.word	0x20000320

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000320 	.word	0x20000320

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff feb6 	bl	8000f30 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e099      	b.n	8001304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f0:	e00f      	b.n	8001212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f2:	f7ff fe9d 	bl	8000f30 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d908      	bls.n	8001212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2220      	movs	r2, #32
 8001204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e078      	b.n	8001304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e8      	bne.n	80011f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_DMA_Init+0x158>)
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	2b04      	cmp	r3, #4
 800126a:	d107      	bne.n	800127c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4313      	orrs	r3, r2
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f023 0307 	bic.w	r3, r3, #7
 8001292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4313      	orrs	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d117      	bne.n	80012d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00e      	beq.n	80012d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9e9 	bl	8001690 <DMA_CheckFifoParam>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012d2:	2301      	movs	r3, #1
 80012d4:	e016      	b.n	8001304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f9a0 	bl	8001624 <DMA_CalcBaseAndBitshift>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	223f      	movs	r2, #63	; 0x3f
 80012ee:	409a      	lsls	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f010803f 	.word	0xf010803f

08001310 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800131c:	4b8e      	ldr	r3, [pc, #568]	; (8001558 <HAL_DMA_IRQHandler+0x248>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a8e      	ldr	r2, [pc, #568]	; (800155c <HAL_DMA_IRQHandler+0x24c>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0a9b      	lsrs	r3, r3, #10
 8001328:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2208      	movs	r2, #8
 800133c:	409a      	lsls	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01a      	beq.n	800137c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0204 	bic.w	r2, r2, #4
 8001362:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	2208      	movs	r2, #8
 800136a:	409a      	lsls	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2201      	movs	r2, #1
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	f043 0202 	orr.w	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2204      	movs	r2, #4
 80013b8:	409a      	lsls	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d012      	beq.n	80013e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2204      	movs	r2, #4
 80013d6:	409a      	lsls	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0204 	orr.w	r2, r3, #4
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2210      	movs	r2, #16
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d043      	beq.n	8001480 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d03c      	beq.n	8001480 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2210      	movs	r2, #16
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d018      	beq.n	8001452 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d108      	bne.n	8001440 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	d024      	beq.n	8001480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
 800143e:	e01f      	b.n	8001480 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01b      	beq.n	8001480 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
 8001450:	e016      	b.n	8001480 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0208 	bic.w	r2, r2, #8
 800146e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	2220      	movs	r2, #32
 8001486:	409a      	lsls	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 808f 	beq.w	80015b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8087 	beq.w	80015b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2220      	movs	r2, #32
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b05      	cmp	r3, #5
 80014b8:	d136      	bne.n	8001528 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0216 	bic.w	r2, r2, #22
 80014c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <HAL_DMA_IRQHandler+0x1da>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0208 	bic.w	r2, r2, #8
 80014f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	223f      	movs	r2, #63	; 0x3f
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800151a:	2b00      	cmp	r3, #0
 800151c:	d07e      	beq.n	800161c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	4798      	blx	r3
        }
        return;
 8001526:	e079      	b.n	800161c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01d      	beq.n	8001572 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10d      	bne.n	8001560 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	2b00      	cmp	r3, #0
 800154a:	d031      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	4798      	blx	r3
 8001554:	e02c      	b.n	80015b0 <HAL_DMA_IRQHandler+0x2a0>
 8001556:	bf00      	nop
 8001558:	20000000 	.word	0x20000000
 800155c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e01e      	b.n	80015b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10f      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0210 	bic.w	r2, r2, #16
 800158e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d032      	beq.n	800161e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d022      	beq.n	800160a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2205      	movs	r2, #5
 80015c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d307      	bcc.n	80015f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f2      	bne.n	80015dc <HAL_DMA_IRQHandler+0x2cc>
 80015f6:	e000      	b.n	80015fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
 800161a:	e000      	b.n	800161e <HAL_DMA_IRQHandler+0x30e>
        return;
 800161c:	bf00      	nop
    }
  }
}
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3b10      	subs	r3, #16
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <DMA_CalcBaseAndBitshift+0x64>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <DMA_CalcBaseAndBitshift+0x68>)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d909      	bls.n	8001666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	1d1a      	adds	r2, r3, #4
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	659a      	str	r2, [r3, #88]	; 0x58
 8001664:	e007      	b.n	8001676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	aaaaaaab 	.word	0xaaaaaaab
 800168c:	080086a8 	.word	0x080086a8

08001690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11f      	bne.n	80016ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d856      	bhi.n	800175e <DMA_CheckFifoParam+0xce>
 80016b0:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <DMA_CheckFifoParam+0x28>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080016db 	.word	0x080016db
 80016c0:	080016c9 	.word	0x080016c9
 80016c4:	0800175f 	.word	0x0800175f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d046      	beq.n	8001762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d8:	e043      	b.n	8001762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016e2:	d140      	bne.n	8001766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e8:	e03d      	b.n	8001766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f2:	d121      	bne.n	8001738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d837      	bhi.n	800176a <DMA_CheckFifoParam+0xda>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <DMA_CheckFifoParam+0x70>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	08001711 	.word	0x08001711
 8001704:	08001717 	.word	0x08001717
 8001708:	08001711 	.word	0x08001711
 800170c:	08001729 	.word	0x08001729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
      break;
 8001714:	e030      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d025      	beq.n	800176e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001726:	e022      	b.n	800176e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001730:	d11f      	bne.n	8001772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001736:	e01c      	b.n	8001772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d903      	bls.n	8001746 <DMA_CheckFifoParam+0xb6>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d003      	beq.n	800174c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001744:	e018      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
      break;
 800174a:	e015      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00e      	beq.n	8001776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      break;
 800175c:	e00b      	b.n	8001776 <DMA_CheckFifoParam+0xe6>
      break;
 800175e:	bf00      	nop
 8001760:	e00a      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001762:	bf00      	nop
 8001764:	e008      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001766:	bf00      	nop
 8001768:	e006      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 800176a:	bf00      	nop
 800176c:	e004      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 800176e:	bf00      	nop
 8001770:	e002      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;   
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <DMA_CheckFifoParam+0xe8>
      break;
 8001776:	bf00      	nop
    }
  } 
  
  return status; 
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e16b      	b.n	8001a7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 815a 	bne.w	8001a76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80b4 	beq.w	8001a76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a5f      	ldr	r2, [pc, #380]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_GPIO_Init+0x310>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d02b      	beq.n	80019ae <HAL_GPIO_Init+0x226>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d025      	beq.n	80019aa <HAL_GPIO_Init+0x222>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x21e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x21a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_GPIO_Init+0x324>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x216>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_GPIO_Init+0x328>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x212>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x20a>
 800198e:	2307      	movs	r3, #7
 8001990:	e00e      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001992:	2308      	movs	r3, #8
 8001994:	e00c      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001996:	2306      	movs	r3, #6
 8001998:	e00a      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199a:	2305      	movs	r3, #5
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199e:	2304      	movs	r3, #4
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x310>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a32      	ldr	r2, [pc, #200]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f ae90 	bls.w	80017a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af4:	b08f      	sub	sp, #60	; 0x3c
 8001af6:	af0a      	add	r7, sp, #40	; 0x28
 8001af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e054      	b.n	8001bae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f006 f9bc 	bl	8007e9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2203      	movs	r2, #3
 8001b28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fab2 	bl	80050ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	687e      	ldr	r6, [r7, #4]
 8001b50:	466d      	mov	r5, sp
 8001b52:	f106 0410 	add.w	r4, r6, #16
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b66:	1d33      	adds	r3, r6, #4
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f003 fa2c 	bl	8004fc8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 faa9 	bl	80050ce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9a:	1d33      	adds	r3, r6, #4
 8001b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f003 fc32 	bl	8005408 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bb6:	b590      	push	{r4, r7, lr}
 8001bb8:	b089      	sub	sp, #36	; 0x24
 8001bba:	af04      	add	r7, sp, #16
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	70fb      	strb	r3, [r7, #3]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70bb      	strb	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_HCD_HC_Init+0x28>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e076      	b.n	8001ccc <HAL_HCD_HC_Init+0x116>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333d      	adds	r3, #61	; 0x3d
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3338      	adds	r3, #56	; 0x38
 8001c06:	787a      	ldrb	r2, [r7, #1]
 8001c08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3340      	adds	r3, #64	; 0x40
 8001c18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c1a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3339      	adds	r3, #57	; 0x39
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	333f      	adds	r3, #63	; 0x3f
 8001c3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	78ba      	ldrb	r2, [r7, #2]
 8001c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c4a:	b2d0      	uxtb	r0, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	333a      	adds	r3, #58	; 0x3a
 8001c58:	4602      	mov	r2, r0
 8001c5a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da09      	bge.n	8001c78 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	333b      	adds	r3, #59	; 0x3b
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e008      	b.n	8001c8a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	333b      	adds	r3, #59	; 0x3b
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	333c      	adds	r3, #60	; 0x3c
 8001c98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c9c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	787c      	ldrb	r4, [r7, #1]
 8001ca4:	78ba      	ldrb	r2, [r7, #2]
 8001ca6:	78f9      	ldrb	r1, [r7, #3]
 8001ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f003 fd2b 	bl	8005714 <USB_HC_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_HCD_HC_Halt+0x1e>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00f      	b.n	8001d12 <HAL_HCD_HC_Halt+0x3e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 ff7b 	bl	8005bfe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	70fb      	strb	r3, [r7, #3]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70bb      	strb	r3, [r7, #2]
 8001d32:	4613      	mov	r3, r2
 8001d34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	333b      	adds	r3, #59	; 0x3b
 8001d44:	78ba      	ldrb	r2, [r7, #2]
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	333f      	adds	r3, #63	; 0x3f
 8001d56:	787a      	ldrb	r2, [r7, #1]
 8001d58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d5a:	7c3b      	ldrb	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	333d      	adds	r3, #61	; 0x3d
 8001d80:	7f3a      	ldrb	r2, [r7, #28]
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3342      	adds	r3, #66	; 0x42
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	f200 80c6 	bhi.w	8001f2c <HAL_HCD_HC_SubmitRequest+0x210>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001f19 	.word	0x08001f19
 8001db0:	08001e1d 	.word	0x08001e1d
 8001db4:	08001e9b 	.word	0x08001e9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80b8 	bne.w	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80b4 	bne.w	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001dc8:	8b3b      	ldrh	r3, [r7, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d108      	bne.n	8001de0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3355      	adds	r3, #85	; 0x55
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3355      	adds	r3, #85	; 0x55
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3342      	adds	r3, #66	; 0x42
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e06:	e093      	b.n	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3342      	adds	r3, #66	; 0x42
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e089      	b.n	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11d      	bne.n	8001e5e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3355      	adds	r3, #85	; 0x55
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3342      	adds	r3, #66	; 0x42
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e48:	e073      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3342      	adds	r3, #66	; 0x42
 8001e58:	2202      	movs	r2, #2
 8001e5a:	701a      	strb	r2, [r3, #0]
      break;
 8001e5c:	e069      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3354      	adds	r3, #84	; 0x54
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
      break;
 8001e84:	e055      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
      break;
 8001e98:	e04b      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e9a:	78bb      	ldrb	r3, [r7, #2]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11d      	bne.n	8001edc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3355      	adds	r3, #85	; 0x55
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3342      	adds	r3, #66	; 0x42
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ec6:	e034      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e02a      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3354      	adds	r3, #84	; 0x54
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	3342      	adds	r3, #66	; 0x42
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      break;
 8001f02:	e016      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3342      	adds	r3, #66	; 0x42
 8001f12:	2202      	movs	r2, #2
 8001f14:	701a      	strb	r2, [r3, #0]
      break;
 8001f16:	e00c      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e000      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001f30:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3344      	adds	r3, #68	; 0x44
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	8b3a      	ldrh	r2, [r7, #24]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	202c      	movs	r0, #44	; 0x2c
 8001f4c:	fb00 f303 	mul.w	r3, r0, r3
 8001f50:	440b      	add	r3, r1
 8001f52:	334c      	adds	r3, #76	; 0x4c
 8001f54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3360      	adds	r3, #96	; 0x60
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3350      	adds	r3, #80	; 0x50
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3339      	adds	r3, #57	; 0x39
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3361      	adds	r3, #97	; 0x61
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	18d1      	adds	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f003 fcce 	bl	8005958 <USB_HC_StartXfer>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 f9cf 	bl	8005382 <USB_GetMode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 80f6 	bne.w	80021d8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 f9b3 	bl	800535c <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ec 	beq.w	80021d6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 f9aa 	bl	800535c <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002012:	d104      	bne.n	800201e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800201c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 f99a 	bl	800535c <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002032:	d104      	bne.n	800203e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800203c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 f98a 	bl	800535c <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002052:	d104      	bne.n	800205e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800205c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f97a 	bl	800535c <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2202      	movs	r2, #2
 8002078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 f96c 	bl	800535c <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208e:	d11c      	bne.n	80020ca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002098:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020aa:	2110      	movs	r1, #16
 80020ac:	6938      	ldr	r0, [r7, #16]
 80020ae:	f003 f85b 	bl	8005168 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020b2:	6938      	ldr	r0, [r7, #16]
 80020b4:	f003 f88c 	bl	80051d0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fa62 	bl	8005588 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 ff67 	bl	8007f98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 f944 	bl	800535c <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020de:	d102      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f001 f89e 	bl	8003222 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f936 	bl	800535c <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d106      	bne.n	8002108 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 ff30 	bl	8007f60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 f925 	bl	800535c <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d101      	bne.n	8002120 <HAL_HCD_IRQHandler+0x158>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_HCD_IRQHandler+0x15a>
 8002120:	2300      	movs	r3, #0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0210 	bic.w	r2, r2, #16
 8002134:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ffa1 	bl	800307e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0210 	orr.w	r2, r2, #16
 800214a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f903 	bl	800535c <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002160:	d13a      	bne.n	80021d8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fd38 	bl	8005bdc <USB_HC_ReadInterrupt>
 800216c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e025      	b.n	80021c0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219e:	d106      	bne.n	80021ae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8ab 	bl	8002302 <HCD_HC_IN_IRQHandler>
 80021ac:	e005      	b.n	80021ba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fbf9 	bl	80029ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3d4      	bcc.n	8002174 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	e000      	b.n	80021d8 <HAL_HCD_IRQHandler+0x210>
      return;
 80021d6:	bf00      	nop
    }
  }
}
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_HCD_Start+0x16>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e013      	b.n	800221c <HAL_HCD_Start+0x3e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fa24 	bl	8005650 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 ff3c 	bl	800508a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_HCD_Stop+0x16>
 8002236:	2302      	movs	r3, #2
 8002238:	e00d      	b.n	8002256 <HAL_HCD_Stop+0x32>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f003 fe12 	bl	8005e70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f9c6 	bl	80055fc <USB_ResetPort>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3360      	adds	r3, #96	; 0x60
 8002294:	781b      	ldrb	r3, [r3, #0]
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3350      	adds	r3, #80	; 0x50
 80022bc:	681b      	ldr	r3, [r3, #0]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fa0a 	bl	80056f0 <USB_GetCurrentFrame>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 f9e5 	bl	80056c2 <USB_GetHostSpeed>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d11a      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2304      	movs	r3, #4
 8002342:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3361      	adds	r3, #97	; 0x61
 8002352:	2206      	movs	r2, #6
 8002354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fc4c 	bl	8005bfe <USB_HC_Halt>
 8002366:	e0af      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d11b      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002392:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	2207      	movs	r2, #7
 80023a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fc24 	bl	8005bfe <USB_HC_Halt>
 80023b6:	e087      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d109      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2320      	movs	r3, #32
 80023de:	6093      	str	r3, [r2, #8]
 80023e0:	e072      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d11a      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2308      	movs	r3, #8
 8002408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3361      	adds	r3, #97	; 0x61
 8002418:	2205      	movs	r2, #5
 800241a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fbe9 	bl	8005bfe <USB_HC_Halt>
 800242c:	e04c      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	d11b      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002458:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3361      	adds	r3, #97	; 0x61
 8002468:	2208      	movs	r2, #8
 800246a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fbc1 	bl	8005bfe <USB_HC_Halt>
 800247c:	e024      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d119      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	2206      	movs	r2, #6
 80024b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fb9b 	bl	8005bfe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d112      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fb87 	bl	8005bfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002502:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002504:	e24e      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 80df 	bne.w	80026dc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3348      	adds	r3, #72	; 0x48
 8002534:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0159      	lsls	r1, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	440b      	add	r3, r1
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	202c      	movs	r0, #44	; 0x2c
 8002550:	fb00 f303 	mul.w	r3, r0, r3
 8002554:	440b      	add	r3, r1
 8002556:	3350      	adds	r3, #80	; 0x50
 8002558:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3361      	adds	r3, #97	; 0x61
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	335c      	adds	r3, #92	; 0x5c
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	333f      	adds	r3, #63	; 0x3f
 80025b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d111      	bne.n	80025dc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fb1b 	bl	8005bfe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2310      	movs	r3, #16
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	e03a      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d009      	beq.n	8002604 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333f      	adds	r3, #63	; 0x3f
 80025fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002600:	2b01      	cmp	r3, #1
 8002602:	d126      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	0151      	lsls	r1, r2, #5
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	440a      	add	r2, r1
 800261a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002622:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	b2d9      	uxtb	r1, r3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	202c      	movs	r0, #44	; 0x2c
 8002640:	fb00 f303 	mul.w	r3, r0, r3
 8002644:	4413      	add	r3, r2
 8002646:	3360      	adds	r3, #96	; 0x60
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fcb1 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d12b      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3348      	adds	r3, #72	; 0x48
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	202c      	movs	r0, #44	; 0x2c
 8002670:	fb00 f202 	mul.w	r2, r0, r2
 8002674:	440a      	add	r2, r1
 8002676:	3240      	adds	r2, #64	; 0x40
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	fbb3 f3f2 	udiv	r3, r3, r2
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 818e 	beq.w	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3354      	adds	r3, #84	; 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3354      	adds	r3, #84	; 0x54
 80026ac:	4602      	mov	r2, r0
 80026ae:	701a      	strb	r2, [r3, #0]
}
 80026b0:	e178      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3354      	adds	r3, #84	; 0x54
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3354      	adds	r3, #84	; 0x54
 80026d6:	4602      	mov	r2, r0
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	e163      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f040 80f6 	bne.w	80028e0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d109      	bne.n	800271c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3360      	adds	r3, #96	; 0x60
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e0c9      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d109      	bne.n	8002744 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	2205      	movs	r2, #5
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e0b5      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d009      	beq.n	800276c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3361      	adds	r3, #97	; 0x61
 8002766:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002768:	2b08      	cmp	r3, #8
 800276a:	d150      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	335c      	adds	r3, #92	; 0x5c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	202c      	movs	r0, #44	; 0x2c
 8002784:	fb00 f303 	mul.w	r3, r0, r3
 8002788:	440b      	add	r3, r1
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	335c      	adds	r3, #92	; 0x5c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d912      	bls.n	80027c8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	2204      	movs	r2, #4
 80027c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027c6:	e073      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3360      	adds	r3, #96	; 0x60
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027f0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027f8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800280c:	e050      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d122      	bne.n	8002868 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800284a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002852:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e023      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b07      	cmp	r3, #7
 800287a:	d119      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	335c      	adds	r3, #92	; 0x5c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	202c      	movs	r0, #44	; 0x2c
 8002894:	fb00 f303 	mul.w	r3, r0, r3
 8002898:	440b      	add	r3, r1
 800289a:	335c      	adds	r3, #92	; 0x5c
 800289c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2204      	movs	r2, #4
 80028ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2302      	movs	r3, #2
 80028c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	202c      	movs	r0, #44	; 0x2c
 80028cc:	fb00 f303 	mul.w	r3, r0, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3360      	adds	r3, #96	; 0x60
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f005 fb6b 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028de:	e061      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d156      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333f      	adds	r3, #63	; 0x3f
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d111      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f969 	bl	8005bfe <USB_HC_Halt>
 800292c:	e031      	b.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	333f      	adds	r3, #63	; 0x3f
 8002950:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11d      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d110      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3361      	adds	r3, #97	; 0x61
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f936 	bl	8005bfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	2310      	movs	r3, #16
 80029a2:	6093      	str	r3, [r2, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d11a      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2304      	movs	r3, #4
 80029ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3361      	adds	r3, #97	; 0x61
 80029fc:	2206      	movs	r2, #6
 80029fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 f8f7 	bl	8005bfe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a10:	e331      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d12e      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2320      	movs	r3, #32
 8002a38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333d      	adds	r3, #61	; 0x3d
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	f040 8313 	bne.w	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	333d      	adds	r3, #61	; 0x3d
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f8bd 	bl	8005bfe <USB_HC_Halt>
}
 8002a84:	e2f7      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d112      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 f89e 	bl	8005bfe <USB_HC_Halt>
}
 8002ac2:	e2d8      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d140      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d111      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333d      	adds	r3, #61	; 0x3d
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2301      	movs	r3, #1
 8002b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3361      	adds	r3, #97	; 0x61
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 f852 	bl	8005bfe <USB_HC_Halt>
}
 8002b5a:	e28c      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d12c      	bne.n	8002bcc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3361      	adds	r3, #97	; 0x61
 8002b80:	2204      	movs	r2, #4
 8002b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333d      	adds	r3, #61	; 0x3d
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f823 	bl	8005bfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	6093      	str	r3, [r2, #8]
}
 8002bca:	e254      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11a      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	; 0x61
 8002c02:	2205      	movs	r2, #5
 8002c04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fff4 	bl	8005bfe <USB_HC_Halt>
}
 8002c16:	e22e      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d140      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	2203      	movs	r2, #3
 8002c50:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	333d      	adds	r3, #61	; 0x3d
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d112      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333c      	adds	r3, #60	; 0x3c
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333d      	adds	r3, #61	; 0x3d
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 ffb1 	bl	8005bfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2310      	movs	r3, #16
 8002cac:	6093      	str	r3, [r2, #8]
}
 8002cae:	e1e2      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d164      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d111      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2206      	movs	r2, #6
 8002cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 ff87 	bl	8005bfe <USB_HC_Halt>
 8002cf0:	e044      	b.n	8002d7c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d920      	bls.n	8002d6a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	335c      	adds	r3, #92	; 0x5c
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	202c      	movs	r0, #44	; 0x2c
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f005 f926 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d68:	e008      	b.n	8002d7c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	6093      	str	r3, [r2, #8]
}
 8002d8e:	e172      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d11b      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	2208      	movs	r2, #8
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 ff1a 	bl	8005bfe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ddc:	6093      	str	r3, [r2, #8]
}
 8002dde:	e14a      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	f040 813f 	bne.w	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d17d      	bne.n	8002f08 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333f      	adds	r3, #63	; 0x3f
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d00a      	beq.n	8002e48 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333f      	adds	r3, #63	; 0x3f
 8002e40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	f040 8100 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d113      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3355      	adds	r3, #85	; 0x55
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3355      	adds	r3, #85	; 0x55
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 80e3 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80d8 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	334c      	adds	r3, #76	; 0x4c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	202c      	movs	r0, #44	; 0x2c
 8002eae:	fb00 f202 	mul.w	r2, r0, r2
 8002eb2:	440a      	add	r2, r1
 8002eb4:	3240      	adds	r2, #64	; 0x40
 8002eb6:	8812      	ldrh	r2, [r2, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f202 	mul.w	r2, r0, r2
 8002ec6:	440a      	add	r2, r1
 8002ec8:	3240      	adds	r2, #64	; 0x40
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80b5 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3355      	adds	r3, #85	; 0x55
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f083 0301 	eor.w	r3, r3, #1
 8002ef2:	b2d8      	uxtb	r0, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3355      	adds	r3, #85	; 0x55
 8002f02:	4602      	mov	r2, r0
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e09f      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3361      	adds	r3, #97	; 0x61
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d109      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	; 0x60
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e08b      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3361      	adds	r3, #97	; 0x61
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d109      	bne.n	8002f58 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3360      	adds	r3, #96	; 0x60
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e077      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3361      	adds	r3, #97	; 0x61
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d109      	bne.n	8002f80 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e063      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3361      	adds	r3, #97	; 0x61
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d009      	beq.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d14f      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	202c      	movs	r0, #44	; 0x2c
 8002fc0:	fb00 f303 	mul.w	r3, r0, r3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	335c      	adds	r3, #92	; 0x5c
 8002fc8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	335c      	adds	r3, #92	; 0x5c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d912      	bls.n	8003004 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e021      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3360      	adds	r3, #96	; 0x60
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800302c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003034:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003042:	461a      	mov	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2302      	movs	r3, #2
 8003058:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	b2d9      	uxtb	r1, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	202c      	movs	r0, #44	; 0x2c
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	4413      	add	r3, r2
 800306a:	3360      	adds	r3, #96	; 0x60
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f004 ff9f 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08a      	sub	sp, #40	; 0x28
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	0c5b      	lsrs	r3, r3, #17
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d004      	beq.n	80030c4 <HCD_RXQLVL_IRQHandler+0x46>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	f000 80a9 	beq.w	8003214 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030c2:	e0aa      	b.n	800321a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80a6 	beq.w	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3344      	adds	r3, #68	; 0x44
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 809b 	beq.w	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3350      	adds	r3, #80	; 0x50
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	441a      	add	r2, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	202c      	movs	r0, #44	; 0x2c
 80030fc:	fb00 f303 	mul.w	r3, r0, r3
 8003100:	440b      	add	r3, r1
 8003102:	334c      	adds	r3, #76	; 0x4c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d87a      	bhi.n	8003200 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3344      	adds	r3, #68	; 0x44
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	b292      	uxth	r2, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f002 f8c2 	bl	80052ac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3344      	adds	r3, #68	; 0x44
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	441a      	add	r2, r3
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	202c      	movs	r0, #44	; 0x2c
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	440b      	add	r3, r1
 8003148:	3344      	adds	r3, #68	; 0x44
 800314a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	441a      	add	r2, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	440b      	add	r3, r1
 800316c:	3350      	adds	r3, #80	; 0x50
 800316e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	0cdb      	lsrs	r3, r3, #19
 8003180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003184:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3340      	adds	r3, #64	; 0x40
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4293      	cmp	r3, r2
 800319c:	d13c      	bne.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d039      	beq.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3354      	adds	r3, #84	; 0x54
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2d8      	uxtb	r0, r3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3354      	adds	r3, #84	; 0x54
 80031fa:	4602      	mov	r2, r0
 80031fc:	701a      	strb	r2, [r3, #0]
      break;
 80031fe:	e00b      	b.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2204      	movs	r2, #4
 8003210:	701a      	strb	r2, [r3, #0]
      break;
 8003212:	e001      	b.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003218:	bf00      	nop
  }
}
 800321a:	bf00      	nop
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800324e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d10b      	bne.n	8003272 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f004 fe89 	bl	8007f7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d132      	bne.n	80032e2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d126      	bne.n	80032dc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d113      	bne.n	80032be <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800329c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a0:	d106      	bne.n	80032b0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2102      	movs	r1, #2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f96d 	bl	8005588 <USB_InitFSLSPClkSel>
 80032ae:	e011      	b.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 f966 	bl	8005588 <USB_InitFSLSPClkSel>
 80032bc:	e00a      	b.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032cc:	461a      	mov	r2, r3
 80032ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032d2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f004 fe7b 	bl	8007fd0 <HAL_HCD_PortEnabled_Callback>
 80032da:	e002      	b.n	80032e2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f004 fe85 	bl	8007fec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d103      	bne.n	80032f4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f043 0320 	orr.w	r3, r3, #32
 80032f2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12b      	b.n	8003572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fb48 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 fa02 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_I2C_Init+0x274>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_I2C_Init+0x278>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_I2C_Init+0x27c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e7      	b.n	8003572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_I2C_Init+0x280>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_I2C_Init+0x274>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d802      	bhi.n	80033dc <HAL_I2C_Init+0xd4>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	e009      	b.n	80033f0 <HAL_I2C_Init+0xe8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a69      	ldr	r2, [pc, #420]	; (800358c <HAL_I2C_Init+0x284>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	3301      	adds	r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <HAL_I2C_Init+0x274>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d819      	bhi.n	8003444 <HAL_I2C_Init+0x13c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fbb1 f3f3 	udiv	r3, r1, r3
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003424:	400b      	ands	r3, r1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_I2C_Init+0x138>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e59      	subs	r1, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb1 f3f3 	udiv	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	e051      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003440:	2304      	movs	r3, #4
 8003442:	e04f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_I2C_Init+0x168>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x196>
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_I2C_Init+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e58      	subs	r0, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6911      	ldr	r1, [r2, #16]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	003d08ff 	.word	0x003d08ff
 8003588:	431bde83 	.word	0x431bde83
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e128      	b.n	80037f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a90      	ldr	r2, [pc, #576]	; (80037fc <HAL_I2S_Init+0x26c>)
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fa49 	bl	8000a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035d8:	f023 030f 	bic.w	r3, r3, #15
 80035dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2202      	movs	r2, #2
 80035e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d060      	beq.n	80036b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035f6:	2310      	movs	r3, #16
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e001      	b.n	8003600 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b20      	cmp	r3, #32
 8003606:	d802      	bhi.n	800360e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800360e:	2001      	movs	r0, #1
 8003610:	f001 f9ba 	bl	8004988 <HAL_RCCEx_GetPeriphCLKFreq>
 8003614:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d125      	bne.n	800366c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	3305      	adds	r3, #5
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e01f      	b.n	800368a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	fbb2 f2f3 	udiv	r2, r2, r3
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	3305      	adds	r3, #5
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e00e      	b.n	800368a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	3305      	adds	r3, #5
 8003688:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4a5c      	ldr	r2, [pc, #368]	; (8003800 <HAL_I2S_Init+0x270>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	08db      	lsrs	r3, r3, #3
 8003694:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e003      	b.n	80036b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80036b0:	2302      	movs	r3, #2
 80036b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d902      	bls.n	80036c4 <HAL_I2S_Init+0x134>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2bff      	cmp	r3, #255	; 0xff
 80036c2:	d907      	bls.n	80036d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e08f      	b.n	80037f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	ea42 0103 	orr.w	r1, r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036f2:	f023 030f 	bic.w	r3, r3, #15
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6851      	ldr	r1, [r2, #4]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6992      	ldr	r2, [r2, #24]
 800370a:	430a      	orrs	r2, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003716:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d161      	bne.n	80037e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_I2S_Init+0x274>)
 8003724:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a37      	ldr	r2, [pc, #220]	; (8003808 <HAL_I2S_Init+0x278>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_I2S_Init+0x1a4>
 8003730:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_I2S_Init+0x27c>)
 8003732:	e001      	b.n	8003738 <HAL_I2S_Init+0x1a8>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	4932      	ldr	r1, [pc, #200]	; (8003808 <HAL_I2S_Init+0x278>)
 8003740:	428a      	cmp	r2, r1
 8003742:	d101      	bne.n	8003748 <HAL_I2S_Init+0x1b8>
 8003744:	4a31      	ldr	r2, [pc, #196]	; (800380c <HAL_I2S_Init+0x27c>)
 8003746:	e001      	b.n	800374c <HAL_I2S_Init+0x1bc>
 8003748:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800374c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003750:	f023 030f 	bic.w	r3, r3, #15
 8003754:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <HAL_I2S_Init+0x278>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_I2S_Init+0x1d4>
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_I2S_Init+0x27c>)
 8003762:	e001      	b.n	8003768 <HAL_I2S_Init+0x1d8>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	2202      	movs	r2, #2
 800376a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_I2S_Init+0x278>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_I2S_Init+0x1ea>
 8003776:	4b25      	ldr	r3, [pc, #148]	; (800380c <HAL_I2S_Init+0x27c>)
 8003778:	e001      	b.n	800377e <HAL_I2S_Init+0x1ee>
 800377a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378a:	d003      	beq.n	8003794 <HAL_I2S_Init+0x204>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e001      	b.n	80037a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037be:	4313      	orrs	r3, r2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_I2S_Init+0x278>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_I2S_Init+0x24c>
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_I2S_Init+0x27c>)
 80037da:	e001      	b.n	80037e0 <HAL_I2S_Init+0x250>
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e0:	897a      	ldrh	r2, [r7, #10]
 80037e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	080038cb 	.word	0x080038cb
 8003800:	cccccccd 	.word	0xcccccccd
 8003804:	080039e1 	.word	0x080039e1
 8003808:	40003800 	.word	0x40003800
 800380c:	40003400 	.word	0x40003400

08003810 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10e      	bne.n	8003864 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003854:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd faae 	bl	8000dc0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	b292      	uxth	r2, r2
 8003880:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	1c9a      	adds	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10e      	bne.n	80038c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fd fa9f 	bl	8000e00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d13a      	bne.n	800395c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d109      	bne.n	8003904 <I2S_IRQHandler+0x3a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d102      	bne.n	8003904 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffb4 	bl	800386c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d126      	bne.n	800395c <I2S_IRQHandler+0x92>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d11f      	bne.n	800395c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fa6a 	bl	8000e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d136      	bne.n	80039d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d109      	bne.n	8003986 <I2S_IRQHandler+0xbc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d102      	bne.n	8003986 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff45 	bl	8003810 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d122      	bne.n	80039d6 <I2S_IRQHandler+0x10c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b20      	cmp	r3, #32
 800399c:	d11b      	bne.n	80039d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd fa2d 	bl	8000e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a92      	ldr	r2, [pc, #584]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039fa:	4b92      	ldr	r3, [pc, #584]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039fc:	e001      	b.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a8b      	ldr	r2, [pc, #556]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a18:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1a:	e001      	b.n	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a2c:	d004      	beq.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 8099 	bne.w	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d107      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f925 	bl	8003c9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9c8 	bl	8003dfc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d13a      	bne.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d035      	beq.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a8a:	4b6e      	ldr	r3, [pc, #440]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a8c:	e001      	b.n	8003a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4969      	ldr	r1, [pc, #420]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a9a:	428b      	cmp	r3, r1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a9e:	4b69      	ldr	r3, [pc, #420]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aa0:	e001      	b.n	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aaa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f9a2 	bl	8000e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	f040 80c3 	bne.w	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80bd 	beq.w	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a49      	ldr	r2, [pc, #292]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b20:	e001      	b.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4944      	ldr	r1, [pc, #272]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b2e:	428b      	cmp	r3, r1
 8003b30:	d101      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b32:	4b44      	ldr	r3, [pc, #272]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b34:	e001      	b.n	8003b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd f964 	bl	8000e30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b68:	e089      	b.n	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d107      	bne.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8be 	bl	8003d00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f8fd 	bl	8003d98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d12f      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02a      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4919      	ldr	r1, [pc, #100]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be2:	e001      	b.n	8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0202 	orr.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f914 	bl	8000e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d136      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d031      	beq.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c28:	e001      	b.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4902      	ldr	r1, [pc, #8]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c36:	428b      	cmp	r3, r1
 8003c38:	d106      	bne.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c3a:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c3c:	e006      	b.n	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c3e:	bf00      	nop
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0204 	orr.w	r2, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd f8da 	bl	8000e30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c7c:	e000      	b.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c7e:	bf00      	nop
}
 8003c80:	bf00      	nop
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c99      	adds	r1, r3, #2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6251      	str	r1, [r2, #36]	; 0x24
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d113      	bne.n	8003cf6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffc9 	bl	8003c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c99      	adds	r1, r3, #2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6251      	str	r1, [r2, #36]	; 0x24
 8003d12:	8819      	ldrh	r1, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <I2SEx_TxISR_I2SExt+0x90>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <I2SEx_TxISR_I2SExt+0x22>
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <I2SEx_TxISR_I2SExt+0x94>)
 8003d20:	e001      	b.n	8003d26 <I2SEx_TxISR_I2SExt+0x26>
 8003d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d26:	460a      	mov	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d121      	bne.n	8003d86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <I2SEx_TxISR_I2SExt+0x90>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <I2SEx_TxISR_I2SExt+0x50>
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <I2SEx_TxISR_I2SExt+0x94>)
 8003d4e:	e001      	b.n	8003d54 <I2SEx_TxISR_I2SExt+0x54>
 8003d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	490d      	ldr	r1, [pc, #52]	; (8003d90 <I2SEx_TxISR_I2SExt+0x90>)
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	d101      	bne.n	8003d64 <I2SEx_TxISR_I2SExt+0x64>
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <I2SEx_TxISR_I2SExt+0x94>)
 8003d62:	e001      	b.n	8003d68 <I2SEx_TxISR_I2SExt+0x68>
 8003d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff81 	bl	8003c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40003800 	.word	0x40003800
 8003d94:	40003400 	.word	0x40003400

08003d98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68d8      	ldr	r0, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	1c99      	adds	r1, r3, #2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003db0:	b282      	uxth	r2, r0
 8003db2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff4a 	bl	8003c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <I2SEx_RxISR_I2SExt+0x90>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <I2SEx_RxISR_I2SExt+0x16>
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <I2SEx_RxISR_I2SExt+0x94>)
 8003e10:	e001      	b.n	8003e16 <I2SEx_RxISR_I2SExt+0x1a>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e16:	68d8      	ldr	r0, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	1c99      	adds	r1, r3, #2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e22:	b282      	uxth	r2, r0
 8003e24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d121      	bne.n	8003e82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <I2SEx_RxISR_I2SExt+0x90>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <I2SEx_RxISR_I2SExt+0x50>
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <I2SEx_RxISR_I2SExt+0x94>)
 8003e4a:	e001      	b.n	8003e50 <I2SEx_RxISR_I2SExt+0x54>
 8003e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	490d      	ldr	r1, [pc, #52]	; (8003e8c <I2SEx_RxISR_I2SExt+0x90>)
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d101      	bne.n	8003e60 <I2SEx_RxISR_I2SExt+0x64>
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <I2SEx_RxISR_I2SExt+0x94>)
 8003e5e:	e001      	b.n	8003e64 <I2SEx_RxISR_I2SExt+0x68>
 8003e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff03 	bl	8003c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40003800 	.word	0x40003800
 8003e90:	40003400 	.word	0x40003400

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e267      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d075      	beq.n	8003f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb2:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d112      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	4b82      	ldr	r3, [pc, #520]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05b      	beq.n	8003f9c <HAL_RCC_OscConfig+0x108>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d157      	bne.n	8003f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e242      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x74>
 8003efa:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a75      	ldr	r2, [pc, #468]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e01d      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x98>
 8003f12:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6c      	ldr	r2, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	4b69      	ldr	r3, [pc, #420]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a65      	ldr	r2, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fc fff0 	bl	8000f30 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fc ffec 	bl	8000f30 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e207      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xc0>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fc ffdc 	bl	8000f30 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fc ffd8 	bl	8000f30 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1f3      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0xe8>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d063      	beq.n	8004072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d11c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x152>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e1c7      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	e03a      	b.n	8004072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <HAL_RCC_OscConfig+0x244>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fc ff91 	bl	8000f30 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004012:	f7fc ff8d 	bl	8000f30 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e1a8      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004024:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004030:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4925      	ldr	r1, [pc, #148]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
 8004044:	e015      	b.n	8004072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_OscConfig+0x244>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fc ff70 	bl	8000f30 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004054:	f7fc ff6c 	bl	8000f30 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e187      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d036      	beq.n	80040ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_RCC_OscConfig+0x248>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fc ff50 	bl	8000f30 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fc ff4c 	bl	8000f30 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e167      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x200>
 80040b2:	e01b      	b.n	80040ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_OscConfig+0x248>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fc ff39 	bl	8000f30 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	e00e      	b.n	80040e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fc ff35 	bl	8000f30 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d907      	bls.n	80040e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e150      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470000 	.word	0x42470000
 80040dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ea      	bne.n	80040c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8097 	beq.w	8004228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a7c      	ldr	r2, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b7a      	ldr	r3, [pc, #488]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b77      	ldr	r3, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b74      	ldr	r3, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fc fef5 	bl	8000f30 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fc fef1 	bl	8000f30 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e10c      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x2ea>
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a63      	ldr	r2, [pc, #396]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	e01c      	b.n	80041b8 <HAL_RCC_OscConfig+0x324>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x30c>
 8004186:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a5e      	ldr	r2, [pc, #376]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a5b      	ldr	r2, [pc, #364]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0x324>
 80041a0:	4b58      	ldr	r3, [pc, #352]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a57      	ldr	r2, [pc, #348]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 0304 	bic.w	r3, r3, #4
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fc feb6 	bl	8000f30 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fc feb2 	bl	8000f30 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0cb      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041de:	4b49      	ldr	r3, [pc, #292]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ee      	beq.n	80041c8 <HAL_RCC_OscConfig+0x334>
 80041ea:	e014      	b.n	8004216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ec:	f7fc fea0 	bl	8000f30 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7fc fe9c 	bl	8000f30 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0b5      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ee      	bne.n	80041f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421c:	4b39      	ldr	r3, [pc, #228]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4a38      	ldr	r2, [pc, #224]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80a1 	beq.w	8004374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004232:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b08      	cmp	r3, #8
 800423c:	d05c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d141      	bne.n	80042ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_OscConfig+0x478>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fc fe70 	bl	8000f30 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004254:	f7fc fe6c 	bl	8000f30 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e087      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	3b01      	subs	r3, #1
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	491b      	ldr	r1, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_RCC_OscConfig+0x478>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fc fe45 	bl	8000f30 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fc fe41 	bl	8000f30 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e05c      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x416>
 80042c8:	e054      	b.n	8004374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_RCC_OscConfig+0x478>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fc fe2e 	bl	8000f30 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fc fe2a 	bl	8000f30 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e045      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x444>
 80042f6:	e03d      	b.n	8004374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e038      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x4ec>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d028      	beq.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d121      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11a      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	3b01      	subs	r3, #1
 800435a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0cc      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004398:	4b68      	ldr	r3, [pc, #416]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d90c      	bls.n	80043c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b65      	ldr	r3, [pc, #404]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0b8      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a58      	ldr	r2, [pc, #352]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f0:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043fc:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	494d      	ldr	r1, [pc, #308]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d044      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d119      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d003      	beq.n	8004442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443e:	2b03      	cmp	r3, #3
 8004440:	d107      	bne.n	8004452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e06f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e067      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004462:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f023 0203 	bic.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4934      	ldr	r1, [pc, #208]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004474:	f7fc fd5c 	bl	8000f30 <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fc fd58 	bl	8000f30 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e04f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 020c 	and.w	r2, r3, #12
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1eb      	bne.n	800447c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d20c      	bcs.n	80044cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e032      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	490e      	ldr	r1, [pc, #56]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800450a:	f000 f821 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800450e:	4602      	mov	r2, r0
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	490a      	ldr	r1, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fcbc 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00
 8004540:	40023800 	.word	0x40023800
 8004544:	08008690 	.word	0x08008690
 8004548:	20000000 	.word	0x20000000
 800454c:	20000004 	.word	0x20000004

08004550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004554:	b094      	sub	sp, #80	; 0x50
 8004556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	2300      	movs	r3, #0
 800455e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004560:	2300      	movs	r3, #0
 8004562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004568:	4b79      	ldr	r3, [pc, #484]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b08      	cmp	r3, #8
 8004572:	d00d      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x40>
 8004574:	2b08      	cmp	r3, #8
 8004576:	f200 80e1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x1ec>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x34>
 800457e:	2b04      	cmp	r3, #4
 8004580:	d003      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x3a>
 8004582:	e0db      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b73      	ldr	r3, [pc, #460]	; (8004754 <HAL_RCC_GetSysClockFreq+0x204>)
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004588:	e0db      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800458a:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_GetSysClockFreq+0x208>)
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800458e:	e0d8      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004590:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004598:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800459a:	4b6d      	ldr	r3, [pc, #436]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a6:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	2200      	movs	r2, #0
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ba:	2300      	movs	r3, #0
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
 80045be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045c2:	4622      	mov	r2, r4
 80045c4:	462b      	mov	r3, r5
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	0159      	lsls	r1, r3, #5
 80045d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d4:	0150      	lsls	r0, r2, #5
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4621      	mov	r1, r4
 80045dc:	1a51      	subs	r1, r2, r1
 80045de:	6139      	str	r1, [r7, #16]
 80045e0:	4629      	mov	r1, r5
 80045e2:	eb63 0301 	sbc.w	r3, r3, r1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f4:	4659      	mov	r1, fp
 80045f6:	018b      	lsls	r3, r1, #6
 80045f8:	4651      	mov	r1, sl
 80045fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045fe:	4651      	mov	r1, sl
 8004600:	018a      	lsls	r2, r1, #6
 8004602:	4651      	mov	r1, sl
 8004604:	ebb2 0801 	subs.w	r8, r2, r1
 8004608:	4659      	mov	r1, fp
 800460a:	eb63 0901 	sbc.w	r9, r3, r1
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800461a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800461e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004622:	4690      	mov	r8, r2
 8004624:	4699      	mov	r9, r3
 8004626:	4623      	mov	r3, r4
 8004628:	eb18 0303 	adds.w	r3, r8, r3
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	462b      	mov	r3, r5
 8004630:	eb49 0303 	adc.w	r3, r9, r3
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004642:	4629      	mov	r1, r5
 8004644:	024b      	lsls	r3, r1, #9
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464c:	4621      	mov	r1, r4
 800464e:	024a      	lsls	r2, r1, #9
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004656:	2200      	movs	r2, #0
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
 800465a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800465c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004660:	f7fb fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	e058      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	2200      	movs	r2, #0
 8004676:	4618      	mov	r0, r3
 8004678:	4611      	mov	r1, r2
 800467a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
 8004684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	f04f 0000 	mov.w	r0, #0
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	0159      	lsls	r1, r3, #5
 8004696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800469a:	0150      	lsls	r0, r2, #5
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4641      	mov	r1, r8
 80046a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046c0:	ebb2 040a 	subs.w	r4, r2, sl
 80046c4:	eb63 050b 	sbc.w	r5, r3, fp
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	00eb      	lsls	r3, r5, #3
 80046d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d6:	00e2      	lsls	r2, r4, #3
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	18e3      	adds	r3, r4, r3
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	464b      	mov	r3, r9
 80046e4:	eb45 0303 	adc.w	r3, r5, r3
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046f6:	4629      	mov	r1, r5
 80046f8:	028b      	lsls	r3, r1, #10
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004700:	4621      	mov	r1, r4
 8004702:	028a      	lsls	r2, r1, #10
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	2200      	movs	r2, #0
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	61fa      	str	r2, [r7, #28]
 8004710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004714:	f7fb fd58 	bl	80001c8 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_GetSysClockFreq+0x200>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetSysClockFreq+0x204>)
 800473e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004744:	4618      	mov	r0, r3
 8004746:	3750      	adds	r7, #80	; 0x50
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00f42400 	.word	0x00f42400
 8004758:	007a1200 	.word	0x007a1200

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_GetHCLKFreq+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000000 	.word	0x20000000

08004774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004778:	f7ff fff0 	bl	800475c <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	0a9b      	lsrs	r3, r3, #10
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4903      	ldr	r1, [pc, #12]	; (8004798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800
 8004798:	080086a0 	.word	0x080086a0

0800479c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047a0:	f7ff ffdc 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0b5b      	lsrs	r3, r3, #13
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	; (80047c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	080086a0 	.word	0x080086a0

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d035      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ec:	4b62      	ldr	r3, [pc, #392]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fb9d 	bl	8000f30 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047fa:	f7fc fb99 	bl	8000f30 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e0b0      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800480c:	4b5b      	ldr	r3, [pc, #364]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	019a      	lsls	r2, r3, #6
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4955      	ldr	r1, [pc, #340]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800482c:	4b52      	ldr	r3, [pc, #328]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004832:	f7fc fb7d 	bl	8000f30 <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800483a:	f7fc fb79 	bl	8000f30 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e090      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b44      	ldr	r3, [pc, #272]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a43      	ldr	r2, [pc, #268]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004882:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800488e:	f7fc fb4f 	bl	8000f30 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fc fb4b 	bl	8000f30 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e062      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048a8:	4b35      	ldr	r3, [pc, #212]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d028      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048e8:	4a24      	ldr	r2, [pc, #144]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048ee:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d114      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fc fb19 	bl	8000f30 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004900:	e00a      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fc fb15 	bl	8000f30 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e02a      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ee      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004930:	d10d      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
 800494c:	e005      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004954:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004958:	6093      	str	r3, [r2, #8]
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004966:	4905      	ldr	r1, [pc, #20]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	4313      	orrs	r3, r2
 800496a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	42470068 	.word	0x42470068
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	42470e40 	.word	0x42470e40

08004988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d13e      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d12f      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049be:	617b      	str	r3, [r7, #20]
          break;
 80049c0:	e02f      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ce:	d108      	bne.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e007      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	0f1b      	lsrs	r3, r3, #28
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
          break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
          break;
 8004a20:	bf00      	nop
        }
      }
      break;
 8004a22:	bf00      	nop
    }
  }
  return frequency;
 8004a24:	697b      	ldr	r3, [r7, #20]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	00bb8000 	.word	0x00bb8000
 8004a3c:	007a1200 	.word	0x007a1200
 8004a40:	00f42400 	.word	0x00f42400

08004a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e03f      	b.n	8004ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc f8b0 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f829 	bl	8004ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae4:	b0c0      	sub	sp, #256	; 0x100
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	ea40 0301 	orr.w	r3, r0, r1
 8004b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b38:	f021 010c 	bic.w	r1, r1, #12
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b46:	430b      	orrs	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	6999      	ldr	r1, [r3, #24]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	ea40 0301 	orr.w	r3, r0, r1
 8004b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <UART_SetConfig+0x2cc>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0xa0>
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	; (8004db0 <UART_SetConfig+0x2d0>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7ff fe0c 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8004b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b88:	e003      	b.n	8004b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7ff fdf3 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8004b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9c:	f040 810c 	bne.w	8004db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	eb12 0801 	adds.w	r8, r2, r1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb43 0901 	adc.w	r9, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be2:	4690      	mov	r8, r2
 8004be4:	4699      	mov	r9, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	eb18 0303 	adds.w	r3, r8, r3
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	eb49 0303 	adc.w	r3, r9, r3
 8004bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0e:	460b      	mov	r3, r1
 8004c10:	18db      	adds	r3, r3, r3
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
 8004c14:	4613      	mov	r3, r2
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c24:	f7fb fad0 	bl	80001c8 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c50:	415b      	adcs	r3, r3
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c58:	4641      	mov	r1, r8
 8004c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0b01 	adc.w	fp, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	4692      	mov	sl, r2
 8004c7a:	469b      	mov	fp, r3
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb4b 0303 	adc.w	r3, fp, r3
 8004c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cba:	f7fb fa85 	bl	80001c8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	; 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce8:	441c      	add	r4, r3
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d04:	415b      	adcs	r3, r3
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6339      	str	r1, [r7, #48]	; 0x30
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d76:	f7fb fa27 	bl	80001c8 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da8:	e105      	b.n	8004fb6 <UART_SetConfig+0x4d6>
 8004daa:	bf00      	nop
 8004dac:	40011000 	.word	0x40011000
 8004db0:	40011400 	.word	0x40011400
 8004db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	6239      	str	r1, [r7, #32]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	eb43 0501 	adc.w	r5, r3, r1
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e00:	464b      	mov	r3, r9
 8004e02:	eb45 0303 	adc.w	r3, r5, r3
 8004e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e26:	4629      	mov	r1, r5
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e30:	4621      	mov	r1, r4
 8004e32:	008a      	lsls	r2, r1, #2
 8004e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e38:	f7fb f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b60      	ldr	r3, [pc, #384]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011c      	lsls	r4, r3, #4
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	61b9      	str	r1, [r7, #24]
 8004e64:	415b      	adcs	r3, r3
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	1851      	adds	r1, r2, r1
 8004e70:	6139      	str	r1, [r7, #16]
 8004e72:	4649      	mov	r1, r9
 8004e74:	414b      	adcs	r3, r1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e84:	4659      	mov	r1, fp
 8004e86:	00cb      	lsls	r3, r1, #3
 8004e88:	4651      	mov	r1, sl
 8004e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8e:	4651      	mov	r1, sl
 8004e90:	00ca      	lsls	r2, r1, #3
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	008b      	lsls	r3, r1, #2
 8004ec8:	4641      	mov	r1, r8
 8004eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ece:	4641      	mov	r1, r8
 8004ed0:	008a      	lsls	r2, r1, #2
 8004ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed6:	f7fb f977 	bl	80001c8 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	; 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	3332      	adds	r3, #50	; 0x32
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efe:	441c      	add	r4, r3
 8004f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f04:	2200      	movs	r2, #0
 8004f06:	673b      	str	r3, [r7, #112]	; 0x70
 8004f08:	677a      	str	r2, [r7, #116]	; 0x74
 8004f0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0e:	4642      	mov	r2, r8
 8004f10:	464b      	mov	r3, r9
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	415b      	adcs	r3, r3
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1e:	4641      	mov	r1, r8
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	6039      	str	r1, [r7, #0]
 8004f24:	4649      	mov	r1, r9
 8004f26:	414b      	adcs	r3, r1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f36:	4659      	mov	r1, fp
 8004f38:	00cb      	lsls	r3, r1, #3
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f40:	4651      	mov	r1, sl
 8004f42:	00ca      	lsls	r2, r1, #3
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	189b      	adds	r3, r3, r2
 8004f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f50:	464b      	mov	r3, r9
 8004f52:	460a      	mov	r2, r1
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	663b      	str	r3, [r7, #96]	; 0x60
 8004f64:	667a      	str	r2, [r7, #100]	; 0x64
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f72:	4649      	mov	r1, r9
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	4641      	mov	r1, r8
 8004f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	008a      	lsls	r2, r1, #2
 8004f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f84:	f7fb f920 	bl	80001c8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2164      	movs	r1, #100	; 0x64
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4422      	add	r2, r4
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc8:	b084      	sub	sp, #16
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	f107 001c 	add.w	r0, r7, #28
 8004fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d122      	bne.n	8005026 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9c0 	bl	80053a0 <USB_CoreReset>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e01a      	b.n	800505c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9b4 	bl	80053a0 <USB_CoreReset>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
 800504e:	e005      	b.n	800505c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10b      	bne.n	800507a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f043 0206 	orr.w	r2, r3, #6
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005086:	b004      	add	sp, #16
 8005088:	4770      	bx	lr

0800508a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f023 0201 	bic.w	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d115      	bne.n	800511c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050fc:	2001      	movs	r0, #1
 80050fe:	f7fb ff23 	bl	8000f48 <HAL_Delay>
      ms++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f93a 	bl	8005382 <USB_GetMode>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d01e      	beq.n	8005152 <USB_SetCurrentMode+0x84>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b31      	cmp	r3, #49	; 0x31
 8005118:	d9f0      	bls.n	80050fc <USB_SetCurrentMode+0x2e>
 800511a:	e01a      	b.n	8005152 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d115      	bne.n	800514e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800512e:	2001      	movs	r0, #1
 8005130:	f7fb ff0a 	bl	8000f48 <HAL_Delay>
      ms++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f921 	bl	8005382 <USB_GetMode>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <USB_SetCurrentMode+0x84>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b31      	cmp	r3, #49	; 0x31
 800514a:	d9f0      	bls.n	800512e <USB_SetCurrentMode+0x60>
 800514c:	e001      	b.n	8005152 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e005      	b.n	800515e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b32      	cmp	r3, #50	; 0x32
 8005156:	d101      	bne.n	800515c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3301      	adds	r3, #1
 800517a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <USB_FlushTxFifo+0x64>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e01b      	b.n	80051c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	daf2      	bge.n	8005176 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	019b      	lsls	r3, r3, #6
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <USB_FlushTxFifo+0x64>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e006      	b.n	80051c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d0f0      	beq.n	80051a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	00030d40 	.word	0x00030d40

080051d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <USB_FlushRxFifo+0x5c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e018      	b.n	8005220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	daf2      	bge.n	80051dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2210      	movs	r2, #16
 80051fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a08      	ldr	r2, [pc, #32]	; (800522c <USB_FlushRxFifo+0x5c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e006      	b.n	8005220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d0f0      	beq.n	8005200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	00030d40 	.word	0x00030d40

08005230 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	460b      	mov	r3, r1
 8005240:	71fb      	strb	r3, [r7, #7]
 8005242:	4613      	mov	r3, r2
 8005244:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800524e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d123      	bne.n	800529e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005256:	88bb      	ldrh	r3, [r7, #4]
 8005258:	3303      	adds	r3, #3
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e018      	b.n	8005296 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	031a      	lsls	r2, r3, #12
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	461a      	mov	r2, r3
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3301      	adds	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3e2      	bcc.n	8005264 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3724      	adds	r7, #36	; 0x24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b08b      	sub	sp, #44	; 0x2c
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	e014      	b.n	8005302 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	3301      	adds	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	3301      	adds	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	3301      	adds	r3, #1
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	3301      	adds	r3, #1
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	429a      	cmp	r2, r3
 8005308:	d3e6      	bcc.n	80052d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800530a:	8bfb      	ldrh	r3, [r7, #30]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01e      	beq.n	800534e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531a:	461a      	mov	r2, r3
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	b2da      	uxtb	r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	701a      	strb	r2, [r3, #0]
      i++;
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	3301      	adds	r3, #1
 800533a:	623b      	str	r3, [r7, #32]
      pDest++;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	3301      	adds	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005342:	8bfb      	ldrh	r3, [r7, #30]
 8005344:	3b01      	subs	r3, #1
 8005346:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005348:	8bfb      	ldrh	r3, [r7, #30]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ea      	bne.n	8005324 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005350:	4618      	mov	r0, r3
 8005352:	372c      	adds	r7, #44	; 0x2c
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0301 	and.w	r3, r3, #1
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <USB_CoreReset+0x64>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e01b      	b.n	80053f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	daf2      	bge.n	80053ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <USB_CoreReset+0x64>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e006      	b.n	80053f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d0f0      	beq.n	80053d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	00030d40 	.word	0x00030d40

08005408 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005408:	b084      	sub	sp, #16
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10a      	bne.n	800547a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e014      	b.n	80054a4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e009      	b.n	80054a4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800549e:	f023 0304 	bic.w	r3, r3, #4
 80054a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054a4:	2110      	movs	r1, #16
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fe5e 	bl	8005168 <USB_FlushTxFifo>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fe8a 	bl	80051d0 <USB_FlushRxFifo>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e015      	b.n	80054f8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	461a      	mov	r2, r3
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	461a      	mov	r2, r3
 80054ee:	2300      	movs	r3, #0
 80054f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3301      	adds	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3e5      	bcc.n	80054cc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005520:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <USB_HostInit+0x16c>)
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <USB_HostInit+0x170>)
 800552c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005530:	e009      	b.n	8005546 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2280      	movs	r2, #128	; 0x80
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <USB_HostInit+0x174>)
 800553c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a0f      	ldr	r2, [pc, #60]	; (8005580 <USB_HostInit+0x178>)
 8005542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d105      	bne.n	8005558 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f043 0210 	orr.w	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699a      	ldr	r2, [r3, #24]
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <USB_HostInit+0x17c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005570:	b004      	add	sp, #16
 8005572:	4770      	bx	lr
 8005574:	01000200 	.word	0x01000200
 8005578:	00e00300 	.word	0x00e00300
 800557c:	00600080 	.word	0x00600080
 8005580:	004000e0 	.word	0x004000e0
 8005584:	a3200008 	.word	0xa3200008

08005588 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d0:	461a      	mov	r2, r3
 80055d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055d6:	6053      	str	r3, [r2, #4]
 80055d8:	e009      	b.n	80055ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d106      	bne.n	80055ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e6:	461a      	mov	r2, r3
 80055e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80055ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800561c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800562c:	2064      	movs	r0, #100	; 0x64
 800562e:	f7fb fc8b 	bl	8000f48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800563a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005640:	200a      	movs	r0, #10
 8005642:	f7fb fc81 	bl	8000f48 <HAL_Delay>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d109      	bne.n	8005694 <USB_DriveVbus+0x44>
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d106      	bne.n	8005694 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800568e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005692:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d109      	bne.n	80056b4 <USB_DriveVbus+0x64>
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	0c5b      	lsrs	r3, r3, #17
 80056e0:	f003 0303 	and.w	r3, r3, #3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	b29b      	uxth	r3, r3
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	4603      	mov	r3, r0
 8005724:	70fb      	strb	r3, [r7, #3]
 8005726:	460b      	mov	r3, r1
 8005728:	70bb      	strb	r3, [r7, #2]
 800572a:	4613      	mov	r3, r2
 800572c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	461a      	mov	r2, r3
 8005744:	f04f 33ff 	mov.w	r3, #4294967295
 8005748:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800574a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800574e:	2b03      	cmp	r3, #3
 8005750:	d87e      	bhi.n	8005850 <USB_HC_Init+0x13c>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <USB_HC_Init+0x44>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	08005813 	.word	0x08005813
 8005760:	08005769 	.word	0x08005769
 8005764:	080057d5 	.word	0x080057d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	461a      	mov	r2, r3
 8005776:	f240 439d 	movw	r3, #1181	; 0x49d
 800577a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800577c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da10      	bge.n	80057a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	440a      	add	r2, r1
 800579a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80057a4:	e057      	b.n	8005856 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d051      	beq.n	8005856 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057d0:	60d3      	str	r3, [r2, #12]
      break;
 80057d2:	e040      	b.n	8005856 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e0:	461a      	mov	r2, r3
 80057e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80057e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da34      	bge.n	800585a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	440a      	add	r2, r1
 8005806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800580a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005810:	e023      	b.n	800585a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	461a      	mov	r2, r3
 8005820:	f240 2325 	movw	r3, #549	; 0x225
 8005824:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da17      	bge.n	800585e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	440a      	add	r2, r1
 8005844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005848:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800584c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800584e:	e006      	b.n	800585e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77fb      	strb	r3, [r7, #31]
      break;
 8005854:	e004      	b.n	8005860 <USB_HC_Init+0x14c>
      break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <USB_HC_Init+0x14c>
      break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <USB_HC_Init+0x14c>
      break;
 800585e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	78fa      	ldrb	r2, [r7, #3]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	440a      	add	r2, r1
 8005876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	2101      	movs	r1, #1
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	6939      	ldr	r1, [r7, #16]
 8005896:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800589a:	4313      	orrs	r3, r2
 800589c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da03      	bge.n	80058ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	e001      	b.n	80058be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff feff 	bl	80056c2 <USB_GetHostSpeed>
 80058c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d106      	bne.n	80058dc <USB_HC_Init+0x1c8>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d003      	beq.n	80058dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e001      	b.n	80058e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e0:	787b      	ldrb	r3, [r7, #1]
 80058e2:	059b      	lsls	r3, r3, #22
 80058e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e8:	78bb      	ldrb	r3, [r7, #2]
 80058ea:	02db      	lsls	r3, r3, #11
 80058ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058f6:	049b      	lsls	r3, r3, #18
 80058f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005900:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005904:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	0159      	lsls	r1, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	440b      	add	r3, r1
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800591c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800591e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005922:	2b03      	cmp	r3, #3
 8005924:	d003      	beq.n	800592e <USB_HC_Init+0x21a>
 8005926:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d10f      	bne.n	800594e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	440a      	add	r2, r1
 8005944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800594e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	; 0x30
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005974:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d02d      	beq.n	80059de <USB_HC_StartXfer+0x86>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d129      	bne.n	80059de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d117      	bne.n	80059c0 <USB_HC_StartXfer+0x68>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	79db      	ldrb	r3, [r3, #7]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <USB_HC_StartXfer+0x48>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	79db      	ldrb	r3, [r3, #7]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d10f      	bne.n	80059c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <USB_HC_StartXfer+0x86>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	795b      	ldrb	r3, [r3, #5]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d107      	bne.n	80059de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fa0f 	bl	8005df8 <USB_DoPing>
      return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e0f8      	b.n	8005bd0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	8912      	ldrh	r2, [r2, #8]
 80059ee:	4413      	add	r3, r2
 80059f0:	3b01      	subs	r3, #1
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	8912      	ldrh	r2, [r2, #8]
 80059f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059fe:	8b7b      	ldrh	r3, [r7, #26]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d90b      	bls.n	8005a1c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005a04:	8b7b      	ldrh	r3, [r7, #26]
 8005a06:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	8912      	ldrh	r2, [r2, #8]
 8005a0e:	fb03 f202 	mul.w	r2, r3, r2
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	611a      	str	r2, [r3, #16]
 8005a16:	e001      	b.n	8005a1c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	78db      	ldrb	r3, [r3, #3]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	8912      	ldrh	r2, [r2, #8]
 8005a2a:	fb03 f202 	mul.w	r2, r3, r2
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	611a      	str	r2, [r3, #16]
 8005a32:	e003      	b.n	8005a3c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a46:	04d9      	lsls	r1, r3, #19
 8005a48:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <USB_HC_StartXfer+0x280>)
 8005a4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	7a9b      	ldrb	r3, [r3, #10]
 8005a52:	075b      	lsls	r3, r3, #29
 8005a54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	0148      	lsls	r0, r1, #5
 8005a5c:	6a39      	ldr	r1, [r7, #32]
 8005a5e:	4401      	add	r1, r0
 8005a60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	460a      	mov	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ab8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	7e7b      	ldrb	r3, [r7, #25]
 8005aca:	075b      	lsls	r3, r3, #29
 8005acc:	69f9      	ldr	r1, [r7, #28]
 8005ace:	0148      	lsls	r0, r1, #5
 8005ad0:	6a39      	ldr	r1, [r7, #32]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005af2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	78db      	ldrb	r3, [r3, #3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	e003      	b.n	8005b0e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b0c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	461a      	mov	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e04e      	b.n	8005bd0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	78db      	ldrb	r3, [r3, #3]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d149      	bne.n	8005bce <USB_HC_StartXfer+0x276>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	79db      	ldrb	r3, [r3, #7]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d830      	bhi.n	8005bac <USB_HC_StartXfer+0x254>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <USB_HC_StartXfer+0x1f8>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b85 	.word	0x08005b85
 8005b58:	08005b61 	.word	0x08005b61
 8005b5c:	08005b85 	.word	0x08005b85
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	3303      	adds	r3, #3
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b6a:	8afa      	ldrh	r2, [r7, #22]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d91c      	bls.n	8005bb0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b82:	e015      	b.n	8005bb0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	3303      	adds	r3, #3
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b8e:	8afa      	ldrh	r2, [r7, #22]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d90a      	bls.n	8005bb4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005baa:	e003      	b.n	8005bb4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005bac:	bf00      	nop
 8005bae:	e002      	b.n	8005bb6 <USB_HC_StartXfer+0x25e>
        break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <USB_HC_StartXfer+0x25e>
        break;
 8005bb4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68d9      	ldr	r1, [r3, #12]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	785a      	ldrb	r2, [r3, #1]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	9000      	str	r0, [sp, #0]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fb31 	bl	8005230 <USB_WritePacket>
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3728      	adds	r7, #40	; 0x28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	1ff80000 	.word	0x1ff80000

08005bdc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	b29b      	uxth	r3, r3
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b089      	sub	sp, #36	; 0x24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0c9b      	lsrs	r3, r3, #18
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	0fdb      	lsrs	r3, r3, #31
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d104      	bne.n	8005c58 <USB_HC_Halt+0x5a>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e0c8      	b.n	8005dea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <USB_HC_Halt+0x66>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d163      	bne.n	8005d2c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c82:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 80ab 	bne.w	8005de8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d133      	bne.n	8005d06 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cbc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cea:	d81d      	bhi.n	8005d28 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d02:	d0ec      	beq.n	8005cde <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d04:	e070      	b.n	8005de8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d26:	e05f      	b.n	8005de8 <USB_HC_Halt+0x1ea>
            break;
 8005d28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d2a:	e05d      	b.n	8005de8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d133      	bne.n	8005dc4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d9a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da8:	d81d      	bhi.n	8005de6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d0ec      	beq.n	8005d9c <USB_HC_Halt+0x19e>
 8005dc2:	e011      	b.n	8005de8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e000      	b.n	8005de8 <USB_HC_Halt+0x1ea>
          break;
 8005de6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3724      	adds	r7, #36	; 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	04da      	lsls	r2, r3, #19
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <USB_DoPing+0x74>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e28:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e40:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e48:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	1ff80000 	.word	0x1ff80000

08005e70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff f911 	bl	80050ac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e8a:	2110      	movs	r1, #16
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff f96b 	bl	8005168 <USB_FlushTxFifo>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff f997 	bl	80051d0 <USB_FlushRxFifo>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	e01f      	b.n	8005ef2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d9dc      	bls.n	8005eb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e034      	b.n	8005f68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f32:	461a      	mov	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f44:	d80c      	bhi.n	8005f60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f5c:	d0ec      	beq.n	8005f38 <USB_StopHost+0xc8>
 8005f5e:	e000      	b.n	8005f62 <USB_StopHost+0xf2>
        break;
 8005f60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d9c7      	bls.n	8005efe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f74:	461a      	mov	r2, r3
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff f880 	bl	800508a <USB_EnableGlobalInt>

  return ret;
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af04      	add	r7, sp, #16
 8005f9a:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8005fa4:	23ff      	movs	r3, #255	; 0xff
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fb93 	bl	80066d6 <USBH_FindInterface>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2bff      	cmp	r3, #255	; 0xff
 8005fb8:	d102      	bne.n	8005fc0 <USBH_MIDI_InterfaceInit+0x2c>
	{
	  USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.");
	  USBH_DbgLog (phost->pActiveClass->Name);
	  status = USBH_FAIL;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	e0fc      	b.n	80061ba <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fb6a 	bl	800669e <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8005fd0:	201c      	movs	r0, #28
 8005fd2:	f002 fa37 	bl	8008444 <malloc>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8005fea:	2302      	movs	r3, #2
 8005fec:	e0e6      	b.n	80061bc <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 8005fee:	221c      	movs	r2, #28
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f002 fa36 	bl	8008464 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005ffe:	4619      	mov	r1, r3
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	231a      	movs	r3, #26
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	4413      	add	r3, r2
 800600a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b25b      	sxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	da1c      	bge.n	8006050 <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800601c:	4619      	mov	r1, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	231a      	movs	r3, #26
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006038:	4619      	mov	r1, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	231a      	movs	r3, #26
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	811a      	strh	r2, [r3, #8]
 800604e:	e01b      	b.n	8006088 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006056:	4619      	mov	r1, r3
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	231a      	movs	r3, #26
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006066:	781a      	ldrb	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006072:	4619      	mov	r1, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	231a      	movs	r3, #26
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800608e:	4619      	mov	r1, r3
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	231a      	movs	r3, #26
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	4413      	add	r3, r2
 800609a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da1c      	bge.n	80060e0 <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80060ac:	4619      	mov	r1, r3
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	231a      	movs	r3, #26
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80060c8:	4619      	mov	r1, r3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	231a      	movs	r3, #26
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	811a      	strh	r2, [r3, #8]
 80060de:	e01b      	b.n	8006118 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80060e6:	4619      	mov	r1, r3
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	231a      	movs	r3, #26
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006102:	4619      	mov	r1, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	231a      	movs	r3, #26
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	78db      	ldrb	r3, [r3, #3]
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fdf7 	bl	8007d12 <USBH_AllocPipe>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fded 	bl	8007d12 <USBH_AllocPipe>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	7899      	ldrb	r1, [r3, #2]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	78d8      	ldrb	r0, [r3, #3]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	88d2      	ldrh	r2, [r2, #6]
 8006158:	9202      	str	r2, [sp, #8]
 800615a:	2202      	movs	r2, #2
 800615c:	9201      	str	r2, [sp, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	4623      	mov	r3, r4
 8006162:	4602      	mov	r2, r0
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fda5 	bl	8007cb4 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	7859      	ldrb	r1, [r3, #1]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7918      	ldrb	r0, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	8912      	ldrh	r2, [r2, #8]
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	2202      	movs	r2, #2
 8006186:	9201      	str	r2, [sp, #4]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4623      	mov	r3, r4
 800618c:	4602      	mov	r2, r0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fd90 	bl	8007cb4 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2200      	movs	r2, #0
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 f8a0 	bl	80082e8 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	789b      	ldrb	r3, [r3, #2]
 80061ac:	2200      	movs	r2, #0
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f002 f899 	bl	80082e8 <USBH_LL_SetToggle>
		status = USBH_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	789b      	ldrb	r3, [r3, #2]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	789b      	ldrb	r3, [r3, #2]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fd84 	bl	8007cf2 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	789b      	ldrb	r3, [r3, #2]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fdb0 	bl	8007d56 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fd71 	bl	8007cf2 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fd9d 	bl	8007d56 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	4618      	mov	r0, r3
 8006238:	f002 f90c 	bl	8008454 <free>
		phost->pActiveClass->pData = 0;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006242:	2200      	movs	r2, #0
 8006244:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800625e:	2102      	movs	r1, #2
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3

	return USBH_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d010      	beq.n	80062b2 <USBH_MIDI_Process+0x44>
 8006290:	2b02      	cmp	r3, #2
 8006292:	dc1b      	bgt.n	80062cc <USBH_MIDI_Process+0x5e>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <USBH_MIDI_Process+0x30>
 8006298:	2b01      	cmp	r3, #1
 800629a:	d003      	beq.n	80062a4 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 800629c:	e016      	b.n	80062cc <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
		break;
 80062a2:	e016      	b.n	80062d2 <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f86b 	bl	8006380 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8d9 	bl	8006462 <MIDI_ProcessReception>
		break;
 80062b0:	e00f      	b.n	80062d2 <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 80062b2:	2100      	movs	r1, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ffde 	bl	8007276 <USBH_ClrFeature>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
		break;
 80062ca:	e001      	b.n	80062d0 <USBH_MIDI_Process+0x62>
		break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <USBH_MIDI_Process+0x64>
		break;
 80062d0:	bf00      	nop

	}

	return status;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBH_MIDI_GetLastReceivedDataSize>:
 * @brief  This function return last recieved data size
 * @param  None
 * @retval None
 */
uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

	if(phost->gState == HOST_CLASS)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b0b      	cmp	r3, #11
 800630c:	d108      	bne.n	8006320 <USBH_MIDI_GetLastReceivedDataSize+0x2e>
	{
		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 ff2b 	bl	8008170 <USBH_LL_GetLastXferSize>
 800631a:	4603      	mov	r3, r0
 800631c:	b29b      	uxth	r3, r3
 800631e:	e000      	b.n	8006322 <USBH_MIDI_GetLastReceivedDataSize+0x30>
	}
	else
	{
		return 0;
 8006320:	2300      	movs	r3, #0
	}
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	4613      	mov	r3, r2
 8006336:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <USBH_MIDI_Receive+0x2c>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10d      	bne.n	8006372 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2203      	movs	r2, #3
 800636c:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006392:	2300      	movs	r3, #0
 8006394:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	7e1b      	ldrb	r3, [r3, #24]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d002      	beq.n	80063a4 <MIDI_ProcessTransmission+0x24>
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d021      	beq.n	80063e6 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80063a2:	e05a      	b.n	800645a <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8a9a      	ldrh	r2, [r3, #20]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88db      	ldrh	r3, [r3, #6]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d90b      	bls.n	80063c8 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	68d9      	ldr	r1, [r3, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88da      	ldrh	r2, [r3, #6]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	789b      	ldrb	r3, [r3, #2]
 80063bc:	2001      	movs	r0, #1
 80063be:	9000      	str	r0, [sp, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fc34 	bl	8007c2e <USBH_BulkSendData>
 80063c6:	e00a      	b.n	80063de <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68d9      	ldr	r1, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8a9a      	ldrh	r2, [r3, #20]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	789b      	ldrb	r3, [r3, #2]
 80063d4:	2001      	movs	r0, #1
 80063d6:	9000      	str	r0, [sp, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fc28 	bl	8007c2e <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2202      	movs	r2, #2
 80063e2:	761a      	strb	r2, [r3, #24]
		break;
 80063e4:	e039      	b.n	800645a <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	789b      	ldrb	r3, [r3, #2]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 ff51 	bl	8008294 <USBH_LL_GetURBState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d127      	bne.n	800644c <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8a9a      	ldrh	r2, [r3, #20]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	429a      	cmp	r2, r3
 8006406:	d90f      	bls.n	8006428 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8a9a      	ldrh	r2, [r3, #20]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	88d2      	ldrh	r2, [r2, #6]
 8006420:	441a      	add	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e002      	b.n	800642e <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8a9b      	ldrh	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	761a      	strb	r2, [r3, #24]
		break;
 800643c:	e00c      	b.n	8006458 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f866 	bl	8006516 <USBH_MIDI_TransmitCallback>
		break;
 800644a:	e005      	b.n	8006458 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d102      	bne.n	8006458 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	761a      	strb	r2, [r3, #24]
		break;
 8006458:	bf00      	nop
	}
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006474:	2300      	movs	r3, #0
 8006476:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	7e5b      	ldrb	r3, [r3, #25]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d002      	beq.n	8006486 <MIDI_ProcessReception+0x24>
 8006480:	2b04      	cmp	r3, #4
 8006482:	d00d      	beq.n	80064a0 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8006484:	e043      	b.n	800650e <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6919      	ldr	r1, [r3, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	891a      	ldrh	r2, [r3, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fbf0 	bl	8007c78 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2204      	movs	r2, #4
 800649c:	765a      	strb	r2, [r3, #25]
		break;
 800649e:	e036      	b.n	800650e <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fef4 	bl	8008294 <USBH_LL_GetURBState>
 80064ac:	4603      	mov	r3, r0
 80064ae:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d12a      	bne.n	800650c <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fe57 	bl	8008170 <USBH_LL_GetLastXferSize>
 80064c2:	4603      	mov	r3, r0
 80064c4:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8adb      	ldrh	r3, [r3, #22]
 80064ca:	461a      	mov	r2, r3
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dd15      	ble.n	8006500 <MIDI_ProcessReception+0x9e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	891b      	ldrh	r3, [r3, #8]
 80064d8:	893a      	ldrh	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d910      	bls.n	8006500 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8ada      	ldrh	r2, [r3, #22]
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	893b      	ldrh	r3, [r7, #8]
 80064f2:	441a      	add	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2203      	movs	r2, #3
 80064fc:	765a      	strb	r2, [r3, #25]
		break;
 80064fe:	e005      	b.n	800650c <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fa f9fa 	bl	8000900 <USBH_MIDI_ReceiveCallback>
		break;
 800650c:	bf00      	nop
	}
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]

}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800653e:	2302      	movs	r3, #2
 8006540:	e029      	b.n	8006596 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	79fa      	ldrb	r2, [r7, #7]
 8006546:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f81f 	bl	800659e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 fd3a 	bl	8008008 <USBH_LL_Init>

  return USBH_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e00a      	b.n	80065c6 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	2200      	movs	r2, #0
 80065be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b0f      	cmp	r3, #15
 80065ca:	d9f1      	bls.n	80065b0 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e009      	b.n	80065e6 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d3f1      	bcc.n	80065d2 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10f      	bne.n	8006686 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e004      	b.n	8006690 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006686:	2302      	movs	r3, #2
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e001      	b.n	8006690 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800668c:	2302      	movs	r3, #2
 800668e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d204      	bcs.n	80066c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066c2:	e001      	b.n	80066c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066c4:	2302      	movs	r3, #2
 80066c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b087      	sub	sp, #28
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	4608      	mov	r0, r1
 80066e0:	4611      	mov	r1, r2
 80066e2:	461a      	mov	r2, r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	70fb      	strb	r3, [r7, #3]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70bb      	strb	r3, [r7, #2]
 80066ec:	4613      	mov	r3, r2
 80066ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006700:	e025      	b.n	800674e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	221a      	movs	r2, #26
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	3308      	adds	r3, #8
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	3302      	adds	r3, #2
 8006712:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	795b      	ldrb	r3, [r3, #5]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	429a      	cmp	r2, r3
 800671c:	d002      	beq.n	8006724 <USBH_FindInterface+0x4e>
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	2bff      	cmp	r3, #255	; 0xff
 8006722:	d111      	bne.n	8006748 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006728:	78ba      	ldrb	r2, [r7, #2]
 800672a:	429a      	cmp	r2, r3
 800672c:	d002      	beq.n	8006734 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800672e:	78bb      	ldrb	r3, [r7, #2]
 8006730:	2bff      	cmp	r3, #255	; 0xff
 8006732:	d109      	bne.n	8006748 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006738:	787a      	ldrb	r2, [r7, #1]
 800673a:	429a      	cmp	r2, r3
 800673c:	d002      	beq.n	8006744 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800673e:	787b      	ldrb	r3, [r7, #1]
 8006740:	2bff      	cmp	r3, #255	; 0xff
 8006742:	d101      	bne.n	8006748 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	e006      	b.n	8006756 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	3301      	adds	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b09      	cmp	r3, #9
 8006752:	d9d6      	bls.n	8006702 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006754:	23ff      	movs	r3, #255	; 0xff
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fc88 	bl	8008080 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006770:	2101      	movs	r1, #1
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fda1 	bl	80082ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af04      	add	r7, sp, #16
 800678a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d102      	bne.n	80067a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2203      	movs	r2, #3
 80067a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b0b      	cmp	r3, #11
 80067ae:	f200 81c0 	bhi.w	8006b32 <USBH_Process+0x3ae>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <USBH_Process+0x34>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067e9 	.word	0x080067e9
 80067bc:	0800681b 	.word	0x0800681b
 80067c0:	08006883 	.word	0x08006883
 80067c4:	08006acd 	.word	0x08006acd
 80067c8:	08006b33 	.word	0x08006b33
 80067cc:	08006927 	.word	0x08006927
 80067d0:	08006a73 	.word	0x08006a73
 80067d4:	0800695d 	.word	0x0800695d
 80067d8:	0800697d 	.word	0x0800697d
 80067dc:	0800699d 	.word	0x0800699d
 80067e0:	080069e1 	.word	0x080069e1
 80067e4:	08006ab5 	.word	0x08006ab5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 81a0 	beq.w	8006b36 <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067fc:	20c8      	movs	r0, #200	; 0xc8
 80067fe:	f001 fda3 	bl	8008348 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fc99 	bl	800813a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006818:	e18d      	b.n	8006b36 <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006832:	e18f      	b.n	8006b54 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800683a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800683e:	d914      	bls.n	800686a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006846:	3301      	adds	r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006856:	2b03      	cmp	r3, #3
 8006858:	d903      	bls.n	8006862 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	220d      	movs	r2, #13
 800685e:	701a      	strb	r2, [r3, #0]
      break;
 8006860:	e178      	b.n	8006b54 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
      break;
 8006868:	e174      	b.n	8006b54 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8006870:	f103 020a 	add.w	r2, r3, #10
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800687a:	200a      	movs	r0, #10
 800687c:	f001 fd64 	bl	8008348 <USBH_Delay>
      break;
 8006880:	e168      	b.n	8006b54 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006892:	2104      	movs	r1, #4
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006898:	2064      	movs	r0, #100	; 0x64
 800689a:	f001 fd55 	bl	8008348 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fc24 	bl	80080ec <USBH_LL_GetSpeed>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2205      	movs	r2, #5
 80068b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068b4:	2100      	movs	r1, #0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fa2b 	bl	8007d12 <USBH_AllocPipe>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068c4:	2180      	movs	r1, #128	; 0x80
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fa23 	bl	8007d12 <USBH_AllocPipe>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	7919      	ldrb	r1, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068e8:	b292      	uxth	r2, r2
 80068ea:	9202      	str	r2, [sp, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	9201      	str	r2, [sp, #4]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4603      	mov	r3, r0
 80068f4:	2280      	movs	r2, #128	; 0x80
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f9dc 	bl	8007cb4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7959      	ldrb	r1, [r3, #5]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006910:	b292      	uxth	r2, r2
 8006912:	9202      	str	r2, [sp, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	9201      	str	r2, [sp, #4]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	4603      	mov	r3, r0
 800691c:	2200      	movs	r2, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f9c8 	bl	8007cb4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006924:	e116      	b.n	8006b54 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f91a 	bl	8006b60 <USBH_HandleEnum>
 800692c:	4603      	mov	r3, r0
 800692e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 8100 	bne.w	8006b3a <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006948:	2b01      	cmp	r3, #1
 800694a:	d103      	bne.n	8006954 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2208      	movs	r2, #8
 8006950:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006952:	e0f2      	b.n	8006b3a <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2207      	movs	r2, #7
 8006958:	701a      	strb	r2, [r3, #0]
      break;
 800695a:	e0ee      	b.n	8006b3a <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80eb 	beq.w	8006b3e <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800696e:	2101      	movs	r1, #1
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2208      	movs	r2, #8
 8006978:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800697a:	e0e0      	b.n	8006b3e <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006982:	b29b      	uxth	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fc2e 	bl	80071e8 <USBH_SetCfg>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80d7 	bne.w	8006b42 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2209      	movs	r2, #9
 8006998:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800699a:	e0d2      	b.n	8006b42 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069aa:	2101      	movs	r1, #1
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc3e 	bl	800722e <USBH_SetFeature>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	220a      	movs	r2, #10
 80069c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069c4:	e0bf      	b.n	8006b46 <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	f040 80bb 	bne.w	8006b46 <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	220a      	movs	r2, #10
 80069d4:	701a      	strb	r2, [r3, #0]
      break;
 80069d6:	e0b6      	b.n	8006b46 <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	220a      	movs	r2, #10
 80069dc:	701a      	strb	r2, [r3, #0]
      break;
 80069de:	e0b2      	b.n	8006b46 <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80af 	beq.w	8006b4a <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e018      	b.n	8006a2c <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069fa:	7bfa      	ldrb	r2, [r7, #15]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	791a      	ldrb	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d109      	bne.n	8006a26 <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8006a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8006a24:	e005      	b.n	8006a32 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0e3      	beq.n	80069fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d016      	beq.n	8006a6a <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2206      	movs	r2, #6
 8006a52:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a60:	e073      	b.n	8006b4a <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	220d      	movs	r2, #13
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e06f      	b.n	8006b4a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	220d      	movs	r2, #13
 8006a6e:	701a      	strb	r2, [r3, #0]
      break;
 8006a70:	e06b      	b.n	8006b4a <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d017      	beq.n	8006aac <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	220b      	movs	r2, #11
 8006a98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a9a:	e058      	b.n	8006b4e <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d154      	bne.n	8006b4e <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	220d      	movs	r2, #13
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e050      	b.n	8006b4e <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220d      	movs	r2, #13
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	e04c      	b.n	8006b4e <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d049      	beq.n	8006b52 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
      }
      break;
 8006aca:	e042      	b.n	8006b52 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fd62 	bl	800659e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8006b08:	2105      	movs	r1, #5
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fe1d 	bl	8006762 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b28:	e014      	b.n	8006b54 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 faa8 	bl	8008080 <USBH_LL_Start>
      break;
 8006b30:	e010      	b.n	8006b54 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b32:	bf00      	nop
 8006b34:	e00e      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b36:	bf00      	nop
 8006b38:	e00c      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e00a      	b.n	8006b54 <USBH_Process+0x3d0>
    break;
 8006b3e:	bf00      	nop
 8006b40:	e008      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b42:	bf00      	nop
 8006b44:	e006      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b46:	bf00      	nop
 8006b48:	e004      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e002      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <USBH_Process+0x3d0>
      break;
 8006b52:	bf00      	nop
  }
  return USBH_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b07      	cmp	r3, #7
 8006b76:	f200 81c1 	bhi.w	8006efc <USBH_HandleEnum+0x39c>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <USBH_HandleEnum+0x20>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006c5f 	.word	0x08006c5f
 8006b88:	08006cc9 	.word	0x08006cc9
 8006b8c:	08006d57 	.word	0x08006d57
 8006b90:	08006dc1 	.word	0x08006dc1
 8006b94:	08006e31 	.word	0x08006e31
 8006b98:	08006e77 	.word	0x08006e77
 8006b9c:	08006ebd 	.word	0x08006ebd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ba0:	2108      	movs	r1, #8
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa50 	bl	8007048 <USBH_Get_DevDesc>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d130      	bne.n	8006c14 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7919      	ldrb	r1, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bd6:	b292      	uxth	r2, r2
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	9201      	str	r2, [sp, #4]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4603      	mov	r3, r0
 8006be2:	2280      	movs	r2, #128	; 0x80
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f865 	bl	8007cb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7959      	ldrb	r1, [r3, #5]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	9202      	str	r2, [sp, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	9201      	str	r2, [sp, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f851 	bl	8007cb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c12:	e175      	b.n	8006f00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	f040 8172 	bne.w	8006f00 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	3301      	adds	r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d903      	bls.n	8006c3e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220d      	movs	r2, #13
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e160      	b.n	8006f00 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	795b      	ldrb	r3, [r3, #5]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f886 	bl	8007d56 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	791b      	ldrb	r3, [r3, #4]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f880 	bl	8007d56 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
      break;
 8006c5c:	e150      	b.n	8006f00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c5e:	2112      	movs	r1, #18
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9f1 	bl	8007048 <USBH_Get_DevDesc>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c76:	e145      	b.n	8006f04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	f040 8142 	bne.w	8006f04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c86:	3301      	adds	r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d903      	bls.n	8006ca2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	220d      	movs	r2, #13
 8006c9e:	701a      	strb	r2, [r3, #0]
      break;
 8006ca0:	e130      	b.n	8006f04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	795b      	ldrb	r3, [r3, #5]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f854 	bl	8007d56 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	791b      	ldrb	r3, [r3, #4]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f84e 	bl	8007d56 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
      break;
 8006cc6:	e11d      	b.n	8006f04 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cc8:	2101      	movs	r1, #1
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa68 	bl	80071a0 <USBH_SetAddress>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d132      	bne.n	8006d40 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006cda:	2002      	movs	r0, #2
 8006cdc:	f001 fb34 	bl	8008348 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2203      	movs	r2, #3
 8006cec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7919      	ldrb	r1, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d02:	b292      	uxth	r2, r2
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	9201      	str	r2, [sp, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 ffcf 	bl	8007cb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7959      	ldrb	r1, [r3, #5]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	9202      	str	r2, [sp, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4603      	mov	r3, r0
 8006d36:	2200      	movs	r2, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ffbb 	bl	8007cb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d3e:	e0e3      	b.n	8006f08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	f040 80e0 	bne.w	8006f08 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	220d      	movs	r2, #13
 8006d4c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	705a      	strb	r2, [r3, #1]
      break;
 8006d54:	e0d8      	b.n	8006f08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d56:	2109      	movs	r1, #9
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f99d 	bl	8007098 <USBH_Get_CfgDesc>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d6e:	e0cd      	b.n	8006f0c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	f040 80ca 	bne.w	8006f0c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d7e:	3301      	adds	r3, #1
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d903      	bls.n	8006d9a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	220d      	movs	r2, #13
 8006d96:	701a      	strb	r2, [r3, #0]
      break;
 8006d98:	e0b8      	b.n	8006f0c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	795b      	ldrb	r3, [r3, #5]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 ffd8 	bl	8007d56 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 ffd2 	bl	8007d56 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
      break;
 8006dbe:	e0a5      	b.n	8006f0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f965 	bl	8007098 <USBH_Get_CfgDesc>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2205      	movs	r2, #5
 8006ddc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dde:	e097      	b.n	8006f10 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	f040 8094 	bne.w	8006f10 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dee:	3301      	adds	r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d903      	bls.n	8006e0a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	220d      	movs	r2, #13
 8006e06:	701a      	strb	r2, [r3, #0]
      break;
 8006e08:	e082      	b.n	8006f10 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	795b      	ldrb	r3, [r3, #5]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 ffa0 	bl	8007d56 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	791b      	ldrb	r3, [r3, #4]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 ff9a 	bl	8007d56 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
      break;
 8006e2e:	e06f      	b.n	8006f10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d019      	beq.n	8006e6e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e46:	23ff      	movs	r3, #255	; 0xff
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f949 	bl	80070e0 <USBH_Get_StringDesc>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2206      	movs	r2, #6
 8006e5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e5e:	e059      	b.n	8006f14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d156      	bne.n	8006f14 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2206      	movs	r2, #6
 8006e6a:	705a      	strb	r2, [r3, #1]
      break;
 8006e6c:	e052      	b.n	8006f14 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2206      	movs	r2, #6
 8006e72:	705a      	strb	r2, [r3, #1]
      break;
 8006e74:	e04e      	b.n	8006f14 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e8c:	23ff      	movs	r3, #255	; 0xff
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f926 	bl	80070e0 <USBH_Get_StringDesc>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2207      	movs	r2, #7
 8006ea2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ea4:	e038      	b.n	8006f18 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d135      	bne.n	8006f18 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2207      	movs	r2, #7
 8006eb0:	705a      	strb	r2, [r3, #1]
      break;
 8006eb2:	e031      	b.n	8006f18 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2207      	movs	r2, #7
 8006eb8:	705a      	strb	r2, [r3, #1]
      break;
 8006eba:	e02d      	b.n	8006f18 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d017      	beq.n	8006ef6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ed2:	23ff      	movs	r3, #255	; 0xff
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f903 	bl	80070e0 <USBH_Get_StringDesc>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ee8:	e018      	b.n	8006f1c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d115      	bne.n	8006f1c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef4:	e012      	b.n	8006f1c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8006efa:	e00f      	b.n	8006f1c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006efc:	bf00      	nop
 8006efe:	e00e      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f00:	bf00      	nop
 8006f02:	e00c      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f04:	bf00      	nop
 8006f06:	e00a      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e008      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e006      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <USBH_HandleEnum+0x3be>
      break;
 8006f1c:	bf00      	nop
  }
  return Status;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f804 	bl	8006f6a <USBH_HandleSof>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b0b      	cmp	r3, #11
 8006f7a:	d10a      	bne.n	8006f92 <USBH_HandleSof+0x28>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
  }
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006faa:	bf00      	nop
}
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fc6:	bf00      	nop
}
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 f848 	bl	80080b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	791b      	ldrb	r3, [r3, #4]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fe92 	bl	8007d56 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	795b      	ldrb	r3, [r3, #5]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fe8c 	bl	8007d56 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b29b      	uxth	r3, r3
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007066:	2100      	movs	r1, #0
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f864 	bl	8007136 <USBH_GetDescriptor>
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	b292      	uxth	r2, r2
 8007088:	4619      	mov	r1, r3
 800708a:	f000 f918 	bl	80072be <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	331c      	adds	r3, #28
 80070a8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070aa:	887b      	ldrh	r3, [r7, #2]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b4:	2100      	movs	r1, #0
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f83d 	bl	8007136 <USBH_GetDescriptor>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d107      	bne.n	80070d6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80070c6:	887b      	ldrh	r3, [r7, #2]
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f987 	bl	80073e0 <USBH_ParseCfgDesc>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	461a      	mov	r2, r3
 80070ec:	460b      	mov	r3, r1
 80070ee:	72fb      	strb	r3, [r7, #11]
 80070f0:	4613      	mov	r3, r2
 80070f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070fc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007104:	893b      	ldrh	r3, [r7, #8]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	460b      	mov	r3, r1
 800710a:	2100      	movs	r1, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f812 	bl	8007136 <USBH_GetDescriptor>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007122:	893a      	ldrh	r2, [r7, #8]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fb24 	bl	8007774 <USBH_ParseStringDesc>
  }

  return status;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	72fb      	strb	r3, [r7, #11]
 8007144:	4613      	mov	r3, r2
 8007146:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	789b      	ldrb	r3, [r3, #2]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d11c      	bne.n	800718a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2206      	movs	r2, #6
 8007160:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	893a      	ldrh	r2, [r7, #8]
 8007166:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007168:	893b      	ldrh	r3, [r7, #8]
 800716a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800716e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007172:	d104      	bne.n	800717e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f240 4209 	movw	r2, #1033	; 0x409
 800717a:	829a      	strh	r2, [r3, #20]
 800717c:	e002      	b.n	8007184 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8b3a      	ldrh	r2, [r7, #24]
 8007188:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800718a:	8b3b      	ldrh	r3, [r7, #24]
 800718c:	461a      	mov	r2, r3
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fb3d 	bl	8007810 <USBH_CtlReq>
 8007196:	4603      	mov	r3, r0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	789b      	ldrb	r3, [r3, #2]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10f      	bne.n	80071d4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2205      	movs	r2, #5
 80071be:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071d4:	2200      	movs	r2, #0
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb19 	bl	8007810 <USBH_CtlReq>
 80071de:	4603      	mov	r3, r0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	789b      	ldrb	r3, [r3, #2]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d10e      	bne.n	800721a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2209      	movs	r2, #9
 8007206:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 faf6 	bl	8007810 <USBH_CtlReq>
 8007224:	4603      	mov	r3, r0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	789b      	ldrb	r3, [r3, #2]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d10f      	bne.n	8007262 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2203      	movs	r2, #3
 800724c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007262:	2200      	movs	r2, #0
 8007264:	2100      	movs	r1, #0
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fad2 	bl	8007810 <USBH_CtlReq>
 800726c:	4603      	mov	r3, r0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	789b      	ldrb	r3, [r3, #2]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10f      	bne.n	80072aa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 faae 	bl	8007810 <USBH_CtlReq>
 80072b4:	4603      	mov	r3, r0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	4613      	mov	r3, r2
 80072ca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3302      	adds	r3, #2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3303      	adds	r3, #3
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	791a      	ldrb	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	795a      	ldrb	r2, [r3, #5]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	799a      	ldrb	r2, [r3, #6]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	79da      	ldrb	r2, [r3, #7]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	79db      	ldrb	r3, [r3, #7]
 800731c:	2b20      	cmp	r3, #32
 800731e:	dc11      	bgt.n	8007344 <USBH_ParseDevDesc+0x86>
 8007320:	2b08      	cmp	r3, #8
 8007322:	db16      	blt.n	8007352 <USBH_ParseDevDesc+0x94>
 8007324:	3b08      	subs	r3, #8
 8007326:	2201      	movs	r2, #1
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <USBH_ParseDevDesc+0x8a>
 8007342:	e006      	b.n	8007352 <USBH_ParseDevDesc+0x94>
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d104      	bne.n	8007352 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	79da      	ldrb	r2, [r3, #7]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	71da      	strb	r2, [r3, #7]
      break;
 8007350:	e003      	b.n	800735a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2240      	movs	r2, #64	; 0x40
 8007356:	71da      	strb	r2, [r3, #7]
      break;
 8007358:	bf00      	nop
  }

  if (length > 8U)
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d939      	bls.n	80073d4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3308      	adds	r3, #8
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b29a      	uxth	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	3309      	adds	r3, #9
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	330a      	adds	r3, #10
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b29a      	uxth	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	330b      	adds	r3, #11
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	b29b      	uxth	r3, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	330c      	adds	r3, #12
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	330d      	adds	r3, #13
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	7b9a      	ldrb	r2, [r3, #14]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	7bda      	ldrb	r2, [r3, #15]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	7c1a      	ldrb	r2, [r3, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	7c5a      	ldrb	r2, [r3, #17]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	745a      	strb	r2, [r3, #17]
  }
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	; 0x30
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	785a      	ldrb	r2, [r3, #1]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3302      	adds	r3, #2
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29a      	uxth	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	3303      	adds	r3, #3
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	b29b      	uxth	r3, r3
 8007434:	4313      	orrs	r3, r2
 8007436:	b29b      	uxth	r3, r3
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	bf28      	it	cs
 800743e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007442:	b29a      	uxth	r2, r3
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	791a      	ldrb	r2, [r3, #4]
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	795a      	ldrb	r2, [r3, #5]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	799a      	ldrb	r2, [r3, #6]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	79da      	ldrb	r2, [r3, #7]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	7a1a      	ldrb	r2, [r3, #8]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d002      	beq.n	800747e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	2209      	movs	r2, #9
 800747c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b09      	cmp	r3, #9
 8007482:	f240 809d 	bls.w	80075c0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007486:	2309      	movs	r3, #9
 8007488:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800748e:	e081      	b.n	8007594 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007490:	f107 0316 	add.w	r3, r7, #22
 8007494:	4619      	mov	r1, r3
 8007496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007498:	f000 f99f 	bl	80077da <USBH_GetNextDesc>
 800749c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d176      	bne.n	8007594 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d002      	beq.n	80074b4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	2209      	movs	r2, #9
 80074b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b8:	221a      	movs	r2, #26
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	3308      	adds	r3, #8
 80074c0:	6a3a      	ldr	r2, [r7, #32]
 80074c2:	4413      	add	r3, r2
 80074c4:	3302      	adds	r3, #2
 80074c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ca:	69f8      	ldr	r0, [r7, #28]
 80074cc:	f000 f87e 	bl	80075cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074da:	e043      	b.n	8007564 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074dc:	f107 0316 	add.w	r3, r7, #22
 80074e0:	4619      	mov	r1, r3
 80074e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e4:	f000 f979 	bl	80077da <USBH_GetNextDesc>
 80074e8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d138      	bne.n	8007564 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	795b      	ldrb	r3, [r3, #5]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10f      	bne.n	800751a <USBH_ParseCfgDesc+0x13a>
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	799b      	ldrb	r3, [r3, #6]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d10b      	bne.n	800751a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	79db      	ldrb	r3, [r3, #7]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10f      	bne.n	800752a <USBH_ParseCfgDesc+0x14a>
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b09      	cmp	r3, #9
 8007510:	d00b      	beq.n	800752a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2209      	movs	r2, #9
 8007516:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007518:	e007      	b.n	800752a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b07      	cmp	r3, #7
 8007520:	d004      	beq.n	800752c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	2207      	movs	r2, #7
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e000      	b.n	800752c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800752a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007530:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007534:	3201      	adds	r2, #1
 8007536:	00d2      	lsls	r2, r2, #3
 8007538:	211a      	movs	r1, #26
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	4413      	add	r3, r2
 8007540:	3308      	adds	r3, #8
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800754a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754c:	69b9      	ldr	r1, [r7, #24]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f86b 	bl	800762a <USBH_ParseEPDesc>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800755a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800755e:	3301      	adds	r3, #1
 8007560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800756c:	429a      	cmp	r2, r3
 800756e:	d204      	bcs.n	800757a <USBH_ParseCfgDesc+0x19a>
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	885a      	ldrh	r2, [r3, #2]
 8007574:	8afb      	ldrh	r3, [r7, #22]
 8007576:	429a      	cmp	r2, r3
 8007578:	d8b0      	bhi.n	80074dc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007582:	429a      	cmp	r2, r3
 8007584:	d201      	bcs.n	800758a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007586:	2303      	movs	r3, #3
 8007588:	e01c      	b.n	80075c4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800758a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758e:	3301      	adds	r3, #1
 8007590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007598:	2b09      	cmp	r3, #9
 800759a:	d805      	bhi.n	80075a8 <USBH_ParseCfgDesc+0x1c8>
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	885a      	ldrh	r2, [r3, #2]
 80075a0:	8afb      	ldrh	r3, [r7, #22]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	f63f af74 	bhi.w	8007490 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	791b      	ldrb	r3, [r3, #4]
 80075ac:	2b0a      	cmp	r3, #10
 80075ae:	bf28      	it	cs
 80075b0:	230a      	movcs	r3, #10
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d201      	bcs.n	80075c0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075bc:	2303      	movs	r3, #3
 80075be:	e001      	b.n	80075c4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80075c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3730      	adds	r7, #48	; 0x30
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785a      	ldrb	r2, [r3, #1]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	789a      	ldrb	r2, [r3, #2]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	78da      	ldrb	r2, [r3, #3]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	791a      	ldrb	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	795a      	ldrb	r2, [r3, #5]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	799a      	ldrb	r2, [r3, #6]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	79da      	ldrb	r2, [r3, #7]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	7a1a      	ldrb	r2, [r3, #8]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	721a      	strb	r2, [r3, #8]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	785a      	ldrb	r2, [r3, #1]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	789a      	ldrb	r2, [r3, #2]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	78da      	ldrb	r2, [r3, #3]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3304      	adds	r3, #4
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29a      	uxth	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3305      	adds	r3, #5
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b29b      	uxth	r3, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	b29a      	uxth	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	799a      	ldrb	r2, [r3, #6]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	889b      	ldrh	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007686:	2303      	movs	r3, #3
 8007688:	75fb      	strb	r3, [r7, #23]
 800768a:	e033      	b.n	80076f4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	889b      	ldrh	r3, [r3, #4]
 8007690:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007694:	f023 0307 	bic.w	r3, r3, #7
 8007698:	b29a      	uxth	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	889b      	ldrh	r3, [r3, #4]
 80076a2:	b21a      	sxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3304      	adds	r3, #4
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b299      	uxth	r1, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3305      	adds	r3, #5
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	430b      	orrs	r3, r1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d110      	bne.n	80076e6 <USBH_ParseEPDesc+0xbc>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b299      	uxth	r1, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3305      	adds	r3, #5
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	430b      	orrs	r3, r1
 80076da:	b29b      	uxth	r3, r3
 80076dc:	b21b      	sxth	r3, r3
 80076de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	e001      	b.n	80076ea <USBH_ParseEPDesc+0xc0>
 80076e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ea:	4313      	orrs	r3, r2
 80076ec:	b21b      	sxth	r3, r3
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d116      	bne.n	800772c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	78db      	ldrb	r3, [r3, #3]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b01      	cmp	r3, #1
 8007708:	d005      	beq.n	8007716 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007712:	2b03      	cmp	r3, #3
 8007714:	d127      	bne.n	8007766 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	799b      	ldrb	r3, [r3, #6]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <USBH_ParseEPDesc+0xfc>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	799b      	ldrb	r3, [r3, #6]
 8007722:	2b10      	cmp	r3, #16
 8007724:	d91f      	bls.n	8007766 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007726:	2303      	movs	r3, #3
 8007728:	75fb      	strb	r3, [r7, #23]
 800772a:	e01c      	b.n	8007766 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	78db      	ldrb	r3, [r3, #3]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b01      	cmp	r3, #1
 8007736:	d10a      	bne.n	800774e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	799b      	ldrb	r3, [r3, #6]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <USBH_ParseEPDesc+0x11e>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	799b      	ldrb	r3, [r3, #6]
 8007744:	2b10      	cmp	r3, #16
 8007746:	d90e      	bls.n	8007766 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007748:	2303      	movs	r3, #3
 800774a:	75fb      	strb	r3, [r7, #23]
 800774c:	e00b      	b.n	8007766 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d105      	bne.n	8007766 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	799b      	ldrb	r3, [r3, #6]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007762:	2303      	movs	r3, #3
 8007764:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
}
 8007768:	4618      	mov	r0, r3
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d120      	bne.n	80077ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	1e9a      	subs	r2, r3, #2
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	4293      	cmp	r3, r2
 8007796:	bf28      	it	cs
 8007798:	4613      	movcs	r3, r2
 800779a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3302      	adds	r3, #2
 80077a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077a2:	2300      	movs	r3, #0
 80077a4:	82fb      	strh	r3, [r7, #22]
 80077a6:	e00b      	b.n	80077c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077a8:	8afb      	ldrh	r3, [r7, #22]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077ba:	8afb      	ldrh	r3, [r7, #22]
 80077bc:	3302      	adds	r3, #2
 80077be:	82fb      	strh	r3, [r7, #22]
 80077c0:	8afa      	ldrh	r2, [r7, #22]
 80077c2:	8abb      	ldrh	r3, [r7, #20]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3ef      	bcc.n	80077a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
  }
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4413      	add	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	789b      	ldrb	r3, [r3, #2]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d002      	beq.n	8007830 <USBH_CtlReq+0x20>
 800782a:	2b02      	cmp	r3, #2
 800782c:	d00f      	beq.n	800784e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800782e:	e027      	b.n	8007880 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2202      	movs	r2, #2
 8007846:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e018      	b.n	8007880 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f81c 	bl	800788c <USBH_HandleControl>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <USBH_CtlReq+0x54>
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d106      	bne.n	8007872 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e005      	b.n	800787e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d102      	bne.n	800787e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	709a      	strb	r2, [r3, #2]
      break;
 800787e:	bf00      	nop
  }
  return status;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af02      	add	r7, sp, #8
 8007892:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007898:	2300      	movs	r3, #0
 800789a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7e1b      	ldrb	r3, [r3, #24]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	2b0a      	cmp	r3, #10
 80078a4:	f200 8156 	bhi.w	8007b54 <USBH_HandleControl+0x2c8>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBH_HandleControl+0x24>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078f7 	.word	0x080078f7
 80078b8:	08007961 	.word	0x08007961
 80078bc:	08007987 	.word	0x08007987
 80078c0:	080079bf 	.word	0x080079bf
 80078c4:	080079e9 	.word	0x080079e9
 80078c8:	08007a3b 	.word	0x08007a3b
 80078cc:	08007a5d 	.word	0x08007a5d
 80078d0:	08007a99 	.word	0x08007a99
 80078d4:	08007abf 	.word	0x08007abf
 80078d8:	08007afd 	.word	0x08007afd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f103 0110 	add.w	r1, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	795b      	ldrb	r3, [r3, #5]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f943 	bl	8007b74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	761a      	strb	r2, [r3, #24]
      break;
 80078f4:	e139      	b.n	8007b6a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fcc9 	bl	8008294 <USBH_LL_GetURBState>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d11e      	bne.n	800794a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007914:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8adb      	ldrh	r3, [r3, #22]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800791e:	7b7b      	ldrb	r3, [r7, #13]
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d103      	bne.n	800792c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2203      	movs	r2, #3
 8007928:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800792a:	e115      	b.n	8007b58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2205      	movs	r2, #5
 8007930:	761a      	strb	r2, [r3, #24]
      break;
 8007932:	e111      	b.n	8007b58 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007934:	7b7b      	ldrb	r3, [r7, #13]
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d103      	bne.n	8007942 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2209      	movs	r2, #9
 800793e:	761a      	strb	r2, [r3, #24]
      break;
 8007940:	e10a      	b.n	8007b58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2207      	movs	r2, #7
 8007946:	761a      	strb	r2, [r3, #24]
      break;
 8007948:	e106      	b.n	8007b58 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d003      	beq.n	8007958 <USBH_HandleControl+0xcc>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b02      	cmp	r3, #2
 8007954:	f040 8100 	bne.w	8007b58 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220b      	movs	r2, #11
 800795c:	761a      	strb	r2, [r3, #24]
      break;
 800795e:	e0fb      	b.n	8007b58 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007966:	b29a      	uxth	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6899      	ldr	r1, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	899a      	ldrh	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	791b      	ldrb	r3, [r3, #4]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f93a 	bl	8007bf2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2204      	movs	r2, #4
 8007982:	761a      	strb	r2, [r3, #24]
      break;
 8007984:	e0f1      	b.n	8007b6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc81 	bl	8008294 <USBH_LL_GetURBState>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d102      	bne.n	80079a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2209      	movs	r2, #9
 80079a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	d102      	bne.n	80079ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079a8:	2303      	movs	r3, #3
 80079aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ac:	e0d6      	b.n	8007b5c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	f040 80d3 	bne.w	8007b5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	220b      	movs	r2, #11
 80079ba:	761a      	strb	r2, [r3, #24]
      break;
 80079bc:	e0ce      	b.n	8007b5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6899      	ldr	r1, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	899a      	ldrh	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	795b      	ldrb	r3, [r3, #5]
 80079ca:	2001      	movs	r0, #1
 80079cc:	9000      	str	r0, [sp, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8ea 	bl	8007ba8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2206      	movs	r2, #6
 80079e4:	761a      	strb	r2, [r3, #24]
      break;
 80079e6:	e0c0      	b.n	8007b6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	795b      	ldrb	r3, [r3, #5]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc50 	bl	8008294 <USBH_LL_GetURBState>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d103      	bne.n	8007a06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2207      	movs	r2, #7
 8007a02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a04:	e0ac      	b.n	8007b60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	d105      	bne.n	8007a18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	220c      	movs	r2, #12
 8007a10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	73fb      	strb	r3, [r7, #15]
      break;
 8007a16:	e0a3      	b.n	8007b60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d103      	bne.n	8007a26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2205      	movs	r2, #5
 8007a22:	761a      	strb	r2, [r3, #24]
      break;
 8007a24:	e09c      	b.n	8007b60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	f040 8099 	bne.w	8007b60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	220b      	movs	r2, #11
 8007a32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	73fb      	strb	r3, [r7, #15]
      break;
 8007a38:	e092      	b.n	8007b60 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2100      	movs	r1, #0
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f8d5 	bl	8007bf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2208      	movs	r2, #8
 8007a58:	761a      	strb	r2, [r3, #24]

      break;
 8007a5a:	e086      	b.n	8007b6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	791b      	ldrb	r3, [r3, #4]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fc16 	bl	8008294 <USBH_LL_GetURBState>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d105      	bne.n	8007a7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	220d      	movs	r2, #13
 8007a76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a7c:	e072      	b.n	8007b64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d103      	bne.n	8007a8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	220b      	movs	r2, #11
 8007a88:	761a      	strb	r2, [r3, #24]
      break;
 8007a8a:	e06b      	b.n	8007b64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b05      	cmp	r3, #5
 8007a90:	d168      	bne.n	8007b64 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a92:	2303      	movs	r3, #3
 8007a94:	73fb      	strb	r3, [r7, #15]
      break;
 8007a96:	e065      	b.n	8007b64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	795b      	ldrb	r3, [r3, #5]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	9200      	str	r2, [sp, #0]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f87f 	bl	8007ba8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	220a      	movs	r2, #10
 8007aba:	761a      	strb	r2, [r3, #24]
      break;
 8007abc:	e055      	b.n	8007b6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fbe5 	bl	8008294 <USBH_LL_GetURBState>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d105      	bne.n	8007ae0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	220d      	movs	r2, #13
 8007adc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ade:	e043      	b.n	8007b68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d103      	bne.n	8007aee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2209      	movs	r2, #9
 8007aea:	761a      	strb	r2, [r3, #24]
      break;
 8007aec:	e03c      	b.n	8007b68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d139      	bne.n	8007b68 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	220b      	movs	r2, #11
 8007af8:	761a      	strb	r2, [r3, #24]
      break;
 8007afa:	e035      	b.n	8007b68 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7e5b      	ldrb	r3, [r3, #25]
 8007b00:	3301      	adds	r3, #1
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	765a      	strb	r2, [r3, #25]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7e5b      	ldrb	r3, [r3, #25]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d806      	bhi.n	8007b1e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b1c:	e025      	b.n	8007b6a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007b24:	2106      	movs	r1, #6
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	795b      	ldrb	r3, [r3, #5]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f90d 	bl	8007d56 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	791b      	ldrb	r3, [r3, #4]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f907 	bl	8007d56 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	73fb      	strb	r3, [r7, #15]
      break;
 8007b52:	e00a      	b.n	8007b6a <USBH_HandleControl+0x2de>

    default:
      break;
 8007b54:	bf00      	nop
 8007b56:	e008      	b.n	8007b6a <USBH_HandleControl+0x2de>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e006      	b.n	8007b6a <USBH_HandleControl+0x2de>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e004      	b.n	8007b6a <USBH_HandleControl+0x2de>
      break;
 8007b60:	bf00      	nop
 8007b62:	e002      	b.n	8007b6a <USBH_HandleControl+0x2de>
      break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <USBH_HandleControl+0x2de>
      break;
 8007b68:	bf00      	nop
  }

  return status;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af04      	add	r7, sp, #16
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b82:	79f9      	ldrb	r1, [r7, #7]
 8007b84:	2300      	movs	r3, #0
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	2308      	movs	r3, #8
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	2200      	movs	r2, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fb4a 	bl	8008232 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bcc:	7979      	ldrb	r1, [r7, #5]
 8007bce:	7e3b      	ldrb	r3, [r7, #24]
 8007bd0:	9303      	str	r3, [sp, #12]
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	2200      	movs	r2, #0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fb25 	bl	8008232 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b088      	sub	sp, #32
 8007bf6:	af04      	add	r7, sp, #16
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	461a      	mov	r2, r3
 8007c00:	460b      	mov	r3, r1
 8007c02:	80fb      	strh	r3, [r7, #6]
 8007c04:	4613      	mov	r3, r2
 8007c06:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c08:	7979      	ldrb	r1, [r7, #5]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	9302      	str	r3, [sp, #8]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2301      	movs	r3, #1
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fb07 	bl	8008232 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c24:	2300      	movs	r3, #0

}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b088      	sub	sp, #32
 8007c32:	af04      	add	r7, sp, #16
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	80fb      	strh	r3, [r7, #6]
 8007c40:	4613      	mov	r3, r2
 8007c42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c52:	7979      	ldrb	r1, [r7, #5]
 8007c54:	7e3b      	ldrb	r3, [r7, #24]
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	2301      	movs	r3, #1
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2302      	movs	r3, #2
 8007c66:	2200      	movs	r2, #0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fae2 	bl	8008232 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4611      	mov	r1, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	460b      	mov	r3, r1
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c8e:	7979      	ldrb	r1, [r7, #5]
 8007c90:	2300      	movs	r3, #0
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fac4 	bl	8008232 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	70fb      	strb	r3, [r7, #3]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70bb      	strb	r3, [r7, #2]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cce:	7878      	ldrb	r0, [r7, #1]
 8007cd0:	78ba      	ldrb	r2, [r7, #2]
 8007cd2:	78f9      	ldrb	r1, [r7, #3]
 8007cd4:	8b3b      	ldrh	r3, [r7, #24]
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	7d3b      	ldrb	r3, [r7, #20]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	7c3b      	ldrb	r3, [r7, #16]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa57 	bl	8008196 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa76 	bl	80081f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f839 	bl	8007d96 <USBH_GetFreePipe>
 8007d24:	4603      	mov	r3, r0
 8007d26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d28:	89fb      	ldrh	r3, [r7, #14]
 8007d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	b2db      	uxtb	r3, r3
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	2b0f      	cmp	r3, #15
 8007d66:	d80f      	bhi.n	8007d88 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
 8007da6:	e010      	b.n	8007dca <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	e007      	b.n	8007dd4 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d9eb      	bls.n	8007da8 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
	  /* Init host Library, add supported class and start the library. */
	  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007de4:	2201      	movs	r2, #1
 8007de6:	490e      	ldr	r1, [pc, #56]	; (8007e20 <MX_USB_HOST_Init+0x40>)
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dea:	f7fe fb9e 	bl	800652a <USBH_Init>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_HOST_Init+0x18>
	  {
	    Error_Handler();
 8007df4:	f7f8 fd72 	bl	80008dc <Error_Handler>
	  }
	  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8007df8:	490b      	ldr	r1, [pc, #44]	; (8007e28 <MX_USB_HOST_Init+0x48>)
 8007dfa:	480a      	ldr	r0, [pc, #40]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dfc:	f7fe fc24 	bl	8006648 <USBH_RegisterClass>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MX_USB_HOST_Init+0x2a>
	  {
	    Error_Handler();
 8007e06:	f7f8 fd69 	bl	80008dc <Error_Handler>
	  }
	  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e0a:	4806      	ldr	r0, [pc, #24]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007e0c:	f7fe fca9 	bl	8006762 <USBH_Start>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_USB_HOST_Init+0x3a>
	  {
	    Error_Handler();
 8007e16:	f7f8 fd61 	bl	80008dc <Error_Handler>
	  }
	  return;
 8007e1a:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	20000324 	.word	0x20000324
 8007e28:	2000000c 	.word	0x2000000c

08007e2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e30:	4802      	ldr	r0, [pc, #8]	; (8007e3c <MX_USB_HOST_Process+0x10>)
 8007e32:	f7fe fca7 	bl	8006784 <USBH_Process>
}
 8007e36:	bf00      	nop
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000324 	.word	0x20000324

08007e40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d819      	bhi.n	8007e88 <USBH_UserProcess+0x48>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBH_UserProcess+0x1c>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e89 	.word	0x08007e89
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e71 	.word	0x08007e71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e72:	2203      	movs	r2, #3
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e008      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
  break;
 8007e7e:	e004      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
  break;
 8007e86:	e000      	b.n	8007e8a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	200000b0 	.word	0x200000b0

08007e9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea4:	f107 0314 	add.w	r3, r7, #20
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ebc:	d147      	bne.n	8007f4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	4619      	mov	r1, r3
 8007eee:	481b      	ldr	r0, [pc, #108]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007ef0:	f7f9 fc4a 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ef4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efa:	2302      	movs	r3, #2
 8007efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f06:	230a      	movs	r3, #10
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4812      	ldr	r0, [pc, #72]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007f12:	f7f9 fc39 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	6353      	str	r3, [r2, #52]	; 0x34
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	4a0b      	ldr	r2, [pc, #44]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f30:	6453      	str	r3, [r2, #68]	; 0x44
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	2043      	movs	r0, #67	; 0x43
 8007f44:	f7f9 f8ff 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f48:	2043      	movs	r0, #67	; 0x43
 8007f4a:	f7f9 f918 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3728      	adds	r7, #40	; 0x28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023800 	.word	0x40023800
 8007f5c:	40020000 	.word	0x40020000

08007f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe ffe9 	bl	8006f46 <USBH_LL_IncTimer>
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff f821 	bl	8006fd2 <USBH_LL_Connect>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff f82a 	bl	8007000 <USBH_LL_Disconnect>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe ffdb 	bl	8006f9a <USBH_LL_PortEnabled>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe ffdb 	bl	8006fb6 <USBH_LL_PortDisabled>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d12a      	bne.n	8008070 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <USBH_LL_Init+0x74>)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <USBH_LL_Init+0x74>)
 8008026:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <USBH_LL_Init+0x74>)
 800802c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008030:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <USBH_LL_Init+0x74>)
 8008034:	2208      	movs	r2, #8
 8008036:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <USBH_LL_Init+0x74>)
 800803a:	2201      	movs	r2, #1
 800803c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <USBH_LL_Init+0x74>)
 8008040:	2200      	movs	r2, #0
 8008042:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <USBH_LL_Init+0x74>)
 8008046:	2202      	movs	r2, #2
 8008048:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800804a:	4b0c      	ldr	r3, [pc, #48]	; (800807c <USBH_LL_Init+0x74>)
 800804c:	2200      	movs	r2, #0
 800804e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008050:	480a      	ldr	r0, [pc, #40]	; (800807c <USBH_LL_Init+0x74>)
 8008052:	f7f9 fd4e 	bl	8001af2 <HAL_HCD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800805c:	f7f8 fc3e 	bl	80008dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008060:	4806      	ldr	r0, [pc, #24]	; (800807c <USBH_LL_Init+0x74>)
 8008062:	f7fa f932 	bl	80022ca <HAL_HCD_GetCurrentFrame>
 8008066:	4603      	mov	r3, r0
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe ff5c 	bl	8006f28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200007cc 	.word	0x200007cc

08008080 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa f8a1 	bl	80021de <HAL_HCD_Start>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f95c 	bl	8008360 <USBH_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fa f8a9 	bl	8002224 <HAL_HCD_Stop>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f941 	bl	8008360 <USBH_Get_USB_Status>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fa f8f1 	bl	80022e6 <HAL_HCD_GetCurrentSpeed>
 8008104:	4603      	mov	r3, r0
 8008106:	2b02      	cmp	r3, #2
 8008108:	d00c      	beq.n	8008124 <USBH_LL_GetSpeed+0x38>
 800810a:	2b02      	cmp	r3, #2
 800810c:	d80d      	bhi.n	800812a <USBH_LL_GetSpeed+0x3e>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <USBH_LL_GetSpeed+0x2c>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <USBH_LL_GetSpeed+0x32>
 8008116:	e008      	b.n	800812a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	e008      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
    break;
 8008122:	e005      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008124:	2302      	movs	r3, #2
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e002      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800812a:	2301      	movs	r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	bf00      	nop
  }
  return  speed;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008150:	4618      	mov	r0, r3
 8008152:	f7fa f884 	bl	800225e <HAL_HCD_ResetPort>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8ff 	bl	8008360 <USBH_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fa f88b 	bl	80022a2 <HAL_HCD_HC_GetXferCount>
 800818c:	4603      	mov	r3, r0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008196:	b590      	push	{r4, r7, lr}
 8008198:	b089      	sub	sp, #36	; 0x24
 800819a:	af04      	add	r7, sp, #16
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70bb      	strb	r3, [r7, #2]
 80081ac:	4613      	mov	r3, r2
 80081ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 80081be:	787c      	ldrb	r4, [r7, #1]
 80081c0:	78ba      	ldrb	r2, [r7, #2]
 80081c2:	78f9      	ldrb	r1, [r7, #3]
 80081c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4623      	mov	r3, r4
 80081d6:	f7f9 fcee 	bl	8001bb6 <HAL_HCD_HC_Init>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f8bd 	bl	8008360 <USBH_Get_USB_Status>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd90      	pop	{r4, r7, pc}

080081f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7f9 fd5e 	bl	8001cd4 <HAL_HCD_HC_Halt>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f89e 	bl	8008360 <USBH_Get_USB_Status>
 8008224:	4603      	mov	r3, r0
 8008226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008228:	7bbb      	ldrb	r3, [r7, #14]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008232:	b590      	push	{r4, r7, lr}
 8008234:	b089      	sub	sp, #36	; 0x24
 8008236:	af04      	add	r7, sp, #16
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	4608      	mov	r0, r1
 800823c:	4611      	mov	r1, r2
 800823e:	461a      	mov	r2, r3
 8008240:	4603      	mov	r3, r0
 8008242:	70fb      	strb	r3, [r7, #3]
 8008244:	460b      	mov	r3, r1
 8008246:	70bb      	strb	r3, [r7, #2]
 8008248:	4613      	mov	r3, r2
 800824a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800825a:	787c      	ldrb	r4, [r7, #1]
 800825c:	78ba      	ldrb	r2, [r7, #2]
 800825e:	78f9      	ldrb	r1, [r7, #3]
 8008260:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	4623      	mov	r3, r4
 8008276:	f7f9 fd51 	bl	8001d1c <HAL_HCD_HC_SubmitRequest>
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f86d 	bl	8008360 <USBH_Get_USB_Status>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800828a:	7bbb      	ldrb	r3, [r7, #14]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	bd90      	pop	{r4, r7, pc}

08008294 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f9 ffe5 	bl	800227a <HAL_HCD_HC_GetURBState>
 80082b0:	4603      	mov	r3, r0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d103      	bne.n	80082d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f870 	bl	80083b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082d8:	20c8      	movs	r0, #200	; 0xc8
 80082da:	f7f8 fe35 	bl	8000f48 <HAL_Delay>
  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80082fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	212c      	movs	r1, #44	; 0x2c
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	4413      	add	r3, r2
 800830c:	333b      	adds	r3, #59	; 0x3b
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	212c      	movs	r1, #44	; 0x2c
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	3354      	adds	r3, #84	; 0x54
 8008322:	78ba      	ldrb	r2, [r7, #2]
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e008      	b.n	800833a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	212c      	movs	r1, #44	; 0x2c
 800832e:	fb01 f303 	mul.w	r3, r1, r3
 8008332:	4413      	add	r3, r2
 8008334:	3355      	adds	r3, #85	; 0x55
 8008336:	78ba      	ldrb	r2, [r7, #2]
 8008338:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f8 fdf9 	bl	8000f48 <HAL_Delay>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b03      	cmp	r3, #3
 8008372:	d817      	bhi.n	80083a4 <USBH_Get_USB_Status+0x44>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBH_Get_USB_Status+0x1c>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	0800838d 	.word	0x0800838d
 8008380:	08008393 	.word	0x08008393
 8008384:	08008399 	.word	0x08008399
 8008388:	0800839f 	.word	0x0800839f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e00b      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008392:	2302      	movs	r3, #2
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e008      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e005      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e002      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	bf00      	nop
  }
  return usb_status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e001      	b.n	80083d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80083d2:	2300      	movs	r3, #0
 80083d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	461a      	mov	r2, r3
 80083da:	2101      	movs	r1, #1
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <MX_DriverVbusFS+0x34>)
 80083de:	f7f9 fb6f 	bl	8001ac0 <HAL_GPIO_WritePin>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40020800 	.word	0x40020800

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	; (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000002c 	.word	0x2000002c

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4d0d      	ldr	r5, [pc, #52]	; (8008434 <__libc_init_array+0x38>)
 8008400:	4c0d      	ldr	r4, [pc, #52]	; (8008438 <__libc_init_array+0x3c>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	2600      	movs	r6, #0
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	4d0b      	ldr	r5, [pc, #44]	; (800843c <__libc_init_array+0x40>)
 800840e:	4c0c      	ldr	r4, [pc, #48]	; (8008440 <__libc_init_array+0x44>)
 8008410:	f000 f92e 	bl	8008670 <_init>
 8008414:	1b64      	subs	r4, r4, r5
 8008416:	10a4      	asrs	r4, r4, #2
 8008418:	2600      	movs	r6, #0
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	f855 3b04 	ldr.w	r3, [r5], #4
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	f855 3b04 	ldr.w	r3, [r5], #4
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	080086b8 	.word	0x080086b8
 8008438:	080086b8 	.word	0x080086b8
 800843c:	080086b8 	.word	0x080086b8
 8008440:	080086bc 	.word	0x080086bc

08008444 <malloc>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <malloc+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f000 b87f 	b.w	800854c <_malloc_r>
 800844e:	bf00      	nop
 8008450:	2000002c 	.word	0x2000002c

08008454 <free>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <free+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f000 b80b 	b.w	8008474 <_free_r>
 800845e:	bf00      	nop
 8008460:	2000002c 	.word	0x2000002c

08008464 <memset>:
 8008464:	4402      	add	r2, r0
 8008466:	4603      	mov	r3, r0
 8008468:	4293      	cmp	r3, r2
 800846a:	d100      	bne.n	800846e <memset+0xa>
 800846c:	4770      	bx	lr
 800846e:	f803 1b01 	strb.w	r1, [r3], #1
 8008472:	e7f9      	b.n	8008468 <memset+0x4>

08008474 <_free_r>:
 8008474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008476:	2900      	cmp	r1, #0
 8008478:	d044      	beq.n	8008504 <_free_r+0x90>
 800847a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847e:	9001      	str	r0, [sp, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f1a1 0404 	sub.w	r4, r1, #4
 8008486:	bfb8      	it	lt
 8008488:	18e4      	addlt	r4, r4, r3
 800848a:	f000 f8e3 	bl	8008654 <__malloc_lock>
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <_free_r+0x94>)
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	b933      	cbnz	r3, 80084a4 <_free_r+0x30>
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	b003      	add	sp, #12
 800849c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a0:	f000 b8de 	b.w	8008660 <__malloc_unlock>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d908      	bls.n	80084ba <_free_r+0x46>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1949      	addeq	r1, r1, r5
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	e7ed      	b.n	8008496 <_free_r+0x22>
 80084ba:	461a      	mov	r2, r3
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b10b      	cbz	r3, 80084c4 <_free_r+0x50>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d9fa      	bls.n	80084ba <_free_r+0x46>
 80084c4:	6811      	ldr	r1, [r2, #0]
 80084c6:	1855      	adds	r5, r2, r1
 80084c8:	42a5      	cmp	r5, r4
 80084ca:	d10b      	bne.n	80084e4 <_free_r+0x70>
 80084cc:	6824      	ldr	r4, [r4, #0]
 80084ce:	4421      	add	r1, r4
 80084d0:	1854      	adds	r4, r2, r1
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	d1e0      	bne.n	800849a <_free_r+0x26>
 80084d8:	681c      	ldr	r4, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	6053      	str	r3, [r2, #4]
 80084de:	4421      	add	r1, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	e7da      	b.n	800849a <_free_r+0x26>
 80084e4:	d902      	bls.n	80084ec <_free_r+0x78>
 80084e6:	230c      	movs	r3, #12
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	e7d6      	b.n	800849a <_free_r+0x26>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf04      	itt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	bf04      	itt	eq
 80084fc:	1949      	addeq	r1, r1, r5
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	6054      	str	r4, [r2, #4]
 8008502:	e7ca      	b.n	800849a <_free_r+0x26>
 8008504:	b003      	add	sp, #12
 8008506:	bd30      	pop	{r4, r5, pc}
 8008508:	200000b4 	.word	0x200000b4

0800850c <sbrk_aligned>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4e0e      	ldr	r6, [pc, #56]	; (8008548 <sbrk_aligned+0x3c>)
 8008510:	460c      	mov	r4, r1
 8008512:	6831      	ldr	r1, [r6, #0]
 8008514:	4605      	mov	r5, r0
 8008516:	b911      	cbnz	r1, 800851e <sbrk_aligned+0x12>
 8008518:	f000 f88c 	bl	8008634 <_sbrk_r>
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f887 	bl	8008634 <_sbrk_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d00a      	beq.n	8008540 <sbrk_aligned+0x34>
 800852a:	1cc4      	adds	r4, r0, #3
 800852c:	f024 0403 	bic.w	r4, r4, #3
 8008530:	42a0      	cmp	r0, r4
 8008532:	d007      	beq.n	8008544 <sbrk_aligned+0x38>
 8008534:	1a21      	subs	r1, r4, r0
 8008536:	4628      	mov	r0, r5
 8008538:	f000 f87c 	bl	8008634 <_sbrk_r>
 800853c:	3001      	adds	r0, #1
 800853e:	d101      	bne.n	8008544 <sbrk_aligned+0x38>
 8008540:	f04f 34ff 	mov.w	r4, #4294967295
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	200000b8 	.word	0x200000b8

0800854c <_malloc_r>:
 800854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008550:	1ccd      	adds	r5, r1, #3
 8008552:	f025 0503 	bic.w	r5, r5, #3
 8008556:	3508      	adds	r5, #8
 8008558:	2d0c      	cmp	r5, #12
 800855a:	bf38      	it	cc
 800855c:	250c      	movcc	r5, #12
 800855e:	2d00      	cmp	r5, #0
 8008560:	4607      	mov	r7, r0
 8008562:	db01      	blt.n	8008568 <_malloc_r+0x1c>
 8008564:	42a9      	cmp	r1, r5
 8008566:	d905      	bls.n	8008574 <_malloc_r+0x28>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	2600      	movs	r6, #0
 800856e:	4630      	mov	r0, r6
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008574:	4e2e      	ldr	r6, [pc, #184]	; (8008630 <_malloc_r+0xe4>)
 8008576:	f000 f86d 	bl	8008654 <__malloc_lock>
 800857a:	6833      	ldr	r3, [r6, #0]
 800857c:	461c      	mov	r4, r3
 800857e:	bb34      	cbnz	r4, 80085ce <_malloc_r+0x82>
 8008580:	4629      	mov	r1, r5
 8008582:	4638      	mov	r0, r7
 8008584:	f7ff ffc2 	bl	800850c <sbrk_aligned>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	4604      	mov	r4, r0
 800858c:	d14d      	bne.n	800862a <_malloc_r+0xde>
 800858e:	6834      	ldr	r4, [r6, #0]
 8008590:	4626      	mov	r6, r4
 8008592:	2e00      	cmp	r6, #0
 8008594:	d140      	bne.n	8008618 <_malloc_r+0xcc>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	4631      	mov	r1, r6
 800859a:	4638      	mov	r0, r7
 800859c:	eb04 0803 	add.w	r8, r4, r3
 80085a0:	f000 f848 	bl	8008634 <_sbrk_r>
 80085a4:	4580      	cmp	r8, r0
 80085a6:	d13a      	bne.n	800861e <_malloc_r+0xd2>
 80085a8:	6821      	ldr	r1, [r4, #0]
 80085aa:	3503      	adds	r5, #3
 80085ac:	1a6d      	subs	r5, r5, r1
 80085ae:	f025 0503 	bic.w	r5, r5, #3
 80085b2:	3508      	adds	r5, #8
 80085b4:	2d0c      	cmp	r5, #12
 80085b6:	bf38      	it	cc
 80085b8:	250c      	movcc	r5, #12
 80085ba:	4629      	mov	r1, r5
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ffa5 	bl	800850c <sbrk_aligned>
 80085c2:	3001      	adds	r0, #1
 80085c4:	d02b      	beq.n	800861e <_malloc_r+0xd2>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	442b      	add	r3, r5
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	e00e      	b.n	80085ec <_malloc_r+0xa0>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	1b52      	subs	r2, r2, r5
 80085d2:	d41e      	bmi.n	8008612 <_malloc_r+0xc6>
 80085d4:	2a0b      	cmp	r2, #11
 80085d6:	d916      	bls.n	8008606 <_malloc_r+0xba>
 80085d8:	1961      	adds	r1, r4, r5
 80085da:	42a3      	cmp	r3, r4
 80085dc:	6025      	str	r5, [r4, #0]
 80085de:	bf18      	it	ne
 80085e0:	6059      	strne	r1, [r3, #4]
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	bf08      	it	eq
 80085e6:	6031      	streq	r1, [r6, #0]
 80085e8:	5162      	str	r2, [r4, r5]
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	4638      	mov	r0, r7
 80085ee:	f104 060b 	add.w	r6, r4, #11
 80085f2:	f000 f835 	bl	8008660 <__malloc_unlock>
 80085f6:	f026 0607 	bic.w	r6, r6, #7
 80085fa:	1d23      	adds	r3, r4, #4
 80085fc:	1af2      	subs	r2, r6, r3
 80085fe:	d0b6      	beq.n	800856e <_malloc_r+0x22>
 8008600:	1b9b      	subs	r3, r3, r6
 8008602:	50a3      	str	r3, [r4, r2]
 8008604:	e7b3      	b.n	800856e <_malloc_r+0x22>
 8008606:	6862      	ldr	r2, [r4, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	bf0c      	ite	eq
 800860c:	6032      	streq	r2, [r6, #0]
 800860e:	605a      	strne	r2, [r3, #4]
 8008610:	e7ec      	b.n	80085ec <_malloc_r+0xa0>
 8008612:	4623      	mov	r3, r4
 8008614:	6864      	ldr	r4, [r4, #4]
 8008616:	e7b2      	b.n	800857e <_malloc_r+0x32>
 8008618:	4634      	mov	r4, r6
 800861a:	6876      	ldr	r6, [r6, #4]
 800861c:	e7b9      	b.n	8008592 <_malloc_r+0x46>
 800861e:	230c      	movs	r3, #12
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	4638      	mov	r0, r7
 8008624:	f000 f81c 	bl	8008660 <__malloc_unlock>
 8008628:	e7a1      	b.n	800856e <_malloc_r+0x22>
 800862a:	6025      	str	r5, [r4, #0]
 800862c:	e7de      	b.n	80085ec <_malloc_r+0xa0>
 800862e:	bf00      	nop
 8008630:	200000b4 	.word	0x200000b4

08008634 <_sbrk_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_sbrk_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f8 fb4c 	bl	8000cdc <_sbrk>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_sbrk_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_sbrk_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	200000bc 	.word	0x200000bc

08008654 <__malloc_lock>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__malloc_lock+0x8>)
 8008656:	f000 b809 	b.w	800866c <__retarget_lock_acquire_recursive>
 800865a:	bf00      	nop
 800865c:	200000c0 	.word	0x200000c0

08008660 <__malloc_unlock>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__malloc_unlock+0x8>)
 8008662:	f000 b804 	b.w	800866e <__retarget_lock_release_recursive>
 8008666:	bf00      	nop
 8008668:	200000c0 	.word	0x200000c0

0800866c <__retarget_lock_acquire_recursive>:
 800866c:	4770      	bx	lr

0800866e <__retarget_lock_release_recursive>:
 800866e:	4770      	bx	lr

08008670 <_init>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	bf00      	nop
 8008674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008676:	bc08      	pop	{r3}
 8008678:	469e      	mov	lr, r3
 800867a:	4770      	bx	lr

0800867c <_fini>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr
